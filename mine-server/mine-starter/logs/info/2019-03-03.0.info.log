2019-03-03 14:42:08.337 INFO  o.h.v.i.u.Version - HV000001: Hibernate Validator 5.2.4.Final
2019-03-03 14:42:08.450 INFO  c.c.ServerApp - Starting ServerApp on WINDOWS-GUOYD with PID 5264 (E:\personal_workspace\git_code\project\mine-server\mine-starter\target\classes started by guoyd in E:\personal_workspace\git_code\project\mine-server\mine-starter)
2019-03-03 14:42:08.450 DEBUG c.c.ServerApp - Running with Spring Boot v1.3.3.RELEASE, Spring v4.2.3.RELEASE
2019-03-03 14:42:08.451 INFO  c.c.ServerApp - No active profile set, falling back to default profiles: default
2019-03-03 14:42:10.094 ERROR c.a.d.p.DruidAbstractDataSource - maxIdle is deprecated
2019-03-03 14:42:11.577 INFO  c.a.d.p.DruidDataSource - {dataSource-1} inited
2019-03-03 14:42:11.691 DEBUG o.a.i.l.LogFactory - Logging initialized using 'org.apache.ibatis.logging.slf4j.Slf4jImpl' adapter.
2019-03-03 14:42:12.116 DEBUG c.g.m.m.p.OffsetLimitInterceptor - dialectClass: com.github.miemiedev.mybatis.paginator.dialect.MySQLDialect 
2019-03-03 14:42:12.118 DEBUG c.g.m.m.p.OffsetLimitInterceptor - asyncTotalCount: false 
2019-03-03 14:42:13.299 INFO  o.a.c.c.StandardService - Starting service Tomcat
2019-03-03 14:42:13.301 INFO  o.a.c.c.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.0.28
2019-03-03 14:42:13.519 INFO  o.a.c.c.C.[.[.[/] - Initializing Spring embedded WebApplicationContext
2019-03-03 14:42:14.700 DEBUG c.c.c.MineServiceHandler - 测试接口初始化
2019-03-03 14:42:14.767 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_USER_LOGIN
2019-03-03 14:42:14.767 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_ARTICLE_DETAIL
2019-03-03 14:42:14.767 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_ARTICLE_UPDATE_READ_COUNT
2019-03-03 14:42:14.768 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_ARTICLE_LIST_RANK_TOP
2019-03-03 14:42:14.768 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_ARTICLE_LIST
2019-03-03 14:42:14.768 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_RANDOM_ARTICLE
2019-03-03 14:42:14.768 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_LATEST_ARTICLE
2019-03-03 14:42:14.768 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_KEYWORDS
2019-03-03 14:42:14.769 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_DAILY_ESSAYS
2019-03-03 14:42:14.769 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_DATA_EXPORT
2019-03-03 14:42:14.769 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_CONST
2019-03-03 14:42:14.769 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_SITE_INFORMATION
2019-03-03 14:42:14.769 DEBUG c.c.c.MineServiceHandler - 测试接口初始化完毕
2019-03-03 14:42:16.677 INFO  o.a.c.h.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8181"]
2019-03-03 14:42:16.700 INFO  o.a.c.h.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8181"]
2019-03-03 14:42:16.729 INFO  o.a.t.u.n.NioSelectorPool - Using a shared selector for servlet write/read
2019-03-03 14:42:16.830 INFO  c.c.ServerApp - Started ServerApp in 9.233 seconds (JVM running for 9.908)
2019-03-03 14:43:26.784 INFO  o.a.c.c.C.[.[.[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-03-03 14:43:27.147 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 14:43:27.290 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dd70e43]
2019-03-03 14:43:27.293 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 14:43:27.315 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 14:43:27.349 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 14:43:27.350 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 14:43:27.352 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 14:43:27.353 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 14:43:27.354 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 14:43:27.354 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 14:43:27.355 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 14:43:27.493 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 14:43:27.504 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dd70e43]
2019-03-03 14:43:27.504 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 14:43:27.505 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 14:43:27.526 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 14:43:27.527 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 0, 2, 网站前端
2019-03-03 14:43:27.528 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 0, 2, 网站前端
2019-03-03 14:43:27.528 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 0, 2, 网站前端
2019-03-03 14:43:27.529 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 0, 2, 网站前端
2019-03-03 14:43:27.530 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 0, 1, 后端技术
2019-03-03 14:43:27.591 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 14:43:27.600 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 14:43:27.604 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 14:43:27.611 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_LATEST_ARTICLE","params":[10]}
2019-03-03 14:43:27.611 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dd70e43]
2019-03-03 14:43:27.611 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 14:43:27.612 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 14:43:27.616 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 14:43:27.622 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 14:43:27.622 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2da58200]
2019-03-03 14:43:27.623 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 14:43:27.623 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 14:43:27.624 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 14:43:27.624 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@58496b09]
2019-03-03 14:43:27.624 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 14:43:27.625 DEBUG c.c.m.A.findLatestArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@72d48242]
2019-03-03 14:43:27.625 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@27e5f95f]
2019-03-03 14:43:27.625 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 14:43:27.625 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 14:43:27.626 DEBUG c.c.m.A.findLatestArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC LIMIT ? 
2019-03-03 14:43:27.627 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 14:43:27.628 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 14:43:27.628 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 14:43:27.628 DEBUG c.c.m.A.findLatestArticle - ==> Parameters: 10(Integer)
2019-03-03 14:43:27.628 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 14:43:27.630 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 14:43:27.632 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 14:43:27.646 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 14:43:27.647 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 14:43:27.649 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 14:43:27.649 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 14:43:27.650 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2da58200]
2019-03-03 14:43:27.650 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 14:43:27.650 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 14:43:27.651 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 14:43:27.653 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 14:43:27.653 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 14:43:27.654 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 14:43:27.656 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 14:43:27.657 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 14:43:27.658 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 14:43:27.688 DEBUG c.c.m.A.findLatestArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 14:43:27.689 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 14:43:27.689 DEBUG c.c.m.A.findLatestArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 0, 2, 网站前端
2019-03-03 14:43:27.691 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 14:43:27.691 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 14:43:27.693 DEBUG c.c.m.A.findLatestArticle - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 0, 2, 网站前端
2019-03-03 14:43:27.693 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 14:43:27.693 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 14:43:27.694 DEBUG c.c.m.A.findLatestArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 0, 2, 网站前端
2019-03-03 14:43:27.696 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 14:43:27.697 DEBUG c.c.m.A.findLatestArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 0, 2, 网站前端
2019-03-03 14:43:27.699 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 14:43:27.699 DEBUG c.c.m.A.findLatestArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 5, null, 0, 1, 后端技术
2019-03-03 14:43:27.702 DEBUG c.c.m.A.findLatestArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 0, 4, 数据库
2019-03-03 14:43:27.703 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 14:43:27.703 DEBUG c.c.m.A.findLatestArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 0, 1, 后端技术
2019-03-03 14:43:27.705 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 14:43:27.744 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 14:43:27.767 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@58496b09]
2019-03-03 14:43:27.769 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 14:43:27.770 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 14:43:27.786 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 14:43:27.787 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 14:43:27.788 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 14:43:27.789 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 14:43:27.790 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 14:43:27.790 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 14:43:27.791 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 14:43:27.807 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null,null]}
2019-03-03 14:43:27.821 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@58496b09]
2019-03-03 14:43:27.821 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-03-03 14:43:27.822 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-03-03 14:43:27.847 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 14:43:27.848 DEBUG c.c.m.A.findArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 0, 2, 网站前端
2019-03-03 14:43:27.848 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 0, 2, 网站前端
2019-03-03 14:43:27.849 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 0, 2, 网站前端
2019-03-03 14:43:27.850 DEBUG c.c.m.A.findArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 0, 2, 网站前端
2019-03-03 14:43:27.854 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 5, null, 0, 1, 后端技术
2019-03-03 14:43:27.855 DEBUG c.c.m.A.findArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 0, 4, 数据库
2019-03-03 14:43:27.855 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 0, 1, 后端技术
2019-03-03 14:43:30.230 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["78"]}
2019-03-03 14:43:30.247 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@58496b09]
2019-03-03 14:43:30.248 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-03-03 14:43:30.248 DEBUG c.c.m.A.findDetailById - ==> Parameters: 78(String)
2019-03-03 14:43:30.269 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms, htmlContent, content
2019-03-03 14:43:30.269 DEBUG c.c.m.A.findDetailById - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 5, null, 0, 1, 后端技术, <h2 id="h2-fastdfs"><a name="FastDFS" class="reference-link"></a><span class="header-link octicon octicon-link"></span>FastDFS</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。</p>
<h2 id="h2-u7B80u4ECB"><a name="简介" class="reference-link"></a><span class="header-link octicon octicon-link"></span>简介</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS服务端有两个角色：跟踪器（tracker）和存储节点（storage）。跟踪器主要做调度工作，在访问上起负载均衡的作用。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;存储节点存储文件，完成文件管理的所有功能：就是这样的存储、同步和提供存取接口，FastDFS同时对文件的metadata进行管理。所谓文件的meta data就是文件的相关属性，以键值对（key valuepair）方式表示，如：width=1024，其中的key为width，value为1024。文件metadata是文件属性列表，可以包含多个键值对。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;跟踪器和存储节点都可以由一台或多台服务器构成。跟踪器和存储节点中的服务器均可以随时增加或下线而不会影响线上服务。其中跟踪器中的所有服务器都是对等的，可以根据服务器的压力情况随时增加或减少。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了支持大容量，存储节点（服务器）采用了分卷（或分组）的组织方式。存储系统由一个或多个卷组成，卷与卷之间的文件是相互独立的，所有卷的文件容量累加就是整个存储系统中的文件容量。一个卷可以由一台或多台存储服务器组成，一个卷下的存储服务器中的文件都是相同的，卷中的多台存储服务器起到了冗余备份和负载均衡的作用。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在卷中增加服务器时，同步已有的文件由系统自动完成，同步完成后，系统自动将新增服务器切换到线上提供服务。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当存储空间不足或即将耗尽时，可以动态添加卷。只需要增加一台或多台服务器，并将它们配置为一个新的卷，这样就扩大了存储系统的容量。<br>FastDFS中的文件标识分为两个部分：卷名和文件名，二者缺一不可。<br><img src="http://www.gydblog.com:8888/group1/M00/00/00/wKgACFoAWdeAG_M4AASfYzbioyg760.png" alt=""></p>
<h2 id="h2-u4E0Au4F20u6587u4EF6u4EA4u4E92u8FC7u7A0B"><a name="上传文件交互过程" class="reference-link"></a><span class="header-link octicon octicon-link"></span>上传文件交互过程</h2><ol>
<li>client询问tracker上传到的storage，不需要附加参数；</li><li>tracker返回一台可用的storage；</li><li>client直接和storage通讯完成文件上传。<br>FastDFS file download</li></ol>
<h2 id="h2-u4E0Bu8F7Du4EA4u4E92u8FC7u7A0B"><a name="下载交互过程" class="reference-link"></a><span class="header-link octicon octicon-link"></span>下载交互过程</h2><ol>
<li>client询问tracker下载文件的storage，参数为文件标识（卷名和文件名）；</li><li>tracker返回一台可用的storage；</li><li>client直接和storage通讯完成文件下载。<br>需要说明的是，client为使用FastDFS服务的调用方，client也应该是一台服务器，它对tracker和storage的调用均为服务器间的调用。</li></ol>
, ## FastDFS
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。

## 简介
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS服务端有两个角色：跟踪器（tracker）和存储节点（storage）。跟踪器主要做调度工作，在访问上起负载均衡的作用。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;存储节点存储文件，完成文件管理的所有功能：就是这样的存储、同步和提供存取接口，FastDFS同时对文件的metadata进行管理。所谓文件的meta data就是文件的相关属性，以键值对（key valuepair）方式表示，如：width=1024，其中的key为width，value为1024。文件metadata是文件属性列表，可以包含多个键值对。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;跟踪器和存储节点都可以由一台或多台服务器构成。跟踪器和存储节点中的服务器均可以随时增加或下线而不会影响线上服务。其中跟踪器中的所有服务器都是对等的，可以根据服务器的压力情况随时增加或减少。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了支持大容量，存储节点（服务器）采用了分卷（或分组）的组织方式。存储系统由一个或多个卷组成，卷与卷之间的文件是相互独立的，所有卷的文件容量累加就是整个存储系统中的文件容量。一个卷可以由一台或多台存储服务器组成，一个卷下的存储服务器中的文件都是相同的，卷中的多台存储服务器起到了冗余备份和负载均衡的作用。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在卷中增加服务器时，同步已有的文件由系统自动完成，同步完成后，系统自动将新增服务器切换到线上提供服务。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当存储空间不足或即将耗尽时，可以动态添加卷。只需要增加一台或多台服务器，并将它们配置为一个新的卷，这样就扩大了存储系统的容量。
FastDFS中的文件标识分为两个部分：卷名和文件名，二者缺一不可。
![](http://www.gydblog.com:8888/group1/M00/00/00/wKgACFoAWdeAG_M4AASfYzbioyg760.png)

## 上传文件交互过程
1. client询问tracker上传到的storage，不需要附加参数；
2. tracker返回一台可用的storage；
3. client直接和storage通讯完成文件上传。
FastDFS file download

##下载交互过程
1. client询问tracker下载文件的storage，参数为文件标识（卷名和文件名）；
2. tracker返回一台可用的storage；
3. client直接和storage通讯完成文件下载。
需要说明的是，client为使用FastDFS服务的调用方，client也应该是一台服务器，它对tracker和storage的调用均为服务器间的调用。

2019-03-03 14:43:30.270 DEBUG c.c.m.A.queryRelation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@58496b09]
2019-03-03 14:43:30.270 DEBUG c.c.m.A.queryRelation - ==>  Preparing: SELECT A.id,A.articleId,B.id keyWordId,B.name keyName,A.updatetime FROM mine_article_keyword_relation A INNER JOIN mine_keywords B ON A.keyId = B.id WHERE A.articleId=? 
2019-03-03 14:43:30.271 DEBUG c.c.m.A.queryRelation - ==> Parameters: 78(Integer)
2019-03-03 14:43:30.281 DEBUG c.c.m.A.queryRelation - <==    Columns: id, articleId, id, name, updatetime
2019-03-03 14:43:30.281 DEBUG c.c.m.A.queryRelation - <==        Row: 19, 78, 8, 分布式文件系统, 2017-11-06 20:51:27.0
2019-03-03 14:43:55.907 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["78"]}
2019-03-03 14:43:55.934 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@58496b09]
2019-03-03 14:43:55.935 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-03-03 14:43:55.937 DEBUG c.c.m.A.findDetailById - ==> Parameters: 78(String)
2019-03-03 14:43:55.976 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms, htmlContent, content
2019-03-03 14:43:55.977 DEBUG c.c.m.A.findDetailById - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 5, null, 0, 1, 后端技术, <h2 id="h2-fastdfs"><a name="FastDFS" class="reference-link"></a><span class="header-link octicon octicon-link"></span>FastDFS</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。</p>
<h2 id="h2-u7B80u4ECB"><a name="简介" class="reference-link"></a><span class="header-link octicon octicon-link"></span>简介</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS服务端有两个角色：跟踪器（tracker）和存储节点（storage）。跟踪器主要做调度工作，在访问上起负载均衡的作用。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;存储节点存储文件，完成文件管理的所有功能：就是这样的存储、同步和提供存取接口，FastDFS同时对文件的metadata进行管理。所谓文件的meta data就是文件的相关属性，以键值对（key valuepair）方式表示，如：width=1024，其中的key为width，value为1024。文件metadata是文件属性列表，可以包含多个键值对。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;跟踪器和存储节点都可以由一台或多台服务器构成。跟踪器和存储节点中的服务器均可以随时增加或下线而不会影响线上服务。其中跟踪器中的所有服务器都是对等的，可以根据服务器的压力情况随时增加或减少。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了支持大容量，存储节点（服务器）采用了分卷（或分组）的组织方式。存储系统由一个或多个卷组成，卷与卷之间的文件是相互独立的，所有卷的文件容量累加就是整个存储系统中的文件容量。一个卷可以由一台或多台存储服务器组成，一个卷下的存储服务器中的文件都是相同的，卷中的多台存储服务器起到了冗余备份和负载均衡的作用。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在卷中增加服务器时，同步已有的文件由系统自动完成，同步完成后，系统自动将新增服务器切换到线上提供服务。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当存储空间不足或即将耗尽时，可以动态添加卷。只需要增加一台或多台服务器，并将它们配置为一个新的卷，这样就扩大了存储系统的容量。<br>FastDFS中的文件标识分为两个部分：卷名和文件名，二者缺一不可。<br><img src="http://www.gydblog.com:8888/group1/M00/00/00/wKgACFoAWdeAG_M4AASfYzbioyg760.png" alt=""></p>
<h2 id="h2-u4E0Au4F20u6587u4EF6u4EA4u4E92u8FC7u7A0B"><a name="上传文件交互过程" class="reference-link"></a><span class="header-link octicon octicon-link"></span>上传文件交互过程</h2><ol>
<li>client询问tracker上传到的storage，不需要附加参数；</li><li>tracker返回一台可用的storage；</li><li>client直接和storage通讯完成文件上传。<br>FastDFS file download</li></ol>
<h2 id="h2-u4E0Bu8F7Du4EA4u4E92u8FC7u7A0B"><a name="下载交互过程" class="reference-link"></a><span class="header-link octicon octicon-link"></span>下载交互过程</h2><ol>
<li>client询问tracker下载文件的storage，参数为文件标识（卷名和文件名）；</li><li>tracker返回一台可用的storage；</li><li>client直接和storage通讯完成文件下载。<br>需要说明的是，client为使用FastDFS服务的调用方，client也应该是一台服务器，它对tracker和storage的调用均为服务器间的调用。</li></ol>
, ## FastDFS
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。

## 简介
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS服务端有两个角色：跟踪器（tracker）和存储节点（storage）。跟踪器主要做调度工作，在访问上起负载均衡的作用。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;存储节点存储文件，完成文件管理的所有功能：就是这样的存储、同步和提供存取接口，FastDFS同时对文件的metadata进行管理。所谓文件的meta data就是文件的相关属性，以键值对（key valuepair）方式表示，如：width=1024，其中的key为width，value为1024。文件metadata是文件属性列表，可以包含多个键值对。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;跟踪器和存储节点都可以由一台或多台服务器构成。跟踪器和存储节点中的服务器均可以随时增加或下线而不会影响线上服务。其中跟踪器中的所有服务器都是对等的，可以根据服务器的压力情况随时增加或减少。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了支持大容量，存储节点（服务器）采用了分卷（或分组）的组织方式。存储系统由一个或多个卷组成，卷与卷之间的文件是相互独立的，所有卷的文件容量累加就是整个存储系统中的文件容量。一个卷可以由一台或多台存储服务器组成，一个卷下的存储服务器中的文件都是相同的，卷中的多台存储服务器起到了冗余备份和负载均衡的作用。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在卷中增加服务器时，同步已有的文件由系统自动完成，同步完成后，系统自动将新增服务器切换到线上提供服务。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当存储空间不足或即将耗尽时，可以动态添加卷。只需要增加一台或多台服务器，并将它们配置为一个新的卷，这样就扩大了存储系统的容量。
FastDFS中的文件标识分为两个部分：卷名和文件名，二者缺一不可。
![](http://www.gydblog.com:8888/group1/M00/00/00/wKgACFoAWdeAG_M4AASfYzbioyg760.png)

## 上传文件交互过程
1. client询问tracker上传到的storage，不需要附加参数；
2. tracker返回一台可用的storage；
3. client直接和storage通讯完成文件上传。
FastDFS file download

##下载交互过程
1. client询问tracker下载文件的storage，参数为文件标识（卷名和文件名）；
2. tracker返回一台可用的storage；
3. client直接和storage通讯完成文件下载。
需要说明的是，client为使用FastDFS服务的调用方，client也应该是一台服务器，它对tracker和storage的调用均为服务器间的调用。

2019-03-03 14:43:55.978 DEBUG c.c.m.A.queryRelation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@58496b09]
2019-03-03 14:43:55.978 DEBUG c.c.m.A.queryRelation - ==>  Preparing: SELECT A.id,A.articleId,B.id keyWordId,B.name keyName,A.updatetime FROM mine_article_keyword_relation A INNER JOIN mine_keywords B ON A.keyId = B.id WHERE A.articleId=? 
2019-03-03 14:43:55.978 DEBUG c.c.m.A.queryRelation - ==> Parameters: 78(Integer)
2019-03-03 14:43:55.988 DEBUG c.c.m.A.queryRelation - <==    Columns: id, articleId, id, name, updatetime
2019-03-03 14:43:55.988 DEBUG c.c.m.A.queryRelation - <==        Row: 19, 78, 8, 分布式文件系统, 2017-11-06 20:51:27.0
2019-03-03 14:43:56.094 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 14:43:56.113 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@58496b09]
2019-03-03 14:43:56.113 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 14:43:56.114 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 14:43:56.131 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 14:43:56.131 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 14:43:56.131 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 14:43:56.132 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 14:43:56.132 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 14:43:56.133 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 14:43:56.133 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 14:43:56.155 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 14:43:56.171 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@58496b09]
2019-03-03 14:43:56.172 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 14:43:56.172 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 14:43:56.202 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 14:43:56.203 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 0, 2, 网站前端
2019-03-03 14:43:56.205 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 0, 2, 网站前端
2019-03-03 14:43:56.207 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 0, 2, 网站前端
2019-03-03 14:43:56.209 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 0, 2, 网站前端
2019-03-03 14:43:56.210 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 0, 1, 后端技术
2019-03-03 14:43:56.240 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 14:43:56.242 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 14:43:56.243 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 14:43:56.252 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@58496b09]
2019-03-03 14:43:56.252 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 14:43:56.253 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 14:43:56.255 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@72d48242]
2019-03-03 14:43:56.255 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 14:43:56.256 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 14:43:56.257 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2da58200]
2019-03-03 14:43:56.258 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 14:43:56.259 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 14:43:56.264 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 14:43:56.265 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 14:43:56.266 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 14:43:56.266 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 14:43:56.266 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 14:43:56.267 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 14:43:56.267 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 14:43:56.268 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 14:43:56.269 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 14:43:56.270 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 14:43:56.270 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 14:43:56.271 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 14:43:56.272 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 14:43:56.272 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 14:43:56.273 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 14:43:56.273 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2da58200]
2019-03-03 14:43:56.274 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 14:43:56.274 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 14:43:56.274 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 14:43:56.275 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 14:43:56.276 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 14:43:56.284 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 14:43:56.286 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 14:46:44.714 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 14:46:44.737 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2da58200]
2019-03-03 14:46:44.738 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 14:46:44.740 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 14:46:44.764 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 14:46:44.764 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 14:46:44.765 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 14:46:44.765 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 14:46:44.765 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 14:46:44.766 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 14:46:44.766 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 14:46:44.793 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 14:46:44.813 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2da58200]
2019-03-03 14:46:44.814 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 14:46:44.814 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 14:46:44.843 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 14:46:44.844 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 0, 2, 网站前端
2019-03-03 14:46:44.844 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 0, 2, 网站前端
2019-03-03 14:46:44.844 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 0, 2, 网站前端
2019-03-03 14:46:44.845 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 0, 2, 网站前端
2019-03-03 14:46:44.845 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 0, 1, 后端技术
2019-03-03 14:46:44.866 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 14:46:44.877 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 14:46:44.877 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 14:46:44.878 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 14:46:44.880 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_LATEST_ARTICLE","params":[10]}
2019-03-03 14:46:44.881 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2da58200]
2019-03-03 14:46:44.882 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 14:46:44.882 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 14:46:44.894 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 14:46:44.894 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dd70e43]
2019-03-03 14:46:44.894 DEBUG c.c.m.A.findLatestArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@27e5f95f]
2019-03-03 14:46:44.894 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 14:46:44.895 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 14:46:44.895 DEBUG c.c.m.A.findLatestArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC LIMIT ? 
2019-03-03 14:46:44.895 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 14:46:44.895 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 14:46:44.896 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 14:46:44.896 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@72d48242]
2019-03-03 14:46:44.896 DEBUG c.c.m.A.findLatestArticle - ==> Parameters: 10(Integer)
2019-03-03 14:46:44.897 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 14:46:44.897 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 14:46:44.897 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 14:46:44.897 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 14:46:44.898 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 14:46:44.899 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@58496b09]
2019-03-03 14:46:44.899 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 14:46:44.899 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 14:46:44.905 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 14:46:44.906 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 14:46:44.906 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dd70e43]
2019-03-03 14:46:44.907 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 14:46:44.909 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 14:46:44.922 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 14:46:44.923 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 14:46:44.925 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 14:46:44.926 DEBUG c.c.m.A.findLatestArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 14:46:44.926 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 14:46:44.927 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 14:46:44.927 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 14:46:44.927 DEBUG c.c.m.A.findLatestArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 0, 2, 网站前端
2019-03-03 14:46:44.927 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 14:46:44.927 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 14:46:44.927 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 14:46:44.928 DEBUG c.c.m.A.findLatestArticle - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 0, 2, 网站前端
2019-03-03 14:46:44.928 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 14:46:44.928 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 14:46:44.929 DEBUG c.c.m.A.findLatestArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 0, 2, 网站前端
2019-03-03 14:46:44.929 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 14:46:44.929 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 14:46:44.929 DEBUG c.c.m.A.findLatestArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 0, 2, 网站前端
2019-03-03 14:46:44.930 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 14:46:44.930 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 14:46:44.930 DEBUG c.c.m.A.findLatestArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 5, null, 0, 1, 后端技术
2019-03-03 14:46:44.931 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 14:46:44.931 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 14:46:44.931 DEBUG c.c.m.A.findLatestArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 0, 4, 数据库
2019-03-03 14:46:44.932 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 14:46:44.932 DEBUG c.c.m.A.findLatestArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 0, 1, 后端技术
2019-03-03 14:46:44.960 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 14:46:44.976 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@58496b09]
2019-03-03 14:46:44.977 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 14:46:44.977 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 14:46:44.988 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 14:46:44.988 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 14:46:44.989 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 14:46:44.989 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 14:46:44.989 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 14:46:44.991 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 14:46:44.993 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 14:46:45.005 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null,null]}
2019-03-03 14:46:45.021 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@58496b09]
2019-03-03 14:46:45.021 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-03-03 14:46:45.022 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-03-03 14:46:45.045 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 14:46:45.046 DEBUG c.c.m.A.findArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 0, 2, 网站前端
2019-03-03 14:46:45.046 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 0, 2, 网站前端
2019-03-03 14:46:45.047 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 0, 2, 网站前端
2019-03-03 14:46:45.047 DEBUG c.c.m.A.findArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 0, 2, 网站前端
2019-03-03 14:46:45.047 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 5, null, 0, 1, 后端技术
2019-03-03 14:46:45.048 DEBUG c.c.m.A.findArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 0, 4, 数据库
2019-03-03 14:46:45.048 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 0, 1, 后端技术
2019-03-03 14:46:45.897 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["35"]}
2019-03-03 14:46:45.915 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@58496b09]
2019-03-03 14:46:45.916 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-03-03 14:46:45.916 DEBUG c.c.m.A.findDetailById - ==> Parameters: 35(String)
2019-03-03 14:46:45.935 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms, htmlContent, content
2019-03-03 14:46:45.935 DEBUG c.c.m.A.findDetailById - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 0, 2, 网站前端, , #### 前言
    一直以来都想开发出一个属于自己的博客网站，可惜总会因为各种原因没有去动手实现，可能是因为懒吧。如今断断续续地终于开发出了博客的V1.0版本，界面比较简陋。后续我会再花零散的时间对本博客进行不断改造升级，并在此博文中记录每个版本更新的功能点。

#### 开发技术
	本博客网站采用前端和后端完全分离、后端按业务点进行模块分离的思想进行开发.
	前端技术：html+css+javascript+jquery+bootstrap+markdown.
	后端技术：springboot+mybatis+redis+druid.

#### V1.0
	完成前后端基础核心架构搭建开发.
	完成文章列表分页展示、最新文章、随机文章、随笔展示功能点开发.

2019-03-03 14:46:45.936 DEBUG c.c.m.A.queryRelation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@58496b09]
2019-03-03 14:46:45.936 DEBUG c.c.m.A.queryRelation - ==>  Preparing: SELECT A.id,A.articleId,B.id keyWordId,B.name keyName,A.updatetime FROM mine_article_keyword_relation A INNER JOIN mine_keywords B ON A.keyId = B.id WHERE A.articleId=? 
2019-03-03 14:46:45.937 DEBUG c.c.m.A.queryRelation - ==> Parameters: 35(Integer)
2019-03-03 14:46:46.015 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 14:46:46.029 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@58496b09]
2019-03-03 14:46:46.029 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 14:46:46.029 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 14:46:46.047 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 14:46:46.048 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 14:46:46.049 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 14:46:46.049 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 14:46:46.050 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 14:46:46.051 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 14:46:46.051 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 14:46:46.075 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 14:46:46.095 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@58496b09]
2019-03-03 14:46:46.095 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 14:46:46.096 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 14:46:46.131 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 14:46:46.132 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 0, 2, 网站前端
2019-03-03 14:46:46.132 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 0, 2, 网站前端
2019-03-03 14:46:46.132 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 0, 2, 网站前端
2019-03-03 14:46:46.133 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 0, 2, 网站前端
2019-03-03 14:46:46.133 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 0, 1, 后端技术
2019-03-03 14:46:46.152 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 14:46:46.154 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 14:46:46.155 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 14:46:46.163 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@27e5f95f]
2019-03-03 14:46:46.163 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 14:46:46.164 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 14:46:46.170 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@58496b09]
2019-03-03 14:46:46.170 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@72d48242]
2019-03-03 14:46:46.171 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 14:46:46.172 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 14:46:46.172 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 14:46:46.173 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 14:46:46.174 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 14:46:46.174 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 14:46:46.175 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 14:46:46.176 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 14:46:46.176 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 14:46:46.177 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 14:46:46.178 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 14:46:46.178 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 14:46:46.179 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 14:46:46.182 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 14:46:46.183 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 14:46:46.183 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 14:46:46.184 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 14:46:46.184 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 14:46:46.184 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 14:46:46.185 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@72d48242]
2019-03-03 14:46:46.185 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 14:46:46.186 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 14:46:46.186 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 14:46:46.186 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 14:46:46.187 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 14:46:46.196 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 14:46:46.197 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 14:46:54.301 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 14:46:54.312 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@72d48242]
2019-03-03 14:46:54.312 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 14:46:54.313 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 14:46:54.327 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 14:46:54.327 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 14:46:54.328 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 14:46:54.328 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 14:46:54.328 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 14:46:54.328 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 14:46:54.329 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 14:46:54.351 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 14:46:54.368 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@72d48242]
2019-03-03 14:46:54.369 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 14:46:54.369 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 14:46:54.394 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 14:46:54.395 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 0, 2, 网站前端
2019-03-03 14:46:54.395 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 0, 2, 网站前端
2019-03-03 14:46:54.395 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 0, 2, 网站前端
2019-03-03 14:46:54.396 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 0, 2, 网站前端
2019-03-03 14:46:54.396 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 0, 1, 后端技术
2019-03-03 14:46:54.422 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 14:46:54.427 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 14:46:54.430 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_LATEST_ARTICLE","params":[10]}
2019-03-03 14:46:54.430 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 14:46:54.431 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 14:46:54.441 DEBUG c.c.m.A.findLatestArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dd70e43]
2019-03-03 14:46:54.441 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@72d48242]
2019-03-03 14:46:54.441 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@58496b09]
2019-03-03 14:46:54.441 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@27e5f95f]
2019-03-03 14:46:54.442 DEBUG c.c.m.A.findLatestArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC LIMIT ? 
2019-03-03 14:46:54.442 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 14:46:54.443 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 14:46:54.443 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 14:46:54.444 DEBUG c.c.m.A.findLatestArticle - ==> Parameters: 10(Integer)
2019-03-03 14:46:54.444 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 14:46:54.444 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 14:46:54.444 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 14:46:54.445 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2da58200]
2019-03-03 14:46:54.446 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 14:46:54.446 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 14:46:54.452 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 14:46:54.453 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 14:46:54.453 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 14:46:54.453 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 14:46:54.454 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 14:46:54.454 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 14:46:54.454 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 14:46:54.454 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 14:46:54.455 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 14:46:54.457 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 14:46:54.459 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 14:46:54.460 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 14:46:54.460 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 14:46:54.460 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 14:46:54.461 DEBUG c.c.m.A.findLatestArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 14:46:54.461 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 14:46:54.461 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 14:46:54.462 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 14:46:54.462 DEBUG c.c.m.A.findLatestArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 0, 2, 网站前端
2019-03-03 14:46:54.463 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 14:46:54.463 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@58496b09]
2019-03-03 14:46:54.463 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 14:46:54.463 DEBUG c.c.m.A.findLatestArticle - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 0, 2, 网站前端
2019-03-03 14:46:54.464 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 14:46:54.464 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 14:46:54.465 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 14:46:54.465 DEBUG c.c.m.A.findLatestArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 0, 2, 网站前端
2019-03-03 14:46:54.466 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 14:46:54.466 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 14:46:54.466 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 14:46:54.466 DEBUG c.c.m.A.findLatestArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 0, 2, 网站前端
2019-03-03 14:46:54.467 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 14:46:54.468 DEBUG c.c.m.A.findLatestArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 5, null, 0, 1, 后端技术
2019-03-03 14:46:54.468 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 14:46:54.468 DEBUG c.c.m.A.findLatestArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 0, 4, 数据库
2019-03-03 14:46:54.469 DEBUG c.c.m.A.findLatestArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 0, 1, 后端技术
2019-03-03 14:46:54.476 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 14:46:54.476 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 14:46:54.496 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 14:46:54.514 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@58496b09]
2019-03-03 14:46:54.514 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 14:46:54.514 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 14:46:54.530 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 14:46:54.530 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 14:46:54.531 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 14:46:54.531 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 14:46:54.531 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 14:46:54.531 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 14:46:54.532 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 14:46:54.547 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null,null]}
2019-03-03 14:46:54.564 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@58496b09]
2019-03-03 14:46:54.564 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-03-03 14:46:54.564 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-03-03 14:46:54.590 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 14:46:54.592 DEBUG c.c.m.A.findArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 0, 2, 网站前端
2019-03-03 14:46:54.593 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 0, 2, 网站前端
2019-03-03 14:46:54.593 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 0, 2, 网站前端
2019-03-03 14:46:54.593 DEBUG c.c.m.A.findArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 0, 2, 网站前端
2019-03-03 14:46:54.594 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 5, null, 0, 1, 后端技术
2019-03-03 14:46:54.594 DEBUG c.c.m.A.findArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 0, 4, 数据库
2019-03-03 14:46:54.594 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 0, 1, 后端技术
2019-03-03 14:46:55.222 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["35"]}
2019-03-03 14:46:55.252 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@58496b09]
2019-03-03 14:46:55.253 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-03-03 14:46:55.253 DEBUG c.c.m.A.findDetailById - ==> Parameters: 35(String)
2019-03-03 14:46:55.273 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms, htmlContent, content
2019-03-03 14:46:55.273 DEBUG c.c.m.A.findDetailById - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 0, 2, 网站前端, , #### 前言
    一直以来都想开发出一个属于自己的博客网站，可惜总会因为各种原因没有去动手实现，可能是因为懒吧。如今断断续续地终于开发出了博客的V1.0版本，界面比较简陋。后续我会再花零散的时间对本博客进行不断改造升级，并在此博文中记录每个版本更新的功能点。

#### 开发技术
	本博客网站采用前端和后端完全分离、后端按业务点进行模块分离的思想进行开发.
	前端技术：html+css+javascript+jquery+bootstrap+markdown.
	后端技术：springboot+mybatis+redis+druid.

#### V1.0
	完成前后端基础核心架构搭建开发.
	完成文章列表分页展示、最新文章、随机文章、随笔展示功能点开发.

2019-03-03 14:46:55.274 DEBUG c.c.m.A.queryRelation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@58496b09]
2019-03-03 14:46:55.274 DEBUG c.c.m.A.queryRelation - ==>  Preparing: SELECT A.id,A.articleId,B.id keyWordId,B.name keyName,A.updatetime FROM mine_article_keyword_relation A INNER JOIN mine_keywords B ON A.keyId = B.id WHERE A.articleId=? 
2019-03-03 14:46:55.274 DEBUG c.c.m.A.queryRelation - ==> Parameters: 35(Integer)
2019-03-03 14:46:55.336 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 14:46:55.358 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@58496b09]
2019-03-03 14:46:55.359 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 14:46:55.359 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 14:46:55.368 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 14:46:55.369 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 14:46:55.369 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 14:46:55.370 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 14:46:55.370 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 14:46:55.370 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 14:46:55.370 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 14:46:55.391 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 14:46:55.410 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@58496b09]
2019-03-03 14:46:55.410 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 14:46:55.411 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 14:46:55.430 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 14:46:55.430 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 0, 2, 网站前端
2019-03-03 14:46:55.431 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 0, 2, 网站前端
2019-03-03 14:46:55.431 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 0, 2, 网站前端
2019-03-03 14:46:55.431 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 0, 2, 网站前端
2019-03-03 14:46:55.431 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 0, 1, 后端技术
2019-03-03 14:46:55.454 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 14:46:55.455 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 14:46:55.462 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 14:46:55.475 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@72d48242]
2019-03-03 14:46:55.475 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@58496b09]
2019-03-03 14:46:55.475 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dd70e43]
2019-03-03 14:46:55.476 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 14:46:55.476 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 14:46:55.477 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 14:46:55.477 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 14:46:55.477 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 14:46:55.478 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 14:46:55.486 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 14:46:55.487 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 14:46:55.487 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 14:46:55.488 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 14:46:55.488 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 14:46:55.488 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 14:46:55.489 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 14:46:55.490 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 14:46:55.491 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@72d48242]
2019-03-03 14:46:55.492 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 14:46:55.492 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 14:46:55.492 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 14:46:55.493 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 14:46:55.493 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 14:46:55.493 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 14:46:55.495 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 14:46:55.495 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 14:46:55.496 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 14:46:55.496 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 14:46:55.497 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 14:46:55.497 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 14:46:55.505 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 14:46:55.505 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 16:13:20.563 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["36"]}
2019-03-03 16:13:20.894 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@6f9930b8]
2019-03-03 16:13:20.895 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-03-03 16:13:20.897 DEBUG c.c.m.A.findDetailById - ==> Parameters: 36(String)
2019-03-03 16:13:20.938 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms, htmlContent, content
2019-03-03 16:13:20.938 DEBUG c.c.m.A.findDetailById - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 0, 2, 网站前端, <h2 id="h2-u524Du8A00"><a name="前言" class="reference-link"></a><span class="header-link octicon octicon-link"></span>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过”服务器主机IP:应用端口”的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名-&gt;备案-&gt;做IP解析、端口转发的过程。</p>
<h6 id="h6--"><a name="一、申请域名以及实名认证" class="reference-link"></a><span class="header-link octicon octicon-link"></span>一、申请域名以及实名认证</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳<a href="https://cloud.baidu.com/product/bcd/search.html" title="域名申请地址">域名申请地址</a>。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。</p>
<h6 id="h6--"><a name="二、工信部备案" class="reference-link"></a><span class="header-link octicon octicon-link"></span>二、工信部备案</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳<a href="http://beian.bce.baidu.com/" title="百度云备案系统">百度云备案系统</a>，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。</p>
<h6 id="h6--"><a name="三、域名解析、端口转发" class="reference-link"></a><span class="header-link octicon octicon-link"></span>三、域名解析、端口转发</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。</p>
<h6 id="h6--"><a name="四、通过域名进行网站访问" class="reference-link"></a><span class="header-link octicon octicon-link"></span>四、通过域名进行网站访问</h6><p>完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。</p>
, ## 前言
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过"服务器主机IP:应用端口"的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名->备案->做IP解析、端口转发的过程。

###### 一、申请域名以及实名认证
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳[域名申请地址](https://cloud.baidu.com/product/bcd/search.html "域名申请地址")。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。

###### 二、工信部备案
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳[百度云备案系统](http://beian.bce.baidu.com/ "百度云备案系统")，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。

###### 三、域名解析、端口转发
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。

###### 四、通过域名进行网站访问
完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。



2019-03-03 16:13:20.941 DEBUG c.c.m.A.queryRelation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@6f9930b8]
2019-03-03 16:13:20.942 DEBUG c.c.m.A.queryRelation - ==>  Preparing: SELECT A.id,A.articleId,B.id keyWordId,B.name keyName,A.updatetime FROM mine_article_keyword_relation A INNER JOIN mine_keywords B ON A.keyId = B.id WHERE A.articleId=? 
2019-03-03 16:13:20.944 DEBUG c.c.m.A.queryRelation - ==> Parameters: 36(Integer)
2019-03-03 16:13:21.115 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:13:21.141 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@6f9930b8]
2019-03-03 16:13:21.143 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:13:21.143 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:13:21.165 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:13:21.166 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:13:21.167 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:13:21.167 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:13:21.168 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:13:21.168 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:13:21.168 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:13:21.214 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 16:13:21.235 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@6f9930b8]
2019-03-03 16:13:21.235 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 16:13:21.235 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 16:13:21.259 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 16:13:21.260 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 0, 2, 网站前端
2019-03-03 16:13:21.260 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 0, 2, 网站前端
2019-03-03 16:13:21.261 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 0, 2, 网站前端
2019-03-03 16:13:21.261 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 0, 2, 网站前端
2019-03-03 16:13:21.261 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 0, 1, 后端技术
2019-03-03 16:13:21.289 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:13:21.296 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 16:13:21.297 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 16:13:21.310 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@6f9930b8]
2019-03-03 16:13:21.311 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:13:21.311 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:13:21.330 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:13:21.330 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:13:21.331 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:13:21.332 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:13:21.332 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:13:21.333 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:13:21.333 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:13:21.363 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@6f9930b8]
2019-03-03 16:13:21.363 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 16:13:21.364 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 16:13:21.383 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@27a8106b]
2019-03-03 16:13:21.383 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 16:13:21.384 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 16:13:21.384 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 16:13:21.384 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 16:13:21.385 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 16:13:21.386 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 16:13:21.386 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 16:13:21.386 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 16:13:21.386 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 16:13:21.387 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 16:13:21.387 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 16:13:21.395 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 16:13:21.395 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 16:13:21.396 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@27a8106b]
2019-03-03 16:13:21.396 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 16:13:21.397 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 16:13:21.403 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 16:13:21.403 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 16:13:43.938 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["36"]}
2019-03-03 16:13:43.948 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@27a8106b]
2019-03-03 16:13:43.949 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-03-03 16:13:43.949 DEBUG c.c.m.A.findDetailById - ==> Parameters: 36(String)
2019-03-03 16:13:43.964 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms, htmlContent, content
2019-03-03 16:13:43.965 DEBUG c.c.m.A.findDetailById - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端, <h2 id="h2-u524Du8A00"><a name="前言" class="reference-link"></a><span class="header-link octicon octicon-link"></span>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过”服务器主机IP:应用端口”的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名-&gt;备案-&gt;做IP解析、端口转发的过程。</p>
<h6 id="h6--"><a name="一、申请域名以及实名认证" class="reference-link"></a><span class="header-link octicon octicon-link"></span>一、申请域名以及实名认证</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳<a href="https://cloud.baidu.com/product/bcd/search.html" title="域名申请地址">域名申请地址</a>。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。</p>
<h6 id="h6--"><a name="二、工信部备案" class="reference-link"></a><span class="header-link octicon octicon-link"></span>二、工信部备案</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳<a href="http://beian.bce.baidu.com/" title="百度云备案系统">百度云备案系统</a>，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。</p>
<h6 id="h6--"><a name="三、域名解析、端口转发" class="reference-link"></a><span class="header-link octicon octicon-link"></span>三、域名解析、端口转发</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。</p>
<h6 id="h6--"><a name="四、通过域名进行网站访问" class="reference-link"></a><span class="header-link octicon octicon-link"></span>四、通过域名进行网站访问</h6><p>完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。</p>
, ## 前言
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过"服务器主机IP:应用端口"的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名->备案->做IP解析、端口转发的过程。

###### 一、申请域名以及实名认证
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳[域名申请地址](https://cloud.baidu.com/product/bcd/search.html "域名申请地址")。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。

###### 二、工信部备案
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳[百度云备案系统](http://beian.bce.baidu.com/ "百度云备案系统")，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。

###### 三、域名解析、端口转发
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。

###### 四、通过域名进行网站访问
完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。



2019-03-03 16:13:43.966 DEBUG c.c.m.A.queryRelation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@27a8106b]
2019-03-03 16:13:43.966 DEBUG c.c.m.A.queryRelation - ==>  Preparing: SELECT A.id,A.articleId,B.id keyWordId,B.name keyName,A.updatetime FROM mine_article_keyword_relation A INNER JOIN mine_keywords B ON A.keyId = B.id WHERE A.articleId=? 
2019-03-03 16:13:43.967 DEBUG c.c.m.A.queryRelation - ==> Parameters: 36(Integer)
2019-03-03 16:13:44.048 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:13:44.062 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@27a8106b]
2019-03-03 16:13:44.062 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:13:44.063 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:13:44.076 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:13:44.076 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:13:44.077 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:13:44.077 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:13:44.078 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:13:44.078 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:13:44.078 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:13:44.100 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 16:13:44.113 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@27a8106b]
2019-03-03 16:13:44.114 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 16:13:44.114 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 16:13:44.139 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 16:13:44.139 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 16:13:44.140 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 16:13:44.140 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 16:13:44.141 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 16:13:44.141 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 16:13:44.168 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:13:44.171 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 16:13:44.172 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 16:13:44.184 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@27a8106b]
2019-03-03 16:13:44.184 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:13:44.184 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:13:44.190 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@6f9930b8]
2019-03-03 16:13:44.191 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 16:13:44.192 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 16:13:44.194 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:13:44.195 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:13:44.196 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:13:44.197 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:13:44.198 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:13:44.199 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:13:44.200 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:13:44.213 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 16:13:44.214 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 16:13:44.215 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@6f9930b8]
2019-03-03 16:13:44.216 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 16:13:44.217 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 16:13:44.219 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@27a8106b]
2019-03-03 16:13:44.220 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 16:13:44.221 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 16:13:44.231 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 16:13:44.231 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 16:13:44.232 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 16:13:44.232 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 16:13:44.233 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 16:13:44.233 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 16:13:44.234 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 16:13:44.234 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 16:13:44.235 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 16:13:44.235 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 16:13:44.236 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 16:13:47.678 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:13:47.691 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@226f0b3a]
2019-03-03 16:13:47.692 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:13:47.694 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:13:47.711 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:13:47.712 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:13:47.712 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:13:47.713 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:13:47.713 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:13:47.714 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:13:47.714 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:13:47.740 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 16:13:47.751 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@226f0b3a]
2019-03-03 16:13:47.752 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 16:13:47.752 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 16:13:47.773 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 16:13:47.774 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 16:13:47.774 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 16:13:47.775 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 16:13:47.776 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 16:13:47.776 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 16:13:47.799 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:13:47.802 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 16:13:47.804 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 16:13:47.808 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_LATEST_ARTICLE","params":[10]}
2019-03-03 16:13:47.808 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:13:47.813 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@27a8106b]
2019-03-03 16:13:47.813 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 16:13:47.813 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 16:13:47.814 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@226f0b3a]
2019-03-03 16:13:47.814 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:13:47.814 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:13:47.820 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 16:13:47.820 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 16:13:47.821 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 16:13:47.821 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 16:13:47.821 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 16:13:47.821 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 16:13:47.822 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 16:13:47.822 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 16:13:47.822 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 16:13:47.824 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@6f9930b8]
2019-03-03 16:13:47.824 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 16:13:47.825 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 16:13:47.829 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:13:47.830 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:13:47.830 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:13:47.831 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:13:47.831 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:13:47.832 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:13:47.832 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:13:47.845 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 16:13:47.845 DEBUG c.c.m.A.findLatestArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@27a8106b]
2019-03-03 16:13:47.845 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 16:13:47.846 DEBUG c.c.m.A.findLatestArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC LIMIT ? 
2019-03-03 16:13:47.846 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@6f9930b8]
2019-03-03 16:13:47.847 DEBUG c.c.m.A.findLatestArticle - ==> Parameters: 10(Integer)
2019-03-03 16:13:47.847 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 16:13:47.847 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 16:13:47.854 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@226f0b3a]
2019-03-03 16:13:47.854 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:13:47.854 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:13:47.863 DEBUG c.c.m.A.findLatestArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 16:13:47.864 DEBUG c.c.m.A.findLatestArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 16:13:47.866 DEBUG c.c.m.A.findLatestArticle - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 16:13:47.867 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 16:13:47.867 DEBUG c.c.m.A.findLatestArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 16:13:47.868 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 16:13:47.868 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:13:47.869 DEBUG c.c.m.A.findLatestArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 16:13:47.870 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:13:47.870 DEBUG c.c.m.A.findLatestArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 5, null, 88, 1, 后端技术
2019-03-03 16:13:47.871 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:13:47.872 DEBUG c.c.m.A.findLatestArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 11, 4, 数据库
2019-03-03 16:13:47.872 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:13:47.873 DEBUG c.c.m.A.findLatestArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 16:13:47.874 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:13:47.875 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:13:47.877 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:13:47.908 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:13:47.921 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@226f0b3a]
2019-03-03 16:13:47.921 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:13:47.921 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:13:47.930 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:13:47.931 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:13:47.931 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:13:47.931 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:13:47.932 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:13:47.932 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:13:47.932 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:13:47.944 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null,null]}
2019-03-03 16:13:47.961 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@7e066d4e]
2019-03-03 16:13:47.961 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-03-03 16:13:47.962 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-03-03 16:13:47.984 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 16:13:47.984 DEBUG c.c.m.A.findArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 16:13:47.985 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 16:13:47.985 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 16:13:47.985 DEBUG c.c.m.A.findArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 16:13:47.985 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 5, null, 88, 1, 后端技术
2019-03-03 16:13:47.985 DEBUG c.c.m.A.findArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 11, 4, 数据库
2019-03-03 16:13:47.986 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 16:13:48.170 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:13:48.189 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@7e066d4e]
2019-03-03 16:13:48.189 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:13:48.190 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:13:48.211 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:13:48.212 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:13:48.212 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:13:48.212 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:13:48.213 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:13:48.213 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:13:48.213 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:13:48.246 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 16:13:48.267 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@7e066d4e]
2019-03-03 16:13:48.267 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 16:13:48.267 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 16:13:48.292 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 16:13:48.293 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 16:13:48.293 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 16:13:48.294 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 16:13:48.294 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 16:13:48.294 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 16:13:48.317 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:13:48.318 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 16:13:48.320 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 16:13:48.320 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_LATEST_ARTICLE","params":[10]}
2019-03-03 16:13:48.324 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:13:48.331 DEBUG c.c.m.A.findLatestArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@27a8106b]
2019-03-03 16:13:48.332 DEBUG c.c.m.A.findLatestArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC LIMIT ? 
2019-03-03 16:13:48.332 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@226f0b3a]
2019-03-03 16:13:48.332 DEBUG c.c.m.A.findLatestArticle - ==> Parameters: 10(Integer)
2019-03-03 16:13:48.332 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 16:13:48.332 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 16:13:48.337 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@7e066d4e]
2019-03-03 16:13:48.337 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:13:48.337 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:13:48.339 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@6f9930b8]
2019-03-03 16:13:48.339 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 16:13:48.339 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 16:13:48.343 DEBUG c.c.m.A.findLatestArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 16:13:48.343 DEBUG c.c.m.A.findLatestArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 16:13:48.344 DEBUG c.c.m.A.findLatestArticle - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 16:13:48.344 DEBUG c.c.m.A.findLatestArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 16:13:48.344 DEBUG c.c.m.A.findLatestArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 16:13:48.344 DEBUG c.c.m.A.findLatestArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 5, null, 88, 1, 后端技术
2019-03-03 16:13:48.344 DEBUG c.c.m.A.findLatestArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 11, 4, 数据库
2019-03-03 16:13:48.345 DEBUG c.c.m.A.findLatestArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 16:13:48.346 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 16:13:48.347 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 16:13:48.347 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@226f0b3a]
2019-03-03 16:13:48.347 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 16:13:48.348 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 16:13:48.352 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:13:48.353 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:13:48.353 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:13:48.353 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:13:48.353 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:13:48.354 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:13:48.354 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:13:48.357 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 16:13:48.358 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 16:13:48.359 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 16:13:48.360 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 16:13:48.360 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 16:13:48.361 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 16:13:48.362 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 16:13:48.362 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 16:13:48.363 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 16:13:48.364 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@27a8106b]
2019-03-03 16:13:48.364 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:13:48.365 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:13:48.366 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 16:13:48.366 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 16:13:48.372 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:13:48.373 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:13:48.373 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:13:48.373 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:13:48.373 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:13:48.374 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:13:48.374 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:13:48.395 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:13:48.406 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@27a8106b]
2019-03-03 16:13:48.406 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:13:48.406 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:13:48.416 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:13:48.416 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:13:48.417 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:13:48.417 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:13:48.418 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:13:48.418 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:13:48.418 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:13:48.430 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null,null]}
2019-03-03 16:13:48.438 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@27a8106b]
2019-03-03 16:13:48.438 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-03-03 16:13:48.439 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-03-03 16:13:48.464 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 16:13:48.464 DEBUG c.c.m.A.findArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 16:13:48.465 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 16:13:48.465 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 16:13:48.465 DEBUG c.c.m.A.findArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 16:13:48.466 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 5, null, 88, 1, 后端技术
2019-03-03 16:13:48.466 DEBUG c.c.m.A.findArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 11, 4, 数据库
2019-03-03 16:13:48.466 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 16:13:49.593 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["28"]}
2019-03-03 16:13:49.610 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@27a8106b]
2019-03-03 16:13:49.611 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-03-03 16:13:49.611 DEBUG c.c.m.A.findDetailById - ==> Parameters: 28(String)
2019-03-03 16:13:49.631 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms, htmlContent, content
2019-03-03 16:13:49.632 DEBUG c.c.m.A.findDetailById - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端, <h3 id="h3-u7ACBu6B63u5411u524Du8D70"><a name="立正向前走" class="reference-link"></a><span class="header-link octicon octicon-link"></span>立正向前走</h3><p>&nbsp;&nbsp;&nbsp;我们总有这样的茫然时刻，风霜雪雨中，我提着自己的手提箱，问自己我要往哪去?该回去还是继续向前?此时，我们知道应该赶路，却不得不停下来，因为这一刻意义太重大，一念之间决定了我们以后的路。</p>
<p>&nbsp;&nbsp;&nbsp;走到生命的哪一个阶段，都该喜欢那一段时光，完成那一阶段该完成的职责，顺生而行，不沉迷过去，不狂热地期待着未来，生命这样就好。不管正经历着怎样的挣扎与挑战，或许我们都只有一个选择：虽然痛苦，却依然要快乐，并相信未来。</p>
<p>&nbsp;&nbsp;&nbsp;世上最凄绝的距离是两个人本来距离很远，互不相识，忽然有一天，他们相识，相爱，距离变得很近。然后有一天，不再相爱了，本来很近的两个人，变得很远，甚至比以前更远。</p>
<p>&nbsp;&nbsp;&nbsp;我不习惯把自己心里的痛苦展示给别人，因为我怕别人安慰，也不想得到怜悯。相比于弱者的倾诉和哭泣，我更喜欢强者的骄傲和被仰望。心里乌云密布，面上不动声色。就算被误解，也不澄清，不解释，不在乎，把这些都当前行的力量。</p>
<p>&nbsp;&nbsp;&nbsp;为什么我们总是不懂得珍惜眼前人?在未可预知的重逢里，我们以为总会重逢，总会有缘再会，总以为有机会说一声对不起，却从没想过每一次挥手道别，都可能是诀别，每一声叹息，都可能是人间最后的一声叹息。</p>
<p>&nbsp;&nbsp;&nbsp;没有誓言的爱情才是最可靠的爱情。爱情是与誓言无关的。但有趣的是，大多女人都喜欢听男人的誓言，即便是在心里并不把男人的誓言当真，也是听着幸福无比。</p>
<p>&nbsp;&nbsp;&nbsp;如果生活是一杯水，那么痛苦就是掉落杯中的灰尘。我们可以选择让心静下来，慢慢沉淀那些痛苦。如果总是不断地去搅和，痛苦就会充满我们的生活。</p>
<p>&nbsp;&nbsp;&nbsp;年轻时，我不要你们心如止水，我要你们妖孽横行。我不要你们收敛锋芒，我要你们跋扈张扬。我不要你们平淡青春，我要你们嚣张挥霍。总之，要笑要哭，要爱要痛。因为很久很久以后，这段光芒万丈的回忆，会帮你度过很多很多，你以为不能度过的苦难时期。</p>
<p>&nbsp;&nbsp;&nbsp;你的脆弱，也是你的坚强。</p>
<p>&nbsp;&nbsp;&nbsp;爱情如此使人着迷，是不是正因为它是靠不住的?明知道它是水，是无根的，我们却用一双手和一双脚想要去拦住它。直到一天，当它翻起的波涛差点儿把我们淹没，我们才发现，即使再多出十双手和十双脚，要走的东西，终究是拦不住的。</p>
<p>&nbsp;&nbsp;&nbsp;当初你有胆量去选，同样该有勇气把后果承受。</p>
<p>&nbsp;&nbsp;&nbsp;很多时候，面对那些原本以为过不去的坎，面对那些一时无法接受的事，我们能做的只是沉默，沉默的等这一阵过去。相信这一夜的痛哭过后，还有新的早晨。活在世上遇到的悲伤是很多的，但欢乐也有。即使欢乐的日子比哭泣的日子少太多，这个世界，仍值得我们为之走一遭。</p>
<p>&nbsp;&nbsp;&nbsp;在寂静中我唯一能听到的，只剩下那些我说不出来的话。我爱你，一直很爱你，以后也是。</p>
<p>&nbsp;&nbsp;&nbsp;人们不解释的主要原因是根本不在乎对方的想法，无关重要的人，对无关重要的事有点儿误会，有什么关系。你信也好，不信也好，都于当事人生活毫无影响，何劳解释。</p>
<p>&nbsp;&nbsp;&nbsp;既然一事无成，那你还有什么好失去的，鼓起勇气面对一切难堪，打败它吧!只要不放弃一切幸福的信念，我相信，一定会有好事发生!</p>
<p>&nbsp;&nbsp;&nbsp;有些时候我觉得很好笑，那些在我们记忆里占据很小一部分的人，你竟然一辈子都忘不掉。</p>
<pre><code>人生太短，所以笑吧，趁你现在还有牙齿时。
</code></pre><p>&nbsp;&nbsp;&nbsp;我们不怕目标定得高远，只怕没有追寻的勇气、热情和执著。只要心头时时燃烧着坚定的信念，一往无前地行进下去，就会惊讶地发现：很多所谓的远方其实并不遥远。</p>
<p>&nbsp;&nbsp;&nbsp;一个人总有一天会明白，忌妒是无用的，而模仿他人无异于自杀。因为不论好坏，人只有自己才能帮助自己，只有耕种自己的田地，才能收获自家的玉米。</p>
, ### 立正向前走
&nbsp;&nbsp;&nbsp;我们总有这样的茫然时刻，风霜雪雨中，我提着自己的手提箱，问自己我要往哪去?该回去还是继续向前?此时，我们知道应该赶路，却不得不停下来，因为这一刻意义太重大，一念之间决定了我们以后的路。

 

&nbsp;&nbsp;&nbsp;走到生命的哪一个阶段，都该喜欢那一段时光，完成那一阶段该完成的职责，顺生而行，不沉迷过去，不狂热地期待着未来，生命这样就好。不管正经历着怎样的挣扎与挑战，或许我们都只有一个选择：虽然痛苦，却依然要快乐，并相信未来。

 

&nbsp;&nbsp;&nbsp;世上最凄绝的距离是两个人本来距离很远，互不相识，忽然有一天，他们相识，相爱，距离变得很近。然后有一天，不再相爱了，本来很近的两个人，变得很远，甚至比以前更远。

 

&nbsp;&nbsp;&nbsp;我不习惯把自己心里的痛苦展示给别人，因为我怕别人安慰，也不想得到怜悯。相比于弱者的倾诉和哭泣，我更喜欢强者的骄傲和被仰望。心里乌云密布，面上不动声色。就算被误解，也不澄清，不解释，不在乎，把这些都当前行的力量。

 

&nbsp;&nbsp;&nbsp;为什么我们总是不懂得珍惜眼前人?在未可预知的重逢里，我们以为总会重逢，总会有缘再会，总以为有机会说一声对不起，却从没想过每一次挥手道别，都可能是诀别，每一声叹息，都可能是人间最后的一声叹息。

 

&nbsp;&nbsp;&nbsp;没有誓言的爱情才是最可靠的爱情。爱情是与誓言无关的。但有趣的是，大多女人都喜欢听男人的誓言，即便是在心里并不把男人的誓言当真，也是听着幸福无比。

 

&nbsp;&nbsp;&nbsp;如果生活是一杯水，那么痛苦就是掉落杯中的灰尘。我们可以选择让心静下来，慢慢沉淀那些痛苦。如果总是不断地去搅和，痛苦就会充满我们的生活。

 

&nbsp;&nbsp;&nbsp;年轻时，我不要你们心如止水，我要你们妖孽横行。我不要你们收敛锋芒，我要你们跋扈张扬。我不要你们平淡青春，我要你们嚣张挥霍。总之，要笑要哭，要爱要痛。因为很久很久以后，这段光芒万丈的回忆，会帮你度过很多很多，你以为不能度过的苦难时期。

 

&nbsp;&nbsp;&nbsp;你的脆弱，也是你的坚强。

 

&nbsp;&nbsp;&nbsp;爱情如此使人着迷，是不是正因为它是靠不住的?明知道它是水，是无根的，我们却用一双手和一双脚想要去拦住它。直到一天，当它翻起的波涛差点儿把我们淹没，我们才发现，即使再多出十双手和十双脚，要走的东西，终究是拦不住的。

 

&nbsp;&nbsp;&nbsp;当初你有胆量去选，同样该有勇气把后果承受。

 

&nbsp;&nbsp;&nbsp;很多时候，面对那些原本以为过不去的坎，面对那些一时无法接受的事，我们能做的只是沉默，沉默的等这一阵过去。相信这一夜的痛哭过后，还有新的早晨。活在世上遇到的悲伤是很多的，但欢乐也有。即使欢乐的日子比哭泣的日子少太多，这个世界，仍值得我们为之走一遭。

 

&nbsp;&nbsp;&nbsp;在寂静中我唯一能听到的，只剩下那些我说不出来的话。我爱你，一直很爱你，以后也是。

 

&nbsp;&nbsp;&nbsp;人们不解释的主要原因是根本不在乎对方的想法，无关重要的人，对无关重要的事有点儿误会，有什么关系。你信也好，不信也好，都于当事人生活毫无影响，何劳解释。

 

&nbsp;&nbsp;&nbsp;既然一事无成，那你还有什么好失去的，鼓起勇气面对一切难堪，打败它吧!只要不放弃一切幸福的信念，我相信，一定会有好事发生!

 

&nbsp;&nbsp;&nbsp;有些时候我觉得很好笑，那些在我们记忆里占据很小一部分的人，你竟然一辈子都忘不掉。

 

    人生太短，所以笑吧，趁你现在还有牙齿时。

 

&nbsp;&nbsp;&nbsp;我们不怕目标定得高远，只怕没有追寻的勇气、热情和执著。只要心头时时燃烧着坚定的信念，一往无前地行进下去，就会惊讶地发现：很多所谓的远方其实并不遥远。

 

&nbsp;&nbsp;&nbsp;一个人总有一天会明白，忌妒是无用的，而模仿他人无异于自杀。因为不论好坏，人只有自己才能帮助自己，只有耕种自己的田地，才能收获自家的玉米。
2019-03-03 16:13:49.634 DEBUG c.c.m.A.queryRelation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@27a8106b]
2019-03-03 16:13:49.634 DEBUG c.c.m.A.queryRelation - ==>  Preparing: SELECT A.id,A.articleId,B.id keyWordId,B.name keyName,A.updatetime FROM mine_article_keyword_relation A INNER JOIN mine_keywords B ON A.keyId = B.id WHERE A.articleId=? 
2019-03-03 16:13:49.634 DEBUG c.c.m.A.queryRelation - ==> Parameters: 28(Integer)
2019-03-03 16:13:49.653 DEBUG c.c.m.A.queryRelation - <==    Columns: id, articleId, id, name, updatetime
2019-03-03 16:13:49.653 DEBUG c.c.m.A.queryRelation - <==        Row: 83, 28, 5, java, 2019-02-23 16:06:27.0
2019-03-03 16:13:49.653 DEBUG c.c.m.A.queryRelation - <==        Row: 84, 28, 1, fastdfs, 2019-02-23 16:06:27.0
2019-03-03 16:13:49.653 DEBUG c.c.m.A.queryRelation - <==        Row: 85, 28, 3, redis, 2019-02-23 16:06:27.0
2019-03-03 16:13:49.763 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:13:49.773 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@27a8106b]
2019-03-03 16:13:49.774 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:13:49.774 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:13:49.788 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:13:49.788 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:13:49.788 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:13:49.789 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:13:49.789 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:13:49.789 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:13:49.789 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:13:49.805 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 16:13:49.818 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@27a8106b]
2019-03-03 16:13:49.818 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 16:13:49.818 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 16:13:49.829 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 16:13:49.829 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 16:13:49.830 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 16:13:49.830 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 16:13:49.830 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 16:13:49.831 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 16:13:49.848 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:13:49.849 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 16:13:49.851 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 16:13:49.859 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@27a8106b]
2019-03-03 16:13:49.860 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:13:49.860 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:13:49.870 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@6f9930b8]
2019-03-03 16:13:49.870 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@6c4a6273]
2019-03-03 16:13:49.871 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 16:13:49.871 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 16:13:49.872 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 16:13:49.872 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:13:49.872 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 16:13:49.873 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:13:49.874 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:13:49.874 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:13:49.875 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:13:49.875 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:13:49.876 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:13:49.885 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 16:13:49.886 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 16:13:49.887 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@6c4a6273]
2019-03-03 16:13:49.887 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 16:13:49.888 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 16:13:49.889 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 16:13:49.889 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 16:13:49.890 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 16:13:49.890 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 16:13:49.891 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 16:13:49.891 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 16:13:49.892 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 16:13:49.894 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 16:13:49.895 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 16:13:49.903 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 16:13:49.904 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 16:15:38.963 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:15:38.986 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@6c4a6273]
2019-03-03 16:15:38.986 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:15:38.987 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:15:39.009 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:15:39.009 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:15:39.010 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:15:39.010 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:15:39.010 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:15:39.010 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:15:39.011 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:15:39.036 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 16:15:39.057 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@6c4a6273]
2019-03-03 16:15:39.058 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 16:15:39.058 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 16:15:39.074 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 16:15:39.074 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 16:15:39.074 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 16:15:39.075 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 16:15:39.075 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 16:15:39.075 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 16:15:39.103 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:15:39.113 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 16:15:39.114 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 16:15:39.121 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@6c4a6273]
2019-03-03 16:15:39.122 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:15:39.123 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:15:39.124 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@27a8106b]
2019-03-03 16:15:39.125 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 16:15:39.125 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 16:15:39.130 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@6f9930b8]
2019-03-03 16:15:39.131 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 16:15:39.132 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 16:15:39.132 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 16:15:39.133 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 16:15:39.134 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 16:15:39.135 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 16:15:39.135 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:15:39.137 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 16:15:39.137 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:15:39.138 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 16:15:39.139 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:15:39.139 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 16:15:39.140 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:15:39.140 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 16:15:39.141 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:15:39.141 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 16:15:39.142 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:15:39.143 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:15:39.150 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 16:15:39.151 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 16:15:39.152 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@6f9930b8]
2019-03-03 16:15:39.152 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 16:15:39.153 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 16:15:39.167 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 16:15:39.168 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 16:21:44.347 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:21:44.555 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3d3d73ac]
2019-03-03 16:21:44.556 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:21:44.557 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:21:44.581 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:21:44.581 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:21:44.582 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:21:44.582 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:21:44.582 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:21:44.582 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:21:44.582 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:21:44.604 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 16:21:44.623 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3d3d73ac]
2019-03-03 16:21:44.623 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 16:21:44.624 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 16:21:44.649 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 16:21:44.649 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 16:21:44.650 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 16:21:44.650 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 16:21:44.650 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 16:21:44.651 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 16:21:44.669 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:21:44.673 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 16:21:44.673 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 16:21:44.679 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3d3d73ac]
2019-03-03 16:21:44.680 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:21:44.680 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:21:44.696 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:21:44.697 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:21:44.697 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:21:44.697 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:21:44.698 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:21:44.698 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:21:44.698 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:21:44.721 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3d3d73ac]
2019-03-03 16:21:44.723 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 16:21:44.724 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 16:21:44.734 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 16:21:44.735 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 16:21:44.735 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 16:21:44.736 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 16:21:44.736 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 16:21:44.737 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 16:21:44.738 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 16:21:44.739 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 16:21:44.741 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 16:21:44.762 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3d3d73ac]
2019-03-03 16:21:44.762 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 16:21:44.763 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 16:21:44.773 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 16:21:44.774 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 16:21:44.776 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3d3d73ac]
2019-03-03 16:21:44.776 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 16:21:44.777 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 16:21:44.786 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 16:21:44.787 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 16:21:46.999 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:21:47.017 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3d3d73ac]
2019-03-03 16:21:47.017 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:21:47.017 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:21:47.027 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:21:47.027 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:21:47.027 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:21:47.027 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:21:47.028 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:21:47.028 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:21:47.028 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:21:47.049 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 16:21:47.067 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3d3d73ac]
2019-03-03 16:21:47.067 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 16:21:47.068 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 16:21:47.087 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 16:21:47.087 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 16:21:47.088 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 16:21:47.088 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 16:21:47.089 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 16:21:47.089 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 16:21:47.116 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:21:47.127 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_LATEST_ARTICLE","params":[10]}
2019-03-03 16:21:47.129 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 16:21:47.133 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:21:47.141 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 16:21:47.158 DEBUG c.c.m.A.findLatestArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5a536a5b]
2019-03-03 16:21:47.160 DEBUG c.c.m.A.findLatestArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC LIMIT ? 
2019-03-03 16:21:47.160 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3d3d73ac]
2019-03-03 16:21:47.160 DEBUG c.c.m.A.findLatestArticle - ==> Parameters: 10(Integer)
2019-03-03 16:21:47.161 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:21:47.161 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:21:47.173 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:21:47.174 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:21:47.175 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:21:47.176 DEBUG c.c.m.A.findLatestArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 16:21:47.176 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:21:47.176 DEBUG c.c.m.A.findLatestArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 16:21:47.176 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:21:47.177 DEBUG c.c.m.A.findLatestArticle - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 16:21:47.177 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:21:47.177 DEBUG c.c.m.A.findLatestArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 16:21:47.177 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:21:47.178 DEBUG c.c.m.A.findLatestArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 16:21:47.178 DEBUG c.c.m.A.findLatestArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 5, null, 88, 1, 后端技术
2019-03-03 16:21:47.179 DEBUG c.c.m.A.findLatestArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 11, 4, 数据库
2019-03-03 16:21:47.180 DEBUG c.c.m.A.findLatestArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 16:21:47.204 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5a536a5b]
2019-03-03 16:21:47.204 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 16:21:47.205 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 16:21:47.207 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3d3d73ac]
2019-03-03 16:21:47.208 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:21:47.208 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:21:47.213 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 16:21:47.214 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 16:21:47.214 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5a536a5b]
2019-03-03 16:21:47.214 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 16:21:47.215 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 16:21:47.216 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:21:47.217 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:21:47.218 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:21:47.218 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:21:47.219 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:21:47.219 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:21:47.219 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:21:47.221 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 16:21:47.221 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 16:21:47.246 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:21:47.248 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3d3d73ac]
2019-03-03 16:21:47.249 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 16:21:47.249 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 16:21:47.257 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1502c845]
2019-03-03 16:21:47.258 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:21:47.258 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 16:21:47.258 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:21:47.259 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 16:21:47.259 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 16:21:47.259 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 16:21:47.260 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 16:21:47.260 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 16:21:47.260 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 16:21:47.260 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 16:21:47.260 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 16:21:47.269 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:21:47.269 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:21:47.270 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:21:47.270 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:21:47.271 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:21:47.271 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:21:47.271 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:21:47.287 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null,null]}
2019-03-03 16:21:47.309 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1502c845]
2019-03-03 16:21:47.310 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-03-03 16:21:47.310 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-03-03 16:21:47.329 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 16:21:47.329 DEBUG c.c.m.A.findArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 16:21:47.330 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 16:21:47.330 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 16:21:47.331 DEBUG c.c.m.A.findArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 16:21:47.331 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 5, null, 88, 1, 后端技术
2019-03-03 16:21:47.332 DEBUG c.c.m.A.findArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 11, 4, 数据库
2019-03-03 16:21:47.332 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 16:49:38.936 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:49:39.163 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1818c106]
2019-03-03 16:49:39.164 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:49:39.166 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:49:39.187 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:49:39.190 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:49:39.192 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:49:39.193 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:49:39.194 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:49:39.195 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:49:39.195 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:49:39.307 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 16:49:39.335 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1818c106]
2019-03-03 16:49:39.335 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 16:49:39.336 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 16:49:39.350 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 16:49:39.351 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 16:49:39.353 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 16:49:39.354 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 16:49:39.355 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 16:49:39.356 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 16:49:39.431 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 16:49:39.433 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:49:39.436 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 16:49:39.443 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:49:39.447 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_LATEST_ARTICLE","params":[10]}
2019-03-03 16:49:39.451 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1818c106]
2019-03-03 16:49:39.452 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 16:49:39.452 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 16:49:39.464 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 16:49:39.464 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 16:49:39.464 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 16:49:39.465 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 16:49:39.465 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 16:49:39.465 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 16:49:39.466 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 16:49:39.466 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 16:49:39.466 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 16:49:39.484 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1818c106]
2019-03-03 16:49:39.484 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:49:39.485 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:49:39.494 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:49:39.494 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:49:39.495 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:49:39.495 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:49:39.495 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:49:39.496 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:49:39.496 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:49:39.509 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@53d03c81]
2019-03-03 16:49:39.510 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 16:49:39.511 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 16:49:39.515 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1818c106]
2019-03-03 16:49:39.515 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:49:39.516 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:49:39.519 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 16:49:39.520 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 16:49:39.521 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@53d03c81]
2019-03-03 16:49:39.522 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 16:49:39.522 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 16:49:39.527 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:49:39.528 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:49:39.528 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:49:39.529 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:49:39.529 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:49:39.529 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:49:39.529 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:49:39.530 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:49:39.531 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 16:49:39.531 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 16:49:39.546 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@53d03c81]
2019-03-03 16:49:39.547 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:49:39.547 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:49:39.548 DEBUG c.c.m.A.findLatestArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1818c106]
2019-03-03 16:49:39.549 DEBUG c.c.m.A.findLatestArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC LIMIT ? 
2019-03-03 16:49:39.550 DEBUG c.c.m.A.findLatestArticle - ==> Parameters: 10(Integer)
2019-03-03 16:49:39.555 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:49:39.556 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:49:39.556 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:49:39.556 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:49:39.556 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:49:39.557 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:49:39.557 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:49:39.570 DEBUG c.c.m.A.findLatestArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 16:49:39.571 DEBUG c.c.m.A.findLatestArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 16:49:39.571 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null,null]}
2019-03-03 16:49:39.571 DEBUG c.c.m.A.findLatestArticle - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 16:49:39.572 DEBUG c.c.m.A.findLatestArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 16:49:39.573 DEBUG c.c.m.A.findLatestArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 16:49:39.574 DEBUG c.c.m.A.findLatestArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 5, null, 88, 1, 后端技术
2019-03-03 16:49:39.574 DEBUG c.c.m.A.findLatestArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 11, 4, 数据库
2019-03-03 16:49:39.575 DEBUG c.c.m.A.findLatestArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 16:49:39.579 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@53d03c81]
2019-03-03 16:49:39.579 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-03-03 16:49:39.583 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-03-03 16:49:39.600 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 16:49:39.601 DEBUG c.c.m.A.findArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 16:49:39.602 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 16:49:39.602 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 16:49:39.603 DEBUG c.c.m.A.findArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 16:49:39.604 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 5, null, 88, 1, 后端技术
2019-03-03 16:49:39.605 DEBUG c.c.m.A.findArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 11, 4, 数据库
2019-03-03 16:49:39.605 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 16:53:23.912 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["36"]}
2019-03-03 16:53:23.989 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@53d03c81]
2019-03-03 16:53:23.990 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-03-03 16:53:23.991 DEBUG c.c.m.A.findDetailById - ==> Parameters: 36(String)
2019-03-03 16:53:24.115 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms, htmlContent, content
2019-03-03 16:53:24.116 DEBUG c.c.m.A.findDetailById - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端, <h2 id="h2-u524Du8A00"><a name="前言" class="reference-link"></a><span class="header-link octicon octicon-link"></span>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过”服务器主机IP:应用端口”的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名-&gt;备案-&gt;做IP解析、端口转发的过程。</p>
<h6 id="h6--"><a name="一、申请域名以及实名认证" class="reference-link"></a><span class="header-link octicon octicon-link"></span>一、申请域名以及实名认证</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳<a href="https://cloud.baidu.com/product/bcd/search.html" title="域名申请地址">域名申请地址</a>。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。</p>
<h6 id="h6--"><a name="二、工信部备案" class="reference-link"></a><span class="header-link octicon octicon-link"></span>二、工信部备案</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳<a href="http://beian.bce.baidu.com/" title="百度云备案系统">百度云备案系统</a>，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。</p>
<h6 id="h6--"><a name="三、域名解析、端口转发" class="reference-link"></a><span class="header-link octicon octicon-link"></span>三、域名解析、端口转发</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。</p>
<h6 id="h6--"><a name="四、通过域名进行网站访问" class="reference-link"></a><span class="header-link octicon octicon-link"></span>四、通过域名进行网站访问</h6><p>完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。</p>
, ## 前言
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过"服务器主机IP:应用端口"的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名->备案->做IP解析、端口转发的过程。

###### 一、申请域名以及实名认证
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳[域名申请地址](https://cloud.baidu.com/product/bcd/search.html "域名申请地址")。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。

###### 二、工信部备案
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳[百度云备案系统](http://beian.bce.baidu.com/ "百度云备案系统")，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。

###### 三、域名解析、端口转发
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。

###### 四、通过域名进行网站访问
完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。



2019-03-03 16:53:24.117 DEBUG c.c.m.A.queryRelation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@53d03c81]
2019-03-03 16:53:24.117 DEBUG c.c.m.A.queryRelation - ==>  Preparing: SELECT A.id,A.articleId,B.id keyWordId,B.name keyName,A.updatetime FROM mine_article_keyword_relation A INNER JOIN mine_keywords B ON A.keyId = B.id WHERE A.articleId=? 
2019-03-03 16:53:24.118 DEBUG c.c.m.A.queryRelation - ==> Parameters: 36(Integer)
2019-03-03 16:53:24.458 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:53:24.477 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@53d03c81]
2019-03-03 16:53:24.477 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:53:24.477 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:53:24.489 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:53:24.489 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:53:24.489 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:53:24.490 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:53:24.490 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:53:24.490 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:53:24.490 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:53:24.513 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 16:53:24.537 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@53d03c81]
2019-03-03 16:53:24.537 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 16:53:24.537 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 16:53:24.554 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 16:53:24.554 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 16:53:24.554 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 16:53:24.555 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 16:53:24.555 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 16:53:24.555 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 16:53:24.579 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:53:24.583 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 16:53:24.586 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 16:53:24.602 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@53d03c81]
2019-03-03 16:53:24.602 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:53:24.603 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:53:24.608 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1818c106]
2019-03-03 16:53:24.609 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 16:53:24.610 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 16:53:24.612 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3e86f37a]
2019-03-03 16:53:24.612 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 16:53:24.612 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 16:53:24.638 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 16:53:24.638 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:53:24.639 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 16:53:24.639 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:53:24.640 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 16:53:24.640 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:53:24.640 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 16:53:24.641 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 16:53:24.641 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:53:24.642 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 16:53:24.642 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 16:53:24.644 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:53:24.645 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 16:53:24.645 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:53:24.646 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 16:53:24.646 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3e86f37a]
2019-03-03 16:53:24.646 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:53:24.646 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 16:53:24.646 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 16:53:24.647 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 16:53:24.647 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 16:53:24.678 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 16:53:24.679 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 16:54:02.636 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:54:03.030 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3e86f37a]
2019-03-03 16:54:03.031 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:54:03.032 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:54:03.215 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:54:03.216 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:54:03.217 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:54:03.218 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:54:03.219 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:54:03.220 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:54:03.221 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:54:03.296 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 16:54:03.308 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3e86f37a]
2019-03-03 16:54:03.308 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 16:54:03.309 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 16:54:03.337 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 16:54:03.337 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 16:54:03.338 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 16:54:03.338 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 16:54:03.338 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 16:54:03.338 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 16:54:03.363 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:54:03.369 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 16:54:03.370 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 16:54:03.371 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:54:03.372 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_LATEST_ARTICLE","params":[10]}
2019-03-03 16:54:03.382 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@53d03c81]
2019-03-03 16:54:03.382 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 16:54:03.382 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 16:54:03.384 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3e86f37a]
2019-03-03 16:54:03.384 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:54:03.384 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:54:03.385 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1818c106]
2019-03-03 16:54:03.386 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 16:54:03.386 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 16:54:03.389 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 16:54:03.389 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 16:54:03.390 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@53d03c81]
2019-03-03 16:54:03.390 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 16:54:03.390 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 16:54:03.403 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 16:54:03.403 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 16:54:03.404 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 16:54:03.404 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 16:54:03.405 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 16:54:03.405 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 16:54:03.405 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 16:54:03.406 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 16:54:03.406 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 16:54:03.407 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 16:54:03.407 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:54:03.407 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 16:54:03.407 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:54:03.408 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:54:03.409 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:54:03.409 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:54:03.409 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:54:03.410 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:54:03.441 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@53d03c81]
2019-03-03 16:54:03.442 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:54:03.442 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:54:03.448 DEBUG c.c.m.A.findLatestArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1818c106]
2019-03-03 16:54:03.449 DEBUG c.c.m.A.findLatestArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC LIMIT ? 
2019-03-03 16:54:03.449 DEBUG c.c.m.A.findLatestArticle - ==> Parameters: 10(Integer)
2019-03-03 16:54:03.451 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:54:03.451 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:54:03.452 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:54:03.452 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:54:03.452 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:54:03.452 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:54:03.452 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:54:03.472 DEBUG c.c.m.A.findLatestArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 16:54:03.473 DEBUG c.c.m.A.findLatestArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 16:54:03.473 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:54:03.473 DEBUG c.c.m.A.findLatestArticle - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 16:54:03.473 DEBUG c.c.m.A.findLatestArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 16:54:03.473 DEBUG c.c.m.A.findLatestArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 16:54:03.474 DEBUG c.c.m.A.findLatestArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 5, null, 88, 1, 后端技术
2019-03-03 16:54:03.474 DEBUG c.c.m.A.findLatestArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 11, 4, 数据库
2019-03-03 16:54:03.474 DEBUG c.c.m.A.findLatestArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 16:54:03.500 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@53d03c81]
2019-03-03 16:54:03.501 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:54:03.501 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:54:03.526 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:54:03.527 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:54:03.527 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:54:03.527 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:54:03.527 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:54:03.527 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:54:03.527 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:54:03.547 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null,null]}
2019-03-03 16:54:03.563 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@53d03c81]
2019-03-03 16:54:03.564 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-03-03 16:54:03.564 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-03-03 16:54:03.587 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 16:54:03.587 DEBUG c.c.m.A.findArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 16:54:03.588 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 16:54:03.588 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 16:54:03.588 DEBUG c.c.m.A.findArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 16:54:03.588 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 5, null, 88, 1, 后端技术
2019-03-03 16:54:03.589 DEBUG c.c.m.A.findArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 11, 4, 数据库
2019-03-03 16:54:03.589 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 16:54:04.585 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["78"]}
2019-03-03 16:54:05.100 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@53d03c81]
2019-03-03 16:54:05.100 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-03-03 16:54:05.100 DEBUG c.c.m.A.findDetailById - ==> Parameters: 78(String)
2019-03-03 16:54:05.924 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms, htmlContent, content
2019-03-03 16:54:05.926 DEBUG c.c.m.A.findDetailById - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 5, null, 88, 1, 后端技术, <h2 id="h2-fastdfs"><a name="FastDFS" class="reference-link"></a><span class="header-link octicon octicon-link"></span>FastDFS</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。</p>
<h2 id="h2-u7B80u4ECB"><a name="简介" class="reference-link"></a><span class="header-link octicon octicon-link"></span>简介</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS服务端有两个角色：跟踪器（tracker）和存储节点（storage）。跟踪器主要做调度工作，在访问上起负载均衡的作用。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;存储节点存储文件，完成文件管理的所有功能：就是这样的存储、同步和提供存取接口，FastDFS同时对文件的metadata进行管理。所谓文件的meta data就是文件的相关属性，以键值对（key valuepair）方式表示，如：width=1024，其中的key为width，value为1024。文件metadata是文件属性列表，可以包含多个键值对。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;跟踪器和存储节点都可以由一台或多台服务器构成。跟踪器和存储节点中的服务器均可以随时增加或下线而不会影响线上服务。其中跟踪器中的所有服务器都是对等的，可以根据服务器的压力情况随时增加或减少。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了支持大容量，存储节点（服务器）采用了分卷（或分组）的组织方式。存储系统由一个或多个卷组成，卷与卷之间的文件是相互独立的，所有卷的文件容量累加就是整个存储系统中的文件容量。一个卷可以由一台或多台存储服务器组成，一个卷下的存储服务器中的文件都是相同的，卷中的多台存储服务器起到了冗余备份和负载均衡的作用。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在卷中增加服务器时，同步已有的文件由系统自动完成，同步完成后，系统自动将新增服务器切换到线上提供服务。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当存储空间不足或即将耗尽时，可以动态添加卷。只需要增加一台或多台服务器，并将它们配置为一个新的卷，这样就扩大了存储系统的容量。<br>FastDFS中的文件标识分为两个部分：卷名和文件名，二者缺一不可。<br><img src="http://www.gydblog.com:8888/group1/M00/00/00/wKgACFoAWdeAG_M4AASfYzbioyg760.png" alt=""></p>
<h2 id="h2-u4E0Au4F20u6587u4EF6u4EA4u4E92u8FC7u7A0B"><a name="上传文件交互过程" class="reference-link"></a><span class="header-link octicon octicon-link"></span>上传文件交互过程</h2><ol>
<li>client询问tracker上传到的storage，不需要附加参数；</li><li>tracker返回一台可用的storage；</li><li>client直接和storage通讯完成文件上传。<br>FastDFS file download</li></ol>
<h2 id="h2-u4E0Bu8F7Du4EA4u4E92u8FC7u7A0B"><a name="下载交互过程" class="reference-link"></a><span class="header-link octicon octicon-link"></span>下载交互过程</h2><ol>
<li>client询问tracker下载文件的storage，参数为文件标识（卷名和文件名）；</li><li>tracker返回一台可用的storage；</li><li>client直接和storage通讯完成文件下载。<br>需要说明的是，client为使用FastDFS服务的调用方，client也应该是一台服务器，它对tracker和storage的调用均为服务器间的调用。</li></ol>
, ## FastDFS
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。

## 简介
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS服务端有两个角色：跟踪器（tracker）和存储节点（storage）。跟踪器主要做调度工作，在访问上起负载均衡的作用。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;存储节点存储文件，完成文件管理的所有功能：就是这样的存储、同步和提供存取接口，FastDFS同时对文件的metadata进行管理。所谓文件的meta data就是文件的相关属性，以键值对（key valuepair）方式表示，如：width=1024，其中的key为width，value为1024。文件metadata是文件属性列表，可以包含多个键值对。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;跟踪器和存储节点都可以由一台或多台服务器构成。跟踪器和存储节点中的服务器均可以随时增加或下线而不会影响线上服务。其中跟踪器中的所有服务器都是对等的，可以根据服务器的压力情况随时增加或减少。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了支持大容量，存储节点（服务器）采用了分卷（或分组）的组织方式。存储系统由一个或多个卷组成，卷与卷之间的文件是相互独立的，所有卷的文件容量累加就是整个存储系统中的文件容量。一个卷可以由一台或多台存储服务器组成，一个卷下的存储服务器中的文件都是相同的，卷中的多台存储服务器起到了冗余备份和负载均衡的作用。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在卷中增加服务器时，同步已有的文件由系统自动完成，同步完成后，系统自动将新增服务器切换到线上提供服务。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当存储空间不足或即将耗尽时，可以动态添加卷。只需要增加一台或多台服务器，并将它们配置为一个新的卷，这样就扩大了存储系统的容量。
FastDFS中的文件标识分为两个部分：卷名和文件名，二者缺一不可。
![](http://www.gydblog.com:8888/group1/M00/00/00/wKgACFoAWdeAG_M4AASfYzbioyg760.png)

## 上传文件交互过程
1. client询问tracker上传到的storage，不需要附加参数；
2. tracker返回一台可用的storage；
3. client直接和storage通讯完成文件上传。
FastDFS file download

##下载交互过程
1. client询问tracker下载文件的storage，参数为文件标识（卷名和文件名）；
2. tracker返回一台可用的storage；
3. client直接和storage通讯完成文件下载。
需要说明的是，client为使用FastDFS服务的调用方，client也应该是一台服务器，它对tracker和storage的调用均为服务器间的调用。

2019-03-03 16:54:05.929 DEBUG c.c.m.A.queryRelation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@53d03c81]
2019-03-03 16:54:05.930 DEBUG c.c.m.A.queryRelation - ==>  Preparing: SELECT A.id,A.articleId,B.id keyWordId,B.name keyName,A.updatetime FROM mine_article_keyword_relation A INNER JOIN mine_keywords B ON A.keyId = B.id WHERE A.articleId=? 
2019-03-03 16:54:05.931 DEBUG c.c.m.A.queryRelation - ==> Parameters: 78(Integer)
2019-03-03 16:54:06.019 DEBUG c.c.m.A.queryRelation - <==    Columns: id, articleId, id, name, updatetime
2019-03-03 16:54:06.019 DEBUG c.c.m.A.queryRelation - <==        Row: 19, 78, 8, 分布式文件系统, 2017-11-06 20:51:27.0
2019-03-03 16:54:06.181 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:54:06.208 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@53d03c81]
2019-03-03 16:54:06.208 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:54:06.209 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:54:06.256 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:54:06.256 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:54:06.256 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:54:06.257 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:54:06.257 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:54:06.257 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:54:06.257 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:54:06.283 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 16:54:06.297 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@53d03c81]
2019-03-03 16:54:06.297 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 16:54:06.297 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 16:54:06.315 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 16:54:06.315 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 16:54:06.316 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 16:54:06.316 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 16:54:06.316 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 16:54:06.316 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 16:54:06.336 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:54:06.337 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 16:54:06.339 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 16:54:06.369 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3d7743f1]
2019-03-03 16:54:06.369 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 16:54:06.369 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 16:54:06.372 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1818c106]
2019-03-03 16:54:06.372 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@53d03c81]
2019-03-03 16:54:06.373 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 16:54:06.374 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:54:06.375 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 16:54:06.376 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:54:06.411 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 16:54:06.412 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 16:54:06.412 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:54:06.413 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 16:54:06.413 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 16:54:06.413 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:54:06.414 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 16:54:06.414 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3d7743f1]
2019-03-03 16:54:06.415 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:54:06.415 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 16:54:06.415 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 16:54:06.415 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:54:06.416 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 16:54:06.416 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 16:54:06.416 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:54:06.417 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 16:54:06.417 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:54:06.417 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 16:54:06.418 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:54:06.418 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 16:54:06.418 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 16:54:06.429 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 16:54:06.430 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 16:54:08.072 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_PRAISE","params":[78]}
2019-03-03 16:54:08.072 ERROR c.c.c.MineServiceExecuter - 不存在的接口地址MINE_ARTICLE_PRAISE
2019-03-03 16:54:22.484 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_PRAISE","params":[78]}
2019-03-03 16:54:22.484 ERROR c.c.c.MineServiceExecuter - 不存在的接口地址MINE_ARTICLE_PRAISE
2019-03-03 16:54:39.710 INFO  o.h.v.i.u.Version - HV000001: Hibernate Validator 5.2.4.Final
2019-03-03 16:54:39.783 INFO  c.c.ServerApp - Starting ServerApp on WINDOWS-GUOYD with PID 5256 (E:\personal_workspace\git_code\project\mine-server\mine-starter\target\classes started by guoyd in E:\personal_workspace\git_code\project\mine-server\mine-starter)
2019-03-03 16:54:39.783 DEBUG c.c.ServerApp - Running with Spring Boot v1.3.3.RELEASE, Spring v4.2.3.RELEASE
2019-03-03 16:54:39.783 INFO  c.c.ServerApp - No active profile set, falling back to default profiles: default
2019-03-03 16:54:41.218 ERROR c.a.d.p.DruidAbstractDataSource - maxIdle is deprecated
2019-03-03 16:54:42.999 INFO  c.a.d.p.DruidDataSource - {dataSource-1} inited
2019-03-03 16:54:43.045 DEBUG o.a.i.l.LogFactory - Logging initialized using 'org.apache.ibatis.logging.slf4j.Slf4jImpl' adapter.
2019-03-03 16:54:43.300 DEBUG c.g.m.m.p.OffsetLimitInterceptor - dialectClass: com.github.miemiedev.mybatis.paginator.dialect.MySQLDialect 
2019-03-03 16:54:43.301 DEBUG c.g.m.m.p.OffsetLimitInterceptor - asyncTotalCount: false 
2019-03-03 16:54:44.405 INFO  o.a.c.c.StandardService - Starting service Tomcat
2019-03-03 16:54:44.407 INFO  o.a.c.c.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.0.28
2019-03-03 16:54:44.582 INFO  o.a.c.c.C.[.[.[/] - Initializing Spring embedded WebApplicationContext
2019-03-03 16:54:45.113 DEBUG c.c.c.MineServiceHandler - 测试接口初始化
2019-03-03 16:54:45.170 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_USER_LOGIN
2019-03-03 16:54:45.170 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_RANDOM_ARTICLE
2019-03-03 16:54:45.170 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_LATEST_ARTICLE
2019-03-03 16:54:45.170 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_ARTICLE_UPDATE_READ_COUNT
2019-03-03 16:54:45.170 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_ARTICLE_LIST
2019-03-03 16:54:45.171 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_ARTICLE_DETAIL
2019-03-03 16:54:45.171 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_ARTICLE_PRAISE
2019-03-03 16:54:45.171 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_ARTICLE_LIST_RANK_TOP
2019-03-03 16:54:45.171 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_KEYWORDS
2019-03-03 16:54:45.171 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_DAILY_ESSAYS
2019-03-03 16:54:45.171 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_DATA_EXPORT
2019-03-03 16:54:45.171 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_CONST
2019-03-03 16:54:45.171 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_SITE_INFORMATION
2019-03-03 16:54:45.171 DEBUG c.c.c.MineServiceHandler - 测试接口初始化完毕
2019-03-03 16:54:46.074 INFO  o.a.c.h.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8181"]
2019-03-03 16:54:46.086 INFO  o.a.c.h.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8181"]
2019-03-03 16:54:46.103 INFO  o.a.t.u.n.NioSelectorPool - Using a shared selector for servlet write/read
2019-03-03 16:54:46.139 INFO  c.c.ServerApp - Started ServerApp in 6.956 seconds (JVM running for 7.661)
2019-03-03 16:55:16.771 INFO  o.a.c.c.C.[.[.[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-03-03 16:55:17.159 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:55:17.304 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@22a123a2]
2019-03-03 16:55:17.306 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:55:17.328 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:55:17.354 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:55:17.354 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:55:17.355 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:55:17.356 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:55:17.357 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:55:17.358 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:55:17.359 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:55:17.443 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 16:55:17.467 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@22a123a2]
2019-03-03 16:55:17.468 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 16:55:17.468 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 16:55:17.504 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 16:55:17.505 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 16:55:17.506 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 16:55:17.506 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 16:55:17.507 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 16:55:17.509 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 16:55:17.567 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:55:17.582 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 16:55:17.582 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:55:17.583 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_LATEST_ARTICLE","params":[10]}
2019-03-03 16:55:17.584 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 16:55:17.632 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@50c6854c]
2019-03-03 16:55:17.633 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 16:55:17.633 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 16:55:17.633 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 16:55:17.633 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@22a123a2]
2019-03-03 16:55:17.633 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:55:17.634 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:55:17.634 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:55:17.634 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:55:17.636 DEBUG c.c.m.A.findLatestArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 16:55:17.636 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 16:55:17.636 DEBUG c.c.m.A.findLatestArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC LIMIT ? 
2019-03-03 16:55:17.637 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 16:55:17.637 DEBUG c.c.m.A.findLatestArticle - ==> Parameters: 10(Integer)
2019-03-03 16:55:17.637 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 16:55:17.697 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 16:55:17.697 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:55:17.697 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:55:17.698 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 16:55:17.699 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:55:17.699 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:55:17.700 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:55:17.700 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:55:17.700 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@50c6854c]
2019-03-03 16:55:17.701 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:55:17.701 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 16:55:17.701 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:55:17.702 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:55:17.702 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 16:55:17.702 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:55:17.703 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:55:17.703 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:55:17.704 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:55:17.705 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:55:17.712 DEBUG c.c.m.A.findLatestArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 16:55:17.714 DEBUG c.c.m.A.findLatestArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 16:55:17.715 DEBUG c.c.m.A.findLatestArticle - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 16:55:17.716 DEBUG c.c.m.A.findLatestArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 16:55:17.716 DEBUG c.c.m.A.findLatestArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 16:55:17.717 DEBUG c.c.m.A.findLatestArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 5, null, 88, 1, 后端技术
2019-03-03 16:55:17.717 DEBUG c.c.m.A.findLatestArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 11, 4, 数据库
2019-03-03 16:55:17.717 DEBUG c.c.m.A.findLatestArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 16:55:17.719 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 16:55:17.719 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 16:55:17.720 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 16:55:17.720 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 16:55:17.721 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 16:55:17.721 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 16:55:17.722 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 16:55:17.723 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 16:55:17.724 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 16:55:17.839 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 16:55:17.840 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 16:55:17.859 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:55:17.886 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 16:55:17.887 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:55:17.888 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:55:17.919 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:55:17.921 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:55:17.924 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:55:17.926 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:55:17.929 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:55:17.931 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:55:17.932 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:55:17.964 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null,null]}
2019-03-03 16:55:17.994 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 16:55:17.995 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-03-03 16:55:17.996 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-03-03 16:55:18.045 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 16:55:18.047 DEBUG c.c.m.A.findArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 16:55:18.047 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 16:55:18.048 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 16:55:18.049 DEBUG c.c.m.A.findArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 16:55:18.051 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 5, null, 88, 1, 后端技术
2019-03-03 16:55:18.051 DEBUG c.c.m.A.findArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 11, 4, 数据库
2019-03-03 16:55:18.052 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 16:55:18.792 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["78"]}
2019-03-03 16:55:19.471 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 16:55:19.472 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-03-03 16:55:19.474 DEBUG c.c.m.A.findDetailById - ==> Parameters: 78(String)
2019-03-03 16:55:19.834 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms, htmlContent, content
2019-03-03 16:55:19.835 DEBUG c.c.m.A.findDetailById - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 5, null, 88, 1, 后端技术, <h2 id="h2-fastdfs"><a name="FastDFS" class="reference-link"></a><span class="header-link octicon octicon-link"></span>FastDFS</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。</p>
<h2 id="h2-u7B80u4ECB"><a name="简介" class="reference-link"></a><span class="header-link octicon octicon-link"></span>简介</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS服务端有两个角色：跟踪器（tracker）和存储节点（storage）。跟踪器主要做调度工作，在访问上起负载均衡的作用。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;存储节点存储文件，完成文件管理的所有功能：就是这样的存储、同步和提供存取接口，FastDFS同时对文件的metadata进行管理。所谓文件的meta data就是文件的相关属性，以键值对（key valuepair）方式表示，如：width=1024，其中的key为width，value为1024。文件metadata是文件属性列表，可以包含多个键值对。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;跟踪器和存储节点都可以由一台或多台服务器构成。跟踪器和存储节点中的服务器均可以随时增加或下线而不会影响线上服务。其中跟踪器中的所有服务器都是对等的，可以根据服务器的压力情况随时增加或减少。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了支持大容量，存储节点（服务器）采用了分卷（或分组）的组织方式。存储系统由一个或多个卷组成，卷与卷之间的文件是相互独立的，所有卷的文件容量累加就是整个存储系统中的文件容量。一个卷可以由一台或多台存储服务器组成，一个卷下的存储服务器中的文件都是相同的，卷中的多台存储服务器起到了冗余备份和负载均衡的作用。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在卷中增加服务器时，同步已有的文件由系统自动完成，同步完成后，系统自动将新增服务器切换到线上提供服务。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当存储空间不足或即将耗尽时，可以动态添加卷。只需要增加一台或多台服务器，并将它们配置为一个新的卷，这样就扩大了存储系统的容量。<br>FastDFS中的文件标识分为两个部分：卷名和文件名，二者缺一不可。<br><img src="http://www.gydblog.com:8888/group1/M00/00/00/wKgACFoAWdeAG_M4AASfYzbioyg760.png" alt=""></p>
<h2 id="h2-u4E0Au4F20u6587u4EF6u4EA4u4E92u8FC7u7A0B"><a name="上传文件交互过程" class="reference-link"></a><span class="header-link octicon octicon-link"></span>上传文件交互过程</h2><ol>
<li>client询问tracker上传到的storage，不需要附加参数；</li><li>tracker返回一台可用的storage；</li><li>client直接和storage通讯完成文件上传。<br>FastDFS file download</li></ol>
<h2 id="h2-u4E0Bu8F7Du4EA4u4E92u8FC7u7A0B"><a name="下载交互过程" class="reference-link"></a><span class="header-link octicon octicon-link"></span>下载交互过程</h2><ol>
<li>client询问tracker下载文件的storage，参数为文件标识（卷名和文件名）；</li><li>tracker返回一台可用的storage；</li><li>client直接和storage通讯完成文件下载。<br>需要说明的是，client为使用FastDFS服务的调用方，client也应该是一台服务器，它对tracker和storage的调用均为服务器间的调用。</li></ol>
, ## FastDFS
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。

## 简介
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS服务端有两个角色：跟踪器（tracker）和存储节点（storage）。跟踪器主要做调度工作，在访问上起负载均衡的作用。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;存储节点存储文件，完成文件管理的所有功能：就是这样的存储、同步和提供存取接口，FastDFS同时对文件的metadata进行管理。所谓文件的meta data就是文件的相关属性，以键值对（key valuepair）方式表示，如：width=1024，其中的key为width，value为1024。文件metadata是文件属性列表，可以包含多个键值对。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;跟踪器和存储节点都可以由一台或多台服务器构成。跟踪器和存储节点中的服务器均可以随时增加或下线而不会影响线上服务。其中跟踪器中的所有服务器都是对等的，可以根据服务器的压力情况随时增加或减少。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了支持大容量，存储节点（服务器）采用了分卷（或分组）的组织方式。存储系统由一个或多个卷组成，卷与卷之间的文件是相互独立的，所有卷的文件容量累加就是整个存储系统中的文件容量。一个卷可以由一台或多台存储服务器组成，一个卷下的存储服务器中的文件都是相同的，卷中的多台存储服务器起到了冗余备份和负载均衡的作用。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在卷中增加服务器时，同步已有的文件由系统自动完成，同步完成后，系统自动将新增服务器切换到线上提供服务。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当存储空间不足或即将耗尽时，可以动态添加卷。只需要增加一台或多台服务器，并将它们配置为一个新的卷，这样就扩大了存储系统的容量。
FastDFS中的文件标识分为两个部分：卷名和文件名，二者缺一不可。
![](http://www.gydblog.com:8888/group1/M00/00/00/wKgACFoAWdeAG_M4AASfYzbioyg760.png)

## 上传文件交互过程
1. client询问tracker上传到的storage，不需要附加参数；
2. tracker返回一台可用的storage；
3. client直接和storage通讯完成文件上传。
FastDFS file download

##下载交互过程
1. client询问tracker下载文件的storage，参数为文件标识（卷名和文件名）；
2. tracker返回一台可用的storage；
3. client直接和storage通讯完成文件下载。
需要说明的是，client为使用FastDFS服务的调用方，client也应该是一台服务器，它对tracker和storage的调用均为服务器间的调用。

2019-03-03 16:55:19.837 DEBUG c.c.m.A.queryRelation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 16:55:19.837 DEBUG c.c.m.A.queryRelation - ==>  Preparing: SELECT A.id,A.articleId,B.id keyWordId,B.name keyName,A.updatetime FROM mine_article_keyword_relation A INNER JOIN mine_keywords B ON A.keyId = B.id WHERE A.articleId=? 
2019-03-03 16:55:19.838 DEBUG c.c.m.A.queryRelation - ==> Parameters: 78(Integer)
2019-03-03 16:55:19.887 DEBUG c.c.m.A.queryRelation - <==    Columns: id, articleId, id, name, updatetime
2019-03-03 16:55:19.888 DEBUG c.c.m.A.queryRelation - <==        Row: 19, 78, 8, 分布式文件系统, 2017-11-06 20:51:27.0
2019-03-03 16:55:20.011 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:55:20.114 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 16:55:20.114 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:55:20.114 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:55:20.204 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:55:20.205 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:55:20.206 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:55:20.206 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:55:20.207 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:55:20.208 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:55:20.209 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:55:20.355 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 16:55:20.411 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 16:55:20.412 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 16:55:20.412 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 16:55:20.454 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 16:55:20.454 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 16:55:20.455 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 16:55:20.455 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 16:55:20.456 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 16:55:20.456 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 16:55:20.486 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:55:20.487 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 16:55:20.489 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 16:55:20.512 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 16:55:20.513 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 16:55:20.514 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 16:55:20.515 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@50c6854c]
2019-03-03 16:55:20.516 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 16:55:20.517 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 16:55:20.518 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:55:20.518 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 16:55:20.518 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:55:20.536 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 16:55:20.536 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 16:55:20.537 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 16:55:20.538 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 16:55:20.538 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 16:55:20.538 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 16:55:20.539 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 16:55:20.539 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 16:55:20.539 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 16:55:20.541 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 16:55:20.542 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 16:55:20.543 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:55:20.543 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:55:20.543 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@50c6854c]
2019-03-03 16:55:20.544 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:55:20.544 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 16:55:20.544 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:55:20.544 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 16:55:20.545 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:55:20.545 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:55:20.545 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:55:20.560 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 16:55:20.560 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 16:55:22.565 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_PRAISE","params":[78]}
2019-03-03 16:55:25.628 DEBUG c.c.m.A.updateArticlePraiseCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@50c6854c]
2019-03-03 16:55:25.629 DEBUG c.c.m.A.updateArticlePraiseCount - ==>  Preparing: UPDATE mine_articles SET praisecount = praisecount+1 WHERE id=? 
2019-03-03 16:55:25.633 DEBUG c.c.m.A.updateArticlePraiseCount - ==> Parameters: 78(Integer)
2019-03-03 16:56:32.947 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:56:37.469 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@50c6854c]
2019-03-03 16:56:37.469 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:56:37.470 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:56:37.684 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:56:37.684 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:56:37.685 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:56:37.685 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:56:37.685 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:56:37.686 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:56:37.686 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:56:37.778 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 16:56:37.858 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@50c6854c]
2019-03-03 16:56:37.858 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 16:56:37.859 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 16:56:44.272 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 16:56:44.273 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 16:56:44.275 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 16:56:44.278 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 16:56:44.279 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 16:56:44.280 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 16:56:44.305 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:56:44.311 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 16:56:44.311 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:56:44.315 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_LATEST_ARTICLE","params":[10]}
2019-03-03 16:56:44.316 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 16:56:44.339 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@50c6854c]
2019-03-03 16:56:44.339 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@22a123a2]
2019-03-03 16:56:44.339 DEBUG c.c.m.A.findLatestArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 16:56:44.340 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:56:44.340 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 16:56:44.340 DEBUG c.c.m.A.findLatestArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC LIMIT ? 
2019-03-03 16:56:44.340 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:56:44.341 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 16:56:44.342 DEBUG c.c.m.A.findLatestArticle - ==> Parameters: 10(Integer)
2019-03-03 16:56:44.342 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 16:56:44.342 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 16:56:44.342 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:56:44.343 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 16:56:44.343 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:56:44.343 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 16:56:44.352 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 16:56:44.352 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 16:56:44.353 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 16:56:44.353 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 16:56:44.353 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 16:56:44.354 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 16:56:44.354 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 16:56:44.354 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 16:56:44.355 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 16:56:44.357 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:56:44.357 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:56:44.358 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:56:44.358 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:56:44.358 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:56:44.359 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:56:44.359 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:56:44.360 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 16:56:44.360 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 16:56:44.360 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:56:44.361 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:56:44.361 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 16:56:44.361 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:56:44.361 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 16:56:44.361 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:56:44.362 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 16:56:44.362 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:56:44.362 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:56:44.363 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:56:44.367 DEBUG c.c.m.A.findLatestArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 16:56:44.367 DEBUG c.c.m.A.findLatestArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 16:56:44.368 DEBUG c.c.m.A.findLatestArticle - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 16:56:44.368 DEBUG c.c.m.A.findLatestArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 16:56:44.368 DEBUG c.c.m.A.findLatestArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 16:56:44.369 DEBUG c.c.m.A.findLatestArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 5, null, 89, 1, 后端技术
2019-03-03 16:56:44.369 DEBUG c.c.m.A.findLatestArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 11, 4, 数据库
2019-03-03 16:56:44.369 DEBUG c.c.m.A.findLatestArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 16:56:44.376 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 16:56:44.376 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 16:56:44.400 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:56:44.434 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 16:56:44.434 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:56:44.434 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:56:44.484 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:56:44.485 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:56:44.486 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:56:44.486 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:56:44.487 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:56:44.487 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:56:44.488 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:56:44.690 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null,null]}
2019-03-03 16:56:45.224 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 16:56:45.225 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-03-03 16:56:45.226 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-03-03 16:56:46.222 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 16:56:46.224 DEBUG c.c.m.A.findArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 16:56:46.226 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 16:56:46.227 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 16:56:46.229 DEBUG c.c.m.A.findArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 16:56:46.230 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 5, null, 89, 1, 后端技术
2019-03-03 16:56:46.232 DEBUG c.c.m.A.findArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 11, 4, 数据库
2019-03-03 16:56:46.233 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 16:56:48.507 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["78"]}
2019-03-03 16:56:51.536 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 16:56:51.537 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-03-03 16:56:51.539 DEBUG c.c.m.A.findDetailById - ==> Parameters: 78(String)
2019-03-03 16:57:24.390 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms, htmlContent, content
2019-03-03 16:57:24.391 DEBUG c.c.m.A.findDetailById - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 5, null, 89, 1, 后端技术, <h2 id="h2-fastdfs"><a name="FastDFS" class="reference-link"></a><span class="header-link octicon octicon-link"></span>FastDFS</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。</p>
<h2 id="h2-u7B80u4ECB"><a name="简介" class="reference-link"></a><span class="header-link octicon octicon-link"></span>简介</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS服务端有两个角色：跟踪器（tracker）和存储节点（storage）。跟踪器主要做调度工作，在访问上起负载均衡的作用。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;存储节点存储文件，完成文件管理的所有功能：就是这样的存储、同步和提供存取接口，FastDFS同时对文件的metadata进行管理。所谓文件的meta data就是文件的相关属性，以键值对（key valuepair）方式表示，如：width=1024，其中的key为width，value为1024。文件metadata是文件属性列表，可以包含多个键值对。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;跟踪器和存储节点都可以由一台或多台服务器构成。跟踪器和存储节点中的服务器均可以随时增加或下线而不会影响线上服务。其中跟踪器中的所有服务器都是对等的，可以根据服务器的压力情况随时增加或减少。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了支持大容量，存储节点（服务器）采用了分卷（或分组）的组织方式。存储系统由一个或多个卷组成，卷与卷之间的文件是相互独立的，所有卷的文件容量累加就是整个存储系统中的文件容量。一个卷可以由一台或多台存储服务器组成，一个卷下的存储服务器中的文件都是相同的，卷中的多台存储服务器起到了冗余备份和负载均衡的作用。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在卷中增加服务器时，同步已有的文件由系统自动完成，同步完成后，系统自动将新增服务器切换到线上提供服务。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当存储空间不足或即将耗尽时，可以动态添加卷。只需要增加一台或多台服务器，并将它们配置为一个新的卷，这样就扩大了存储系统的容量。<br>FastDFS中的文件标识分为两个部分：卷名和文件名，二者缺一不可。<br><img src="http://www.gydblog.com:8888/group1/M00/00/00/wKgACFoAWdeAG_M4AASfYzbioyg760.png" alt=""></p>
<h2 id="h2-u4E0Au4F20u6587u4EF6u4EA4u4E92u8FC7u7A0B"><a name="上传文件交互过程" class="reference-link"></a><span class="header-link octicon octicon-link"></span>上传文件交互过程</h2><ol>
<li>client询问tracker上传到的storage，不需要附加参数；</li><li>tracker返回一台可用的storage；</li><li>client直接和storage通讯完成文件上传。<br>FastDFS file download</li></ol>
<h2 id="h2-u4E0Bu8F7Du4EA4u4E92u8FC7u7A0B"><a name="下载交互过程" class="reference-link"></a><span class="header-link octicon octicon-link"></span>下载交互过程</h2><ol>
<li>client询问tracker下载文件的storage，参数为文件标识（卷名和文件名）；</li><li>tracker返回一台可用的storage；</li><li>client直接和storage通讯完成文件下载。<br>需要说明的是，client为使用FastDFS服务的调用方，client也应该是一台服务器，它对tracker和storage的调用均为服务器间的调用。</li></ol>
, ## FastDFS
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。

## 简介
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS服务端有两个角色：跟踪器（tracker）和存储节点（storage）。跟踪器主要做调度工作，在访问上起负载均衡的作用。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;存储节点存储文件，完成文件管理的所有功能：就是这样的存储、同步和提供存取接口，FastDFS同时对文件的metadata进行管理。所谓文件的meta data就是文件的相关属性，以键值对（key valuepair）方式表示，如：width=1024，其中的key为width，value为1024。文件metadata是文件属性列表，可以包含多个键值对。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;跟踪器和存储节点都可以由一台或多台服务器构成。跟踪器和存储节点中的服务器均可以随时增加或下线而不会影响线上服务。其中跟踪器中的所有服务器都是对等的，可以根据服务器的压力情况随时增加或减少。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了支持大容量，存储节点（服务器）采用了分卷（或分组）的组织方式。存储系统由一个或多个卷组成，卷与卷之间的文件是相互独立的，所有卷的文件容量累加就是整个存储系统中的文件容量。一个卷可以由一台或多台存储服务器组成，一个卷下的存储服务器中的文件都是相同的，卷中的多台存储服务器起到了冗余备份和负载均衡的作用。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在卷中增加服务器时，同步已有的文件由系统自动完成，同步完成后，系统自动将新增服务器切换到线上提供服务。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当存储空间不足或即将耗尽时，可以动态添加卷。只需要增加一台或多台服务器，并将它们配置为一个新的卷，这样就扩大了存储系统的容量。
FastDFS中的文件标识分为两个部分：卷名和文件名，二者缺一不可。
![](http://www.gydblog.com:8888/group1/M00/00/00/wKgACFoAWdeAG_M4AASfYzbioyg760.png)

## 上传文件交互过程
1. client询问tracker上传到的storage，不需要附加参数；
2. tracker返回一台可用的storage；
3. client直接和storage通讯完成文件上传。
FastDFS file download

##下载交互过程
1. client询问tracker下载文件的storage，参数为文件标识（卷名和文件名）；
2. tracker返回一台可用的storage；
3. client直接和storage通讯完成文件下载。
需要说明的是，client为使用FastDFS服务的调用方，client也应该是一台服务器，它对tracker和storage的调用均为服务器间的调用。

2019-03-03 16:57:24.394 DEBUG c.c.m.A.queryRelation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 16:57:24.395 DEBUG c.c.m.A.queryRelation - ==>  Preparing: SELECT A.id,A.articleId,B.id keyWordId,B.name keyName,A.updatetime FROM mine_article_keyword_relation A INNER JOIN mine_keywords B ON A.keyId = B.id WHERE A.articleId=? 
2019-03-03 16:57:24.395 DEBUG c.c.m.A.queryRelation - ==> Parameters: 78(Integer)
2019-03-03 16:57:24.408 DEBUG c.c.m.A.queryRelation - <==    Columns: id, articleId, id, name, updatetime
2019-03-03 16:57:24.408 DEBUG c.c.m.A.queryRelation - <==        Row: 19, 78, 8, 分布式文件系统, 2017-11-06 20:51:27.0
2019-03-03 16:57:24.508 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:57:24.529 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 16:57:24.530 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:57:24.530 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:57:24.551 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:57:24.552 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:57:24.552 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:57:24.552 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:57:24.553 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:57:24.553 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:57:24.553 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:57:24.576 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 16:57:24.594 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 16:57:24.594 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 16:57:24.595 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 16:57:24.656 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 16:57:24.656 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 16:57:24.656 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 16:57:24.657 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 16:57:24.657 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 16:57:24.657 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 16:57:24.684 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:57:24.689 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 16:57:24.689 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 16:57:24.751 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 16:57:24.751 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 16:57:24.751 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 16:57:24.751 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 16:57:24.751 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:57:24.751 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 16:57:24.751 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 16:57:24.753 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:57:24.753 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 16:57:24.797 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 16:57:24.797 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 16:57:24.797 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:57:24.797 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 16:57:24.798 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 16:57:24.798 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:57:24.799 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 16:57:24.799 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 16:57:24.799 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:57:24.799 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 16:57:24.801 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 16:57:24.801 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:57:24.802 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 16:57:24.803 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 16:57:24.803 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:57:24.805 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 16:57:24.805 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:57:24.806 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 16:57:24.806 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:57:24.806 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 16:57:24.807 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 16:57:24.840 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 16:57:24.841 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 16:57:32.362 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_PRAISE","params":[78]}
2019-03-03 16:57:32.428 DEBUG c.c.m.A.updateArticlePraiseCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 16:57:32.428 DEBUG c.c.m.A.updateArticlePraiseCount - ==>  Preparing: UPDATE mine_articles SET praisecount = praisecount+1 WHERE id=? 
2019-03-03 16:57:32.429 DEBUG c.c.m.A.updateArticlePraiseCount - ==> Parameters: 78(Integer)
2019-03-03 16:57:34.448 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_PRAISE","params":[78]}
2019-03-03 16:57:34.565 DEBUG c.c.m.A.updateArticlePraiseCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 16:57:34.566 DEBUG c.c.m.A.updateArticlePraiseCount - ==>  Preparing: UPDATE mine_articles SET praisecount = praisecount+1 WHERE id=? 
2019-03-03 16:57:34.568 DEBUG c.c.m.A.updateArticlePraiseCount - ==> Parameters: 78(Integer)
2019-03-03 16:57:36.307 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_PRAISE","params":[78]}
2019-03-03 16:57:36.447 DEBUG c.c.m.A.updateArticlePraiseCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 16:57:36.447 DEBUG c.c.m.A.updateArticlePraiseCount - ==>  Preparing: UPDATE mine_articles SET praisecount = praisecount+1 WHERE id=? 
2019-03-03 16:57:36.448 DEBUG c.c.m.A.updateArticlePraiseCount - ==> Parameters: 78(Integer)
2019-03-03 16:57:38.058 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_PRAISE","params":[78]}
2019-03-03 16:57:38.076 DEBUG c.c.m.A.updateArticlePraiseCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 16:57:38.077 DEBUG c.c.m.A.updateArticlePraiseCount - ==>  Preparing: UPDATE mine_articles SET praisecount = praisecount+1 WHERE id=? 
2019-03-03 16:57:38.077 DEBUG c.c.m.A.updateArticlePraiseCount - ==> Parameters: 78(Integer)
2019-03-03 16:57:47.666 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["78"]}
2019-03-03 16:57:47.680 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 16:57:47.681 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-03-03 16:57:47.681 DEBUG c.c.m.A.findDetailById - ==> Parameters: 78(String)
2019-03-03 16:57:47.702 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms, htmlContent, content
2019-03-03 16:57:47.703 DEBUG c.c.m.A.findDetailById - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 5, null, 93, 1, 后端技术, <h2 id="h2-fastdfs"><a name="FastDFS" class="reference-link"></a><span class="header-link octicon octicon-link"></span>FastDFS</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。</p>
<h2 id="h2-u7B80u4ECB"><a name="简介" class="reference-link"></a><span class="header-link octicon octicon-link"></span>简介</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS服务端有两个角色：跟踪器（tracker）和存储节点（storage）。跟踪器主要做调度工作，在访问上起负载均衡的作用。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;存储节点存储文件，完成文件管理的所有功能：就是这样的存储、同步和提供存取接口，FastDFS同时对文件的metadata进行管理。所谓文件的meta data就是文件的相关属性，以键值对（key valuepair）方式表示，如：width=1024，其中的key为width，value为1024。文件metadata是文件属性列表，可以包含多个键值对。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;跟踪器和存储节点都可以由一台或多台服务器构成。跟踪器和存储节点中的服务器均可以随时增加或下线而不会影响线上服务。其中跟踪器中的所有服务器都是对等的，可以根据服务器的压力情况随时增加或减少。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了支持大容量，存储节点（服务器）采用了分卷（或分组）的组织方式。存储系统由一个或多个卷组成，卷与卷之间的文件是相互独立的，所有卷的文件容量累加就是整个存储系统中的文件容量。一个卷可以由一台或多台存储服务器组成，一个卷下的存储服务器中的文件都是相同的，卷中的多台存储服务器起到了冗余备份和负载均衡的作用。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在卷中增加服务器时，同步已有的文件由系统自动完成，同步完成后，系统自动将新增服务器切换到线上提供服务。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当存储空间不足或即将耗尽时，可以动态添加卷。只需要增加一台或多台服务器，并将它们配置为一个新的卷，这样就扩大了存储系统的容量。<br>FastDFS中的文件标识分为两个部分：卷名和文件名，二者缺一不可。<br><img src="http://www.gydblog.com:8888/group1/M00/00/00/wKgACFoAWdeAG_M4AASfYzbioyg760.png" alt=""></p>
<h2 id="h2-u4E0Au4F20u6587u4EF6u4EA4u4E92u8FC7u7A0B"><a name="上传文件交互过程" class="reference-link"></a><span class="header-link octicon octicon-link"></span>上传文件交互过程</h2><ol>
<li>client询问tracker上传到的storage，不需要附加参数；</li><li>tracker返回一台可用的storage；</li><li>client直接和storage通讯完成文件上传。<br>FastDFS file download</li></ol>
<h2 id="h2-u4E0Bu8F7Du4EA4u4E92u8FC7u7A0B"><a name="下载交互过程" class="reference-link"></a><span class="header-link octicon octicon-link"></span>下载交互过程</h2><ol>
<li>client询问tracker下载文件的storage，参数为文件标识（卷名和文件名）；</li><li>tracker返回一台可用的storage；</li><li>client直接和storage通讯完成文件下载。<br>需要说明的是，client为使用FastDFS服务的调用方，client也应该是一台服务器，它对tracker和storage的调用均为服务器间的调用。</li></ol>
, ## FastDFS
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。

## 简介
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS服务端有两个角色：跟踪器（tracker）和存储节点（storage）。跟踪器主要做调度工作，在访问上起负载均衡的作用。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;存储节点存储文件，完成文件管理的所有功能：就是这样的存储、同步和提供存取接口，FastDFS同时对文件的metadata进行管理。所谓文件的meta data就是文件的相关属性，以键值对（key valuepair）方式表示，如：width=1024，其中的key为width，value为1024。文件metadata是文件属性列表，可以包含多个键值对。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;跟踪器和存储节点都可以由一台或多台服务器构成。跟踪器和存储节点中的服务器均可以随时增加或下线而不会影响线上服务。其中跟踪器中的所有服务器都是对等的，可以根据服务器的压力情况随时增加或减少。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了支持大容量，存储节点（服务器）采用了分卷（或分组）的组织方式。存储系统由一个或多个卷组成，卷与卷之间的文件是相互独立的，所有卷的文件容量累加就是整个存储系统中的文件容量。一个卷可以由一台或多台存储服务器组成，一个卷下的存储服务器中的文件都是相同的，卷中的多台存储服务器起到了冗余备份和负载均衡的作用。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在卷中增加服务器时，同步已有的文件由系统自动完成，同步完成后，系统自动将新增服务器切换到线上提供服务。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当存储空间不足或即将耗尽时，可以动态添加卷。只需要增加一台或多台服务器，并将它们配置为一个新的卷，这样就扩大了存储系统的容量。
FastDFS中的文件标识分为两个部分：卷名和文件名，二者缺一不可。
![](http://www.gydblog.com:8888/group1/M00/00/00/wKgACFoAWdeAG_M4AASfYzbioyg760.png)

## 上传文件交互过程
1. client询问tracker上传到的storage，不需要附加参数；
2. tracker返回一台可用的storage；
3. client直接和storage通讯完成文件上传。
FastDFS file download

##下载交互过程
1. client询问tracker下载文件的storage，参数为文件标识（卷名和文件名）；
2. tracker返回一台可用的storage；
3. client直接和storage通讯完成文件下载。
需要说明的是，client为使用FastDFS服务的调用方，client也应该是一台服务器，它对tracker和storage的调用均为服务器间的调用。

2019-03-03 16:57:47.704 DEBUG c.c.m.A.queryRelation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 16:57:47.705 DEBUG c.c.m.A.queryRelation - ==>  Preparing: SELECT A.id,A.articleId,B.id keyWordId,B.name keyName,A.updatetime FROM mine_article_keyword_relation A INNER JOIN mine_keywords B ON A.keyId = B.id WHERE A.articleId=? 
2019-03-03 16:57:47.705 DEBUG c.c.m.A.queryRelation - ==> Parameters: 78(Integer)
2019-03-03 16:57:47.714 DEBUG c.c.m.A.queryRelation - <==    Columns: id, articleId, id, name, updatetime
2019-03-03 16:57:47.715 DEBUG c.c.m.A.queryRelation - <==        Row: 19, 78, 8, 分布式文件系统, 2017-11-06 20:51:27.0
2019-03-03 16:57:47.782 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:57:47.800 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 16:57:47.802 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:57:47.802 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:57:47.812 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:57:47.813 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:57:47.813 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:57:47.813 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:57:47.814 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:57:47.814 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:57:47.814 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:57:47.834 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 16:57:47.898 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 16:57:47.899 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 16:57:47.899 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 16:57:47.968 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 16:57:47.968 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 16:57:47.969 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 16:57:47.969 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 16:57:47.969 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 16:57:47.969 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 16:57:47.998 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:57:48.000 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 16:57:48.002 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 16:57:48.009 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 16:57:48.009 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:57:48.010 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:57:48.015 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 16:57:48.015 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 16:57:48.016 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 16:57:48.016 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 16:57:48.017 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 16:57:48.017 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 16:57:48.021 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:57:48.022 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:57:48.022 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:57:48.023 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:57:48.023 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:57:48.024 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:57:48.025 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:57:48.032 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 16:57:48.032 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 16:57:48.033 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 16:57:48.033 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 16:57:48.035 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 16:57:48.036 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 16:57:48.036 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 16:57:48.036 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 16:57:48.037 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 16:57:48.037 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 16:57:48.038 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 16:57:48.039 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 16:57:48.040 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 16:57:48.041 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 16:57:48.167 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 16:57:48.169 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 16:57:50.010 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_PRAISE","params":[78]}
2019-03-03 16:57:58.362 DEBUG c.c.m.A.updateArticlePraiseCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 16:57:58.363 DEBUG c.c.m.A.updateArticlePraiseCount - ==>  Preparing: UPDATE mine_articles SET praisecount = praisecount+1 WHERE id=? 
2019-03-03 16:57:58.364 DEBUG c.c.m.A.updateArticlePraiseCount - ==> Parameters: 78(Integer)
2019-03-03 16:58:38.860 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_PRAISE","params":[78]}
2019-03-03 16:58:39.091 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_PRAISE","params":[78]}
2019-03-03 16:58:39.280 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_PRAISE","params":[78]}
2019-03-03 16:58:39.476 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_PRAISE","params":[78]}
2019-03-03 16:58:39.659 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_PRAISE","params":[78]}
2019-03-03 16:58:39.809 DEBUG c.c.m.A.updateArticlePraiseCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 16:58:39.811 DEBUG c.c.m.A.updateArticlePraiseCount - ==>  Preparing: UPDATE mine_articles SET praisecount = praisecount+1 WHERE id=? 
2019-03-03 16:58:39.813 DEBUG c.c.m.A.updateArticlePraiseCount - ==> Parameters: 78(Integer)
2019-03-03 16:58:39.928 DEBUG c.c.m.A.updateArticlePraiseCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 16:58:39.928 DEBUG c.c.m.A.updateArticlePraiseCount - ==>  Preparing: UPDATE mine_articles SET praisecount = praisecount+1 WHERE id=? 
2019-03-03 16:58:39.928 DEBUG c.c.m.A.updateArticlePraiseCount - ==> Parameters: 78(Integer)
2019-03-03 16:58:40.034 DEBUG c.c.m.A.updateArticlePraiseCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 16:58:40.034 DEBUG c.c.m.A.updateArticlePraiseCount - ==>  Preparing: UPDATE mine_articles SET praisecount = praisecount+1 WHERE id=? 
2019-03-03 16:58:40.034 DEBUG c.c.m.A.updateArticlePraiseCount - ==> Parameters: 78(Integer)
2019-03-03 16:58:40.723 DEBUG c.c.m.A.updateArticlePraiseCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 16:58:40.724 DEBUG c.c.m.A.updateArticlePraiseCount - ==>  Preparing: UPDATE mine_articles SET praisecount = praisecount+1 WHERE id=? 
2019-03-03 16:58:40.725 DEBUG c.c.m.A.updateArticlePraiseCount - ==> Parameters: 78(Integer)
2019-03-03 16:58:41.354 DEBUG c.c.m.A.updateArticlePraiseCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 16:58:41.355 DEBUG c.c.m.A.updateArticlePraiseCount - ==>  Preparing: UPDATE mine_articles SET praisecount = praisecount+1 WHERE id=? 
2019-03-03 16:58:41.355 DEBUG c.c.m.A.updateArticlePraiseCount - ==> Parameters: 78(Integer)
2019-03-03 16:58:47.698 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["78"]}
2019-03-03 16:58:49.805 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 16:58:49.806 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-03-03 16:58:49.807 DEBUG c.c.m.A.findDetailById - ==> Parameters: 78(String)
2019-03-03 16:58:51.549 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms, htmlContent, content
2019-03-03 16:58:51.550 DEBUG c.c.m.A.findDetailById - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 5, null, 99, 1, 后端技术, <h2 id="h2-fastdfs"><a name="FastDFS" class="reference-link"></a><span class="header-link octicon octicon-link"></span>FastDFS</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。</p>
<h2 id="h2-u7B80u4ECB"><a name="简介" class="reference-link"></a><span class="header-link octicon octicon-link"></span>简介</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS服务端有两个角色：跟踪器（tracker）和存储节点（storage）。跟踪器主要做调度工作，在访问上起负载均衡的作用。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;存储节点存储文件，完成文件管理的所有功能：就是这样的存储、同步和提供存取接口，FastDFS同时对文件的metadata进行管理。所谓文件的meta data就是文件的相关属性，以键值对（key valuepair）方式表示，如：width=1024，其中的key为width，value为1024。文件metadata是文件属性列表，可以包含多个键值对。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;跟踪器和存储节点都可以由一台或多台服务器构成。跟踪器和存储节点中的服务器均可以随时增加或下线而不会影响线上服务。其中跟踪器中的所有服务器都是对等的，可以根据服务器的压力情况随时增加或减少。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了支持大容量，存储节点（服务器）采用了分卷（或分组）的组织方式。存储系统由一个或多个卷组成，卷与卷之间的文件是相互独立的，所有卷的文件容量累加就是整个存储系统中的文件容量。一个卷可以由一台或多台存储服务器组成，一个卷下的存储服务器中的文件都是相同的，卷中的多台存储服务器起到了冗余备份和负载均衡的作用。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在卷中增加服务器时，同步已有的文件由系统自动完成，同步完成后，系统自动将新增服务器切换到线上提供服务。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当存储空间不足或即将耗尽时，可以动态添加卷。只需要增加一台或多台服务器，并将它们配置为一个新的卷，这样就扩大了存储系统的容量。<br>FastDFS中的文件标识分为两个部分：卷名和文件名，二者缺一不可。<br><img src="http://www.gydblog.com:8888/group1/M00/00/00/wKgACFoAWdeAG_M4AASfYzbioyg760.png" alt=""></p>
<h2 id="h2-u4E0Au4F20u6587u4EF6u4EA4u4E92u8FC7u7A0B"><a name="上传文件交互过程" class="reference-link"></a><span class="header-link octicon octicon-link"></span>上传文件交互过程</h2><ol>
<li>client询问tracker上传到的storage，不需要附加参数；</li><li>tracker返回一台可用的storage；</li><li>client直接和storage通讯完成文件上传。<br>FastDFS file download</li></ol>
<h2 id="h2-u4E0Bu8F7Du4EA4u4E92u8FC7u7A0B"><a name="下载交互过程" class="reference-link"></a><span class="header-link octicon octicon-link"></span>下载交互过程</h2><ol>
<li>client询问tracker下载文件的storage，参数为文件标识（卷名和文件名）；</li><li>tracker返回一台可用的storage；</li><li>client直接和storage通讯完成文件下载。<br>需要说明的是，client为使用FastDFS服务的调用方，client也应该是一台服务器，它对tracker和storage的调用均为服务器间的调用。</li></ol>
, ## FastDFS
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。

## 简介
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS服务端有两个角色：跟踪器（tracker）和存储节点（storage）。跟踪器主要做调度工作，在访问上起负载均衡的作用。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;存储节点存储文件，完成文件管理的所有功能：就是这样的存储、同步和提供存取接口，FastDFS同时对文件的metadata进行管理。所谓文件的meta data就是文件的相关属性，以键值对（key valuepair）方式表示，如：width=1024，其中的key为width，value为1024。文件metadata是文件属性列表，可以包含多个键值对。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;跟踪器和存储节点都可以由一台或多台服务器构成。跟踪器和存储节点中的服务器均可以随时增加或下线而不会影响线上服务。其中跟踪器中的所有服务器都是对等的，可以根据服务器的压力情况随时增加或减少。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了支持大容量，存储节点（服务器）采用了分卷（或分组）的组织方式。存储系统由一个或多个卷组成，卷与卷之间的文件是相互独立的，所有卷的文件容量累加就是整个存储系统中的文件容量。一个卷可以由一台或多台存储服务器组成，一个卷下的存储服务器中的文件都是相同的，卷中的多台存储服务器起到了冗余备份和负载均衡的作用。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在卷中增加服务器时，同步已有的文件由系统自动完成，同步完成后，系统自动将新增服务器切换到线上提供服务。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当存储空间不足或即将耗尽时，可以动态添加卷。只需要增加一台或多台服务器，并将它们配置为一个新的卷，这样就扩大了存储系统的容量。
FastDFS中的文件标识分为两个部分：卷名和文件名，二者缺一不可。
![](http://www.gydblog.com:8888/group1/M00/00/00/wKgACFoAWdeAG_M4AASfYzbioyg760.png)

## 上传文件交互过程
1. client询问tracker上传到的storage，不需要附加参数；
2. tracker返回一台可用的storage；
3. client直接和storage通讯完成文件上传。
FastDFS file download

##下载交互过程
1. client询问tracker下载文件的storage，参数为文件标识（卷名和文件名）；
2. tracker返回一台可用的storage；
3. client直接和storage通讯完成文件下载。
需要说明的是，client为使用FastDFS服务的调用方，client也应该是一台服务器，它对tracker和storage的调用均为服务器间的调用。

2019-03-03 16:58:51.551 DEBUG c.c.m.A.queryRelation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 16:58:51.552 DEBUG c.c.m.A.queryRelation - ==>  Preparing: SELECT A.id,A.articleId,B.id keyWordId,B.name keyName,A.updatetime FROM mine_article_keyword_relation A INNER JOIN mine_keywords B ON A.keyId = B.id WHERE A.articleId=? 
2019-03-03 16:58:51.552 DEBUG c.c.m.A.queryRelation - ==> Parameters: 78(Integer)
2019-03-03 16:58:51.566 DEBUG c.c.m.A.queryRelation - <==    Columns: id, articleId, id, name, updatetime
2019-03-03 16:58:51.566 DEBUG c.c.m.A.queryRelation - <==        Row: 19, 78, 8, 分布式文件系统, 2017-11-06 20:51:27.0
2019-03-03 16:58:51.725 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:58:51.748 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 16:58:51.749 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:58:51.750 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:58:51.763 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:58:51.764 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:58:51.765 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:58:51.766 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:58:51.766 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:58:51.767 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:58:51.768 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:58:51.802 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 16:58:51.827 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 16:58:51.827 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 16:58:51.827 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 16:58:51.853 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 16:58:51.853 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 16:58:51.854 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 16:58:51.854 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 16:58:51.855 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 16:58:51.855 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 16:58:51.882 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:58:51.886 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 16:58:51.886 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 16:58:51.905 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 16:58:51.906 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 16:58:51.907 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 16:58:51.907 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 16:58:51.907 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 16:58:51.908 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 16:58:51.908 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:58:51.909 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 16:58:51.909 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:58:51.917 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 16:58:51.917 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 16:58:51.917 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 16:58:51.918 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 16:58:51.918 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 16:58:51.920 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 16:58:51.920 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 16:58:51.921 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 16:58:51.921 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 16:58:51.921 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 16:58:51.922 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 16:58:51.923 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:58:51.923 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 16:58:51.924 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:58:51.924 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 16:58:51.925 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:58:51.925 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 16:58:51.925 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:58:51.926 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:58:51.926 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:58:51.927 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:58:51.939 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 16:58:51.940 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 16:59:10.651 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["78"]}
2019-03-03 16:59:14.472 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 16:59:14.473 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-03-03 16:59:14.474 DEBUG c.c.m.A.findDetailById - ==> Parameters: 78(String)
2019-03-03 16:59:17.413 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms, htmlContent, content
2019-03-03 16:59:17.414 DEBUG c.c.m.A.findDetailById - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 8, null, 99, 1, 后端技术, <h2 id="h2-fastdfs"><a name="FastDFS" class="reference-link"></a><span class="header-link octicon octicon-link"></span>FastDFS</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。</p>
<h2 id="h2-u7B80u4ECB"><a name="简介" class="reference-link"></a><span class="header-link octicon octicon-link"></span>简介</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS服务端有两个角色：跟踪器（tracker）和存储节点（storage）。跟踪器主要做调度工作，在访问上起负载均衡的作用。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;存储节点存储文件，完成文件管理的所有功能：就是这样的存储、同步和提供存取接口，FastDFS同时对文件的metadata进行管理。所谓文件的meta data就是文件的相关属性，以键值对（key valuepair）方式表示，如：width=1024，其中的key为width，value为1024。文件metadata是文件属性列表，可以包含多个键值对。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;跟踪器和存储节点都可以由一台或多台服务器构成。跟踪器和存储节点中的服务器均可以随时增加或下线而不会影响线上服务。其中跟踪器中的所有服务器都是对等的，可以根据服务器的压力情况随时增加或减少。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了支持大容量，存储节点（服务器）采用了分卷（或分组）的组织方式。存储系统由一个或多个卷组成，卷与卷之间的文件是相互独立的，所有卷的文件容量累加就是整个存储系统中的文件容量。一个卷可以由一台或多台存储服务器组成，一个卷下的存储服务器中的文件都是相同的，卷中的多台存储服务器起到了冗余备份和负载均衡的作用。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在卷中增加服务器时，同步已有的文件由系统自动完成，同步完成后，系统自动将新增服务器切换到线上提供服务。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当存储空间不足或即将耗尽时，可以动态添加卷。只需要增加一台或多台服务器，并将它们配置为一个新的卷，这样就扩大了存储系统的容量。<br>FastDFS中的文件标识分为两个部分：卷名和文件名，二者缺一不可。<br><img src="http://www.gydblog.com:8888/group1/M00/00/00/wKgACFoAWdeAG_M4AASfYzbioyg760.png" alt=""></p>
<h2 id="h2-u4E0Au4F20u6587u4EF6u4EA4u4E92u8FC7u7A0B"><a name="上传文件交互过程" class="reference-link"></a><span class="header-link octicon octicon-link"></span>上传文件交互过程</h2><ol>
<li>client询问tracker上传到的storage，不需要附加参数；</li><li>tracker返回一台可用的storage；</li><li>client直接和storage通讯完成文件上传。<br>FastDFS file download</li></ol>
<h2 id="h2-u4E0Bu8F7Du4EA4u4E92u8FC7u7A0B"><a name="下载交互过程" class="reference-link"></a><span class="header-link octicon octicon-link"></span>下载交互过程</h2><ol>
<li>client询问tracker下载文件的storage，参数为文件标识（卷名和文件名）；</li><li>tracker返回一台可用的storage；</li><li>client直接和storage通讯完成文件下载。<br>需要说明的是，client为使用FastDFS服务的调用方，client也应该是一台服务器，它对tracker和storage的调用均为服务器间的调用。</li></ol>
, ## FastDFS
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。

## 简介
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS服务端有两个角色：跟踪器（tracker）和存储节点（storage）。跟踪器主要做调度工作，在访问上起负载均衡的作用。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;存储节点存储文件，完成文件管理的所有功能：就是这样的存储、同步和提供存取接口，FastDFS同时对文件的metadata进行管理。所谓文件的meta data就是文件的相关属性，以键值对（key valuepair）方式表示，如：width=1024，其中的key为width，value为1024。文件metadata是文件属性列表，可以包含多个键值对。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;跟踪器和存储节点都可以由一台或多台服务器构成。跟踪器和存储节点中的服务器均可以随时增加或下线而不会影响线上服务。其中跟踪器中的所有服务器都是对等的，可以根据服务器的压力情况随时增加或减少。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了支持大容量，存储节点（服务器）采用了分卷（或分组）的组织方式。存储系统由一个或多个卷组成，卷与卷之间的文件是相互独立的，所有卷的文件容量累加就是整个存储系统中的文件容量。一个卷可以由一台或多台存储服务器组成，一个卷下的存储服务器中的文件都是相同的，卷中的多台存储服务器起到了冗余备份和负载均衡的作用。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在卷中增加服务器时，同步已有的文件由系统自动完成，同步完成后，系统自动将新增服务器切换到线上提供服务。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当存储空间不足或即将耗尽时，可以动态添加卷。只需要增加一台或多台服务器，并将它们配置为一个新的卷，这样就扩大了存储系统的容量。
FastDFS中的文件标识分为两个部分：卷名和文件名，二者缺一不可。
![](http://www.gydblog.com:8888/group1/M00/00/00/wKgACFoAWdeAG_M4AASfYzbioyg760.png)

## 上传文件交互过程
1. client询问tracker上传到的storage，不需要附加参数；
2. tracker返回一台可用的storage；
3. client直接和storage通讯完成文件上传。
FastDFS file download

##下载交互过程
1. client询问tracker下载文件的storage，参数为文件标识（卷名和文件名）；
2. tracker返回一台可用的storage；
3. client直接和storage通讯完成文件下载。
需要说明的是，client为使用FastDFS服务的调用方，client也应该是一台服务器，它对tracker和storage的调用均为服务器间的调用。

2019-03-03 16:59:17.415 DEBUG c.c.m.A.queryRelation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 16:59:17.415 DEBUG c.c.m.A.queryRelation - ==>  Preparing: SELECT A.id,A.articleId,B.id keyWordId,B.name keyName,A.updatetime FROM mine_article_keyword_relation A INNER JOIN mine_keywords B ON A.keyId = B.id WHERE A.articleId=? 
2019-03-03 16:59:17.416 DEBUG c.c.m.A.queryRelation - ==> Parameters: 78(Integer)
2019-03-03 16:59:17.459 DEBUG c.c.m.A.queryRelation - <==    Columns: id, articleId, id, name, updatetime
2019-03-03 16:59:17.460 DEBUG c.c.m.A.queryRelation - <==        Row: 19, 78, 8, 分布式文件系统, 2017-11-06 20:51:27.0
2019-03-03 16:59:17.576 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:59:17.970 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 16:59:17.971 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:59:17.972 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:59:26.017 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:59:26.018 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:59:26.019 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:59:26.020 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:59:26.021 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:59:26.022 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:59:26.023 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:59:26.337 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 16:59:26.424 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 16:59:26.425 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 16:59:26.425 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 16:59:26.516 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 16:59:26.517 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 16:59:26.519 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 16:59:26.521 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 16:59:26.522 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 16:59:26.523 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 16:59:27.466 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 16:59:27.467 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 16:59:27.468 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 16:59:28.392 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 16:59:28.392 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 16:59:28.393 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 16:59:28.394 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 16:59:28.394 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 16:59:28.394 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 16:59:28.395 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 16:59:28.395 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 16:59:28.395 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 16:59:28.431 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 16:59:28.431 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 16:59:28.432 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 16:59:28.432 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 16:59:28.432 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 16:59:28.433 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 16:59:28.433 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 16:59:28.433 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 16:59:28.433 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 16:59:28.434 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 16:59:28.434 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 16:59:28.435 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 16:59:28.435 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 16:59:28.435 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 16:59:28.435 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 16:59:28.436 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 16:59:28.437 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 16:59:28.438 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 16:59:28.439 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 16:59:28.440 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 16:59:28.440 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 16:59:28.455 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 16:59:28.456 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:00:42.253 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["78"]}
2019-03-03 17:00:42.283 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 17:00:42.283 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-03-03 17:00:42.284 DEBUG c.c.m.A.findDetailById - ==> Parameters: 78(String)
2019-03-03 17:00:42.310 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms, htmlContent, content
2019-03-03 17:00:42.310 DEBUG c.c.m.A.findDetailById - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 8, null, 99, 1, 后端技术, <h2 id="h2-fastdfs"><a name="FastDFS" class="reference-link"></a><span class="header-link octicon octicon-link"></span>FastDFS</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。</p>
<h2 id="h2-u7B80u4ECB"><a name="简介" class="reference-link"></a><span class="header-link octicon octicon-link"></span>简介</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS服务端有两个角色：跟踪器（tracker）和存储节点（storage）。跟踪器主要做调度工作，在访问上起负载均衡的作用。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;存储节点存储文件，完成文件管理的所有功能：就是这样的存储、同步和提供存取接口，FastDFS同时对文件的metadata进行管理。所谓文件的meta data就是文件的相关属性，以键值对（key valuepair）方式表示，如：width=1024，其中的key为width，value为1024。文件metadata是文件属性列表，可以包含多个键值对。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;跟踪器和存储节点都可以由一台或多台服务器构成。跟踪器和存储节点中的服务器均可以随时增加或下线而不会影响线上服务。其中跟踪器中的所有服务器都是对等的，可以根据服务器的压力情况随时增加或减少。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了支持大容量，存储节点（服务器）采用了分卷（或分组）的组织方式。存储系统由一个或多个卷组成，卷与卷之间的文件是相互独立的，所有卷的文件容量累加就是整个存储系统中的文件容量。一个卷可以由一台或多台存储服务器组成，一个卷下的存储服务器中的文件都是相同的，卷中的多台存储服务器起到了冗余备份和负载均衡的作用。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在卷中增加服务器时，同步已有的文件由系统自动完成，同步完成后，系统自动将新增服务器切换到线上提供服务。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当存储空间不足或即将耗尽时，可以动态添加卷。只需要增加一台或多台服务器，并将它们配置为一个新的卷，这样就扩大了存储系统的容量。<br>FastDFS中的文件标识分为两个部分：卷名和文件名，二者缺一不可。<br><img src="http://www.gydblog.com:8888/group1/M00/00/00/wKgACFoAWdeAG_M4AASfYzbioyg760.png" alt=""></p>
<h2 id="h2-u4E0Au4F20u6587u4EF6u4EA4u4E92u8FC7u7A0B"><a name="上传文件交互过程" class="reference-link"></a><span class="header-link octicon octicon-link"></span>上传文件交互过程</h2><ol>
<li>client询问tracker上传到的storage，不需要附加参数；</li><li>tracker返回一台可用的storage；</li><li>client直接和storage通讯完成文件上传。<br>FastDFS file download</li></ol>
<h2 id="h2-u4E0Bu8F7Du4EA4u4E92u8FC7u7A0B"><a name="下载交互过程" class="reference-link"></a><span class="header-link octicon octicon-link"></span>下载交互过程</h2><ol>
<li>client询问tracker下载文件的storage，参数为文件标识（卷名和文件名）；</li><li>tracker返回一台可用的storage；</li><li>client直接和storage通讯完成文件下载。<br>需要说明的是，client为使用FastDFS服务的调用方，client也应该是一台服务器，它对tracker和storage的调用均为服务器间的调用。</li></ol>
, ## FastDFS
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。

## 简介
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS服务端有两个角色：跟踪器（tracker）和存储节点（storage）。跟踪器主要做调度工作，在访问上起负载均衡的作用。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;存储节点存储文件，完成文件管理的所有功能：就是这样的存储、同步和提供存取接口，FastDFS同时对文件的metadata进行管理。所谓文件的meta data就是文件的相关属性，以键值对（key valuepair）方式表示，如：width=1024，其中的key为width，value为1024。文件metadata是文件属性列表，可以包含多个键值对。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;跟踪器和存储节点都可以由一台或多台服务器构成。跟踪器和存储节点中的服务器均可以随时增加或下线而不会影响线上服务。其中跟踪器中的所有服务器都是对等的，可以根据服务器的压力情况随时增加或减少。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了支持大容量，存储节点（服务器）采用了分卷（或分组）的组织方式。存储系统由一个或多个卷组成，卷与卷之间的文件是相互独立的，所有卷的文件容量累加就是整个存储系统中的文件容量。一个卷可以由一台或多台存储服务器组成，一个卷下的存储服务器中的文件都是相同的，卷中的多台存储服务器起到了冗余备份和负载均衡的作用。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在卷中增加服务器时，同步已有的文件由系统自动完成，同步完成后，系统自动将新增服务器切换到线上提供服务。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当存储空间不足或即将耗尽时，可以动态添加卷。只需要增加一台或多台服务器，并将它们配置为一个新的卷，这样就扩大了存储系统的容量。
FastDFS中的文件标识分为两个部分：卷名和文件名，二者缺一不可。
![](http://www.gydblog.com:8888/group1/M00/00/00/wKgACFoAWdeAG_M4AASfYzbioyg760.png)

## 上传文件交互过程
1. client询问tracker上传到的storage，不需要附加参数；
2. tracker返回一台可用的storage；
3. client直接和storage通讯完成文件上传。
FastDFS file download

##下载交互过程
1. client询问tracker下载文件的storage，参数为文件标识（卷名和文件名）；
2. tracker返回一台可用的storage；
3. client直接和storage通讯完成文件下载。
需要说明的是，client为使用FastDFS服务的调用方，client也应该是一台服务器，它对tracker和storage的调用均为服务器间的调用。

2019-03-03 17:00:42.311 DEBUG c.c.m.A.queryRelation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 17:00:42.311 DEBUG c.c.m.A.queryRelation - ==>  Preparing: SELECT A.id,A.articleId,B.id keyWordId,B.name keyName,A.updatetime FROM mine_article_keyword_relation A INNER JOIN mine_keywords B ON A.keyId = B.id WHERE A.articleId=? 
2019-03-03 17:00:42.312 DEBUG c.c.m.A.queryRelation - ==> Parameters: 78(Integer)
2019-03-03 17:00:42.328 DEBUG c.c.m.A.queryRelation - <==    Columns: id, articleId, id, name, updatetime
2019-03-03 17:00:42.330 DEBUG c.c.m.A.queryRelation - <==        Row: 19, 78, 8, 分布式文件系统, 2017-11-06 20:51:27.0
2019-03-03 17:00:42.447 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:00:42.461 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 17:00:42.462 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:00:42.462 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:00:42.480 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:00:42.480 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:00:42.481 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:00:42.481 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:00:42.481 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:00:42.481 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:00:42.482 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:00:42.552 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:00:43.125 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 17:00:43.126 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:00:43.126 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:00:43.674 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:00:43.674 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 17:00:43.674 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 17:00:43.675 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 17:00:43.675 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 17:00:43.675 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 17:00:44.242 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:00:44.247 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:00:44.248 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:00:46.150 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:00:46.150 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:00:46.150 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:00:46.157 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 17:00:46.158 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:00:46.158 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:00:46.158 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:00:46.158 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:00:46.158 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:00:46.206 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:00:46.207 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:00:46.208 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:00:46.209 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:00:46.209 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:00:46.209 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:00:46.210 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:00:46.210 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:00:46.210 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:00:46.211 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:00:46.211 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:00:46.211 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:00:46.211 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:00:46.212 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:00:46.212 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:00:46.212 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:00:46.213 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:00:46.213 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:00:46.214 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:00:46.214 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:00:46.215 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:00:46.229 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:00:46.230 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:01:43.529 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["78"]}
2019-03-03 17:01:44.093 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:01:44.093 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-03-03 17:01:44.094 DEBUG c.c.m.A.findDetailById - ==> Parameters: 78(String)
2019-03-03 17:01:44.210 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms, htmlContent, content
2019-03-03 17:01:44.212 DEBUG c.c.m.A.findDetailById - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 8, null, 99, 1, 后端技术, <h2 id="h2-fastdfs"><a name="FastDFS" class="reference-link"></a><span class="header-link octicon octicon-link"></span>FastDFS</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。</p>
<h2 id="h2-u7B80u4ECB"><a name="简介" class="reference-link"></a><span class="header-link octicon octicon-link"></span>简介</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS服务端有两个角色：跟踪器（tracker）和存储节点（storage）。跟踪器主要做调度工作，在访问上起负载均衡的作用。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;存储节点存储文件，完成文件管理的所有功能：就是这样的存储、同步和提供存取接口，FastDFS同时对文件的metadata进行管理。所谓文件的meta data就是文件的相关属性，以键值对（key valuepair）方式表示，如：width=1024，其中的key为width，value为1024。文件metadata是文件属性列表，可以包含多个键值对。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;跟踪器和存储节点都可以由一台或多台服务器构成。跟踪器和存储节点中的服务器均可以随时增加或下线而不会影响线上服务。其中跟踪器中的所有服务器都是对等的，可以根据服务器的压力情况随时增加或减少。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了支持大容量，存储节点（服务器）采用了分卷（或分组）的组织方式。存储系统由一个或多个卷组成，卷与卷之间的文件是相互独立的，所有卷的文件容量累加就是整个存储系统中的文件容量。一个卷可以由一台或多台存储服务器组成，一个卷下的存储服务器中的文件都是相同的，卷中的多台存储服务器起到了冗余备份和负载均衡的作用。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在卷中增加服务器时，同步已有的文件由系统自动完成，同步完成后，系统自动将新增服务器切换到线上提供服务。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当存储空间不足或即将耗尽时，可以动态添加卷。只需要增加一台或多台服务器，并将它们配置为一个新的卷，这样就扩大了存储系统的容量。<br>FastDFS中的文件标识分为两个部分：卷名和文件名，二者缺一不可。<br><img src="http://www.gydblog.com:8888/group1/M00/00/00/wKgACFoAWdeAG_M4AASfYzbioyg760.png" alt=""></p>
<h2 id="h2-u4E0Au4F20u6587u4EF6u4EA4u4E92u8FC7u7A0B"><a name="上传文件交互过程" class="reference-link"></a><span class="header-link octicon octicon-link"></span>上传文件交互过程</h2><ol>
<li>client询问tracker上传到的storage，不需要附加参数；</li><li>tracker返回一台可用的storage；</li><li>client直接和storage通讯完成文件上传。<br>FastDFS file download</li></ol>
<h2 id="h2-u4E0Bu8F7Du4EA4u4E92u8FC7u7A0B"><a name="下载交互过程" class="reference-link"></a><span class="header-link octicon octicon-link"></span>下载交互过程</h2><ol>
<li>client询问tracker下载文件的storage，参数为文件标识（卷名和文件名）；</li><li>tracker返回一台可用的storage；</li><li>client直接和storage通讯完成文件下载。<br>需要说明的是，client为使用FastDFS服务的调用方，client也应该是一台服务器，它对tracker和storage的调用均为服务器间的调用。</li></ol>
, ## FastDFS
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。

## 简介
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS服务端有两个角色：跟踪器（tracker）和存储节点（storage）。跟踪器主要做调度工作，在访问上起负载均衡的作用。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;存储节点存储文件，完成文件管理的所有功能：就是这样的存储、同步和提供存取接口，FastDFS同时对文件的metadata进行管理。所谓文件的meta data就是文件的相关属性，以键值对（key valuepair）方式表示，如：width=1024，其中的key为width，value为1024。文件metadata是文件属性列表，可以包含多个键值对。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;跟踪器和存储节点都可以由一台或多台服务器构成。跟踪器和存储节点中的服务器均可以随时增加或下线而不会影响线上服务。其中跟踪器中的所有服务器都是对等的，可以根据服务器的压力情况随时增加或减少。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了支持大容量，存储节点（服务器）采用了分卷（或分组）的组织方式。存储系统由一个或多个卷组成，卷与卷之间的文件是相互独立的，所有卷的文件容量累加就是整个存储系统中的文件容量。一个卷可以由一台或多台存储服务器组成，一个卷下的存储服务器中的文件都是相同的，卷中的多台存储服务器起到了冗余备份和负载均衡的作用。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在卷中增加服务器时，同步已有的文件由系统自动完成，同步完成后，系统自动将新增服务器切换到线上提供服务。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当存储空间不足或即将耗尽时，可以动态添加卷。只需要增加一台或多台服务器，并将它们配置为一个新的卷，这样就扩大了存储系统的容量。
FastDFS中的文件标识分为两个部分：卷名和文件名，二者缺一不可。
![](http://www.gydblog.com:8888/group1/M00/00/00/wKgACFoAWdeAG_M4AASfYzbioyg760.png)

## 上传文件交互过程
1. client询问tracker上传到的storage，不需要附加参数；
2. tracker返回一台可用的storage；
3. client直接和storage通讯完成文件上传。
FastDFS file download

##下载交互过程
1. client询问tracker下载文件的storage，参数为文件标识（卷名和文件名）；
2. tracker返回一台可用的storage；
3. client直接和storage通讯完成文件下载。
需要说明的是，client为使用FastDFS服务的调用方，client也应该是一台服务器，它对tracker和storage的调用均为服务器间的调用。

2019-03-03 17:01:44.215 DEBUG c.c.m.A.queryRelation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:01:44.217 DEBUG c.c.m.A.queryRelation - ==>  Preparing: SELECT A.id,A.articleId,B.id keyWordId,B.name keyName,A.updatetime FROM mine_article_keyword_relation A INNER JOIN mine_keywords B ON A.keyId = B.id WHERE A.articleId=? 
2019-03-03 17:01:44.217 DEBUG c.c.m.A.queryRelation - ==> Parameters: 78(Integer)
2019-03-03 17:01:44.241 DEBUG c.c.m.A.queryRelation - <==    Columns: id, articleId, id, name, updatetime
2019-03-03 17:01:44.242 DEBUG c.c.m.A.queryRelation - <==        Row: 19, 78, 8, 分布式文件系统, 2017-11-06 20:51:27.0
2019-03-03 17:01:44.527 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:01:44.905 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:01:44.906 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:01:44.906 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:01:44.973 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:01:44.975 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:01:44.976 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:01:44.976 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:01:44.976 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:01:44.977 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:01:44.977 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:01:45.070 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:01:45.087 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:01:45.087 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:01:45.087 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:01:45.113 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:01:45.113 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 17:01:45.114 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 17:01:45.114 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 17:01:45.114 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 17:01:45.115 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 17:01:45.139 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:01:45.146 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:01:45.146 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:01:45.160 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:01:45.160 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:01:45.160 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:01:45.161 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:01:45.161 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:01:45.161 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:01:45.163 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 17:01:45.164 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:01:45.165 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:01:45.172 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:01:45.174 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:01:45.175 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:01:45.175 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:01:45.175 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:01:45.176 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:01:45.176 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:01:45.177 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:01:45.177 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:01:45.178 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:01:45.178 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:01:45.179 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:01:45.179 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:01:45.179 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:01:45.179 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:01:45.180 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:01:45.181 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:01:45.181 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:01:45.182 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 17:01:45.182 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:01:45.183 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:01:45.199 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:01:45.200 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:03:34.738 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["78"]}
2019-03-03 17:03:34.775 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 17:03:34.776 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-03-03 17:03:34.777 DEBUG c.c.m.A.findDetailById - ==> Parameters: 78(String)
2019-03-03 17:03:34.825 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms, htmlContent, content
2019-03-03 17:03:34.825 DEBUG c.c.m.A.findDetailById - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 8, null, 99, 1, 后端技术, <h2 id="h2-fastdfs"><a name="FastDFS" class="reference-link"></a><span class="header-link octicon octicon-link"></span>FastDFS</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。</p>
<h2 id="h2-u7B80u4ECB"><a name="简介" class="reference-link"></a><span class="header-link octicon octicon-link"></span>简介</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS服务端有两个角色：跟踪器（tracker）和存储节点（storage）。跟踪器主要做调度工作，在访问上起负载均衡的作用。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;存储节点存储文件，完成文件管理的所有功能：就是这样的存储、同步和提供存取接口，FastDFS同时对文件的metadata进行管理。所谓文件的meta data就是文件的相关属性，以键值对（key valuepair）方式表示，如：width=1024，其中的key为width，value为1024。文件metadata是文件属性列表，可以包含多个键值对。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;跟踪器和存储节点都可以由一台或多台服务器构成。跟踪器和存储节点中的服务器均可以随时增加或下线而不会影响线上服务。其中跟踪器中的所有服务器都是对等的，可以根据服务器的压力情况随时增加或减少。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了支持大容量，存储节点（服务器）采用了分卷（或分组）的组织方式。存储系统由一个或多个卷组成，卷与卷之间的文件是相互独立的，所有卷的文件容量累加就是整个存储系统中的文件容量。一个卷可以由一台或多台存储服务器组成，一个卷下的存储服务器中的文件都是相同的，卷中的多台存储服务器起到了冗余备份和负载均衡的作用。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在卷中增加服务器时，同步已有的文件由系统自动完成，同步完成后，系统自动将新增服务器切换到线上提供服务。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当存储空间不足或即将耗尽时，可以动态添加卷。只需要增加一台或多台服务器，并将它们配置为一个新的卷，这样就扩大了存储系统的容量。<br>FastDFS中的文件标识分为两个部分：卷名和文件名，二者缺一不可。<br><img src="http://www.gydblog.com:8888/group1/M00/00/00/wKgACFoAWdeAG_M4AASfYzbioyg760.png" alt=""></p>
<h2 id="h2-u4E0Au4F20u6587u4EF6u4EA4u4E92u8FC7u7A0B"><a name="上传文件交互过程" class="reference-link"></a><span class="header-link octicon octicon-link"></span>上传文件交互过程</h2><ol>
<li>client询问tracker上传到的storage，不需要附加参数；</li><li>tracker返回一台可用的storage；</li><li>client直接和storage通讯完成文件上传。<br>FastDFS file download</li></ol>
<h2 id="h2-u4E0Bu8F7Du4EA4u4E92u8FC7u7A0B"><a name="下载交互过程" class="reference-link"></a><span class="header-link octicon octicon-link"></span>下载交互过程</h2><ol>
<li>client询问tracker下载文件的storage，参数为文件标识（卷名和文件名）；</li><li>tracker返回一台可用的storage；</li><li>client直接和storage通讯完成文件下载。<br>需要说明的是，client为使用FastDFS服务的调用方，client也应该是一台服务器，它对tracker和storage的调用均为服务器间的调用。</li></ol>
, ## FastDFS
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。

## 简介
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FastDFS服务端有两个角色：跟踪器（tracker）和存储节点（storage）。跟踪器主要做调度工作，在访问上起负载均衡的作用。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;存储节点存储文件，完成文件管理的所有功能：就是这样的存储、同步和提供存取接口，FastDFS同时对文件的metadata进行管理。所谓文件的meta data就是文件的相关属性，以键值对（key valuepair）方式表示，如：width=1024，其中的key为width，value为1024。文件metadata是文件属性列表，可以包含多个键值对。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;跟踪器和存储节点都可以由一台或多台服务器构成。跟踪器和存储节点中的服务器均可以随时增加或下线而不会影响线上服务。其中跟踪器中的所有服务器都是对等的，可以根据服务器的压力情况随时增加或减少。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了支持大容量，存储节点（服务器）采用了分卷（或分组）的组织方式。存储系统由一个或多个卷组成，卷与卷之间的文件是相互独立的，所有卷的文件容量累加就是整个存储系统中的文件容量。一个卷可以由一台或多台存储服务器组成，一个卷下的存储服务器中的文件都是相同的，卷中的多台存储服务器起到了冗余备份和负载均衡的作用。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在卷中增加服务器时，同步已有的文件由系统自动完成，同步完成后，系统自动将新增服务器切换到线上提供服务。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当存储空间不足或即将耗尽时，可以动态添加卷。只需要增加一台或多台服务器，并将它们配置为一个新的卷，这样就扩大了存储系统的容量。
FastDFS中的文件标识分为两个部分：卷名和文件名，二者缺一不可。
![](http://www.gydblog.com:8888/group1/M00/00/00/wKgACFoAWdeAG_M4AASfYzbioyg760.png)

## 上传文件交互过程
1. client询问tracker上传到的storage，不需要附加参数；
2. tracker返回一台可用的storage；
3. client直接和storage通讯完成文件上传。
FastDFS file download

##下载交互过程
1. client询问tracker下载文件的storage，参数为文件标识（卷名和文件名）；
2. tracker返回一台可用的storage；
3. client直接和storage通讯完成文件下载。
需要说明的是，client为使用FastDFS服务的调用方，client也应该是一台服务器，它对tracker和storage的调用均为服务器间的调用。

2019-03-03 17:03:34.826 DEBUG c.c.m.A.queryRelation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 17:03:34.827 DEBUG c.c.m.A.queryRelation - ==>  Preparing: SELECT A.id,A.articleId,B.id keyWordId,B.name keyName,A.updatetime FROM mine_article_keyword_relation A INNER JOIN mine_keywords B ON A.keyId = B.id WHERE A.articleId=? 
2019-03-03 17:03:34.827 DEBUG c.c.m.A.queryRelation - ==> Parameters: 78(Integer)
2019-03-03 17:03:34.839 DEBUG c.c.m.A.queryRelation - <==    Columns: id, articleId, id, name, updatetime
2019-03-03 17:03:34.840 DEBUG c.c.m.A.queryRelation - <==        Row: 19, 78, 8, 分布式文件系统, 2017-11-06 20:51:27.0
2019-03-03 17:03:35.098 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:03:35.130 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 17:03:35.130 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:03:35.131 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:03:35.151 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:03:35.152 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:03:35.152 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:03:35.153 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:03:35.154 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:03:35.154 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:03:35.155 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:03:35.186 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:03:35.208 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 17:03:35.209 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:03:35.209 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:03:35.250 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:03:35.251 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 17:03:35.251 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 17:03:35.252 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 17:03:35.252 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 17:03:35.253 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 17:03:35.307 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:03:35.314 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:03:35.319 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:03:35.331 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:03:35.332 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:03:35.332 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:03:35.334 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 17:03:35.334 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:03:35.335 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:03:35.336 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:03:35.336 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:03:35.337 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:03:35.345 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:03:35.346 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:03:35.348 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:03:35.349 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:03:35.349 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:03:35.349 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:03:35.350 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:03:35.350 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:03:35.351 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:03:35.351 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:03:35.352 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:03:35.352 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:03:35.353 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:03:35.353 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:03:35.354 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:03:35.354 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:03:35.355 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:03:35.356 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:03:35.356 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:03:35.357 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:03:35.358 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:03:35.378 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:03:35.379 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:06:59.756 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:06:59.802 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:06:59.803 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:06:59.803 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:06:59.816 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:06:59.817 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:06:59.818 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:06:59.819 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:06:59.819 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:06:59.819 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:06:59.819 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:06:59.851 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:06:59.872 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:06:59.872 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:06:59.872 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:06:59.897 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:06:59.897 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 17:06:59.897 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 17:06:59.898 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 17:06:59.898 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 17:06:59.898 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 17:06:59.922 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:06:59.927 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:06:59.929 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:06:59.929 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:06:59.935 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_LATEST_ARTICLE","params":[10]}
2019-03-03 17:06:59.950 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:06:59.951 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:06:59.951 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:07:00.028 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:07:00.028 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 17:07:00.028 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:07:00.029 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:07:00.029 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:07:00.029 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:07:00.030 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:07:00.030 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:07:00.031 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:07:00.031 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:07:00.034 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:07:00.035 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:07:00.036 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:07:00.086 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:07:00.086 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:07:00.087 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:07:00.087 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:07:00.088 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:07:00.089 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:07:00.089 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 17:07:00.089 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:07:00.090 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:07:00.090 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:07:00.092 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:07:00.092 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:07:00.093 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:07:00.094 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:07:00.315 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:07:00.316 DEBUG c.c.m.A.findLatestArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:07:00.316 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:07:00.317 DEBUG c.c.m.A.findLatestArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC LIMIT ? 
2019-03-03 17:07:00.318 DEBUG c.c.m.A.findLatestArticle - ==> Parameters: 10(Integer)
2019-03-03 17:07:00.485 DEBUG c.c.m.A.findLatestArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:07:00.485 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:07:00.486 DEBUG c.c.m.A.findLatestArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 17:07:00.486 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:07:00.487 DEBUG c.c.m.A.findLatestArticle - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 17:07:00.487 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:07:00.487 DEBUG c.c.m.A.findLatestArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 17:07:00.488 DEBUG c.c.m.A.findLatestArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 17:07:00.489 DEBUG c.c.m.A.findLatestArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 8, null, 99, 1, 后端技术
2019-03-03 17:07:00.489 DEBUG c.c.m.A.findLatestArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 11, 4, 数据库
2019-03-03 17:07:00.490 DEBUG c.c.m.A.findLatestArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 17:07:00.534 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:07:00.536 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:07:00.538 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:07:00.540 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:07:00.541 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:07:00.542 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:07:00.543 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:07:00.571 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:07:00.584 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:07:00.585 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:07:00.585 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:07:00.643 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:07:00.643 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:07:00.644 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:07:00.644 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:07:00.644 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:07:00.644 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:07:00.645 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:07:00.675 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null,null]}
2019-03-03 17:07:00.692 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:07:00.693 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-03-03 17:07:00.693 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-03-03 17:07:00.787 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:07:00.788 DEBUG c.c.m.A.findArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 17:07:00.788 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 17:07:00.789 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 17:07:00.789 DEBUG c.c.m.A.findArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 17:07:00.789 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 8, null, 99, 1, 后端技术
2019-03-03 17:07:00.789 DEBUG c.c.m.A.findArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 11, 4, 数据库
2019-03-03 17:07:00.789 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 17:07:03.392 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["36"]}
2019-03-03 17:07:03.509 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:07:03.509 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-03-03 17:07:03.510 DEBUG c.c.m.A.findDetailById - ==> Parameters: 36(String)
2019-03-03 17:07:03.565 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms, htmlContent, content
2019-03-03 17:07:03.565 DEBUG c.c.m.A.findDetailById - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端, <h2 id="h2-u524Du8A00"><a name="前言" class="reference-link"></a><span class="header-link octicon octicon-link"></span>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过”服务器主机IP:应用端口”的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名-&gt;备案-&gt;做IP解析、端口转发的过程。</p>
<h6 id="h6--"><a name="一、申请域名以及实名认证" class="reference-link"></a><span class="header-link octicon octicon-link"></span>一、申请域名以及实名认证</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳<a href="https://cloud.baidu.com/product/bcd/search.html" title="域名申请地址">域名申请地址</a>。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。</p>
<h6 id="h6--"><a name="二、工信部备案" class="reference-link"></a><span class="header-link octicon octicon-link"></span>二、工信部备案</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳<a href="http://beian.bce.baidu.com/" title="百度云备案系统">百度云备案系统</a>，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。</p>
<h6 id="h6--"><a name="三、域名解析、端口转发" class="reference-link"></a><span class="header-link octicon octicon-link"></span>三、域名解析、端口转发</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。</p>
<h6 id="h6--"><a name="四、通过域名进行网站访问" class="reference-link"></a><span class="header-link octicon octicon-link"></span>四、通过域名进行网站访问</h6><p>完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。</p>
, ## 前言
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过"服务器主机IP:应用端口"的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名->备案->做IP解析、端口转发的过程。

###### 一、申请域名以及实名认证
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳[域名申请地址](https://cloud.baidu.com/product/bcd/search.html "域名申请地址")。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。

###### 二、工信部备案
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳[百度云备案系统](http://beian.bce.baidu.com/ "百度云备案系统")，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。

###### 三、域名解析、端口转发
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。

###### 四、通过域名进行网站访问
完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。



2019-03-03 17:07:03.567 DEBUG c.c.m.A.queryRelation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:07:03.567 DEBUG c.c.m.A.queryRelation - ==>  Preparing: SELECT A.id,A.articleId,B.id keyWordId,B.name keyName,A.updatetime FROM mine_article_keyword_relation A INNER JOIN mine_keywords B ON A.keyId = B.id WHERE A.articleId=? 
2019-03-03 17:07:03.567 DEBUG c.c.m.A.queryRelation - ==> Parameters: 36(Integer)
2019-03-03 17:07:03.684 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:07:03.695 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:07:03.695 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:07:03.695 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:07:03.714 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:07:03.714 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:07:03.715 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:07:03.715 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:07:03.715 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:07:03.716 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:07:03.716 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:07:04.111 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:07:04.569 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:07:04.570 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:07:04.571 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:07:04.769 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:07:04.770 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 55, 2, 网站前端
2019-03-03 17:07:04.772 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 17:07:04.772 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 17:07:04.772 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 17:07:04.772 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 17:07:04.967 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:07:04.970 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:07:04.973 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:07:04.992 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:07:04.992 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2951c002]
2019-03-03 17:07:04.992 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:07:04.993 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:07:04.993 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:07:04.993 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:07:04.993 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:07:04.994 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:07:04.994 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:07:05.004 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:07:05.005 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:07:05.005 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2951c002]
2019-03-03 17:07:05.005 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:07:05.006 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:07:05.006 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:07:05.007 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:07:05.007 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:07:05.007 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:07:05.008 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:07:05.008 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:07:05.008 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:07:05.010 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:07:05.011 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:07:05.011 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:07:05.011 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:07:05.011 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:07:05.012 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:07:05.012 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:07:05.012 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:07:05.012 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:07:05.013 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:07:05.013 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:07:06.395 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_PRAISE","params":[36]}
2019-03-03 17:07:06.408 DEBUG c.c.m.A.updateArticlePraiseCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:07:06.408 DEBUG c.c.m.A.updateArticlePraiseCount - ==>  Preparing: UPDATE mine_articles SET praisecount = praisecount+1 WHERE id=? 
2019-03-03 17:07:06.408 DEBUG c.c.m.A.updateArticlePraiseCount - ==> Parameters: 36(Integer)
2019-03-03 17:07:31.253 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["36"]}
2019-03-03 17:07:31.272 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:07:31.272 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-03-03 17:07:31.272 DEBUG c.c.m.A.findDetailById - ==> Parameters: 36(String)
2019-03-03 17:07:31.332 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms, htmlContent, content
2019-03-03 17:07:31.332 DEBUG c.c.m.A.findDetailById - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 56, 2, 网站前端, <h2 id="h2-u524Du8A00"><a name="前言" class="reference-link"></a><span class="header-link octicon octicon-link"></span>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过”服务器主机IP:应用端口”的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名-&gt;备案-&gt;做IP解析、端口转发的过程。</p>
<h6 id="h6--"><a name="一、申请域名以及实名认证" class="reference-link"></a><span class="header-link octicon octicon-link"></span>一、申请域名以及实名认证</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳<a href="https://cloud.baidu.com/product/bcd/search.html" title="域名申请地址">域名申请地址</a>。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。</p>
<h6 id="h6--"><a name="二、工信部备案" class="reference-link"></a><span class="header-link octicon octicon-link"></span>二、工信部备案</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳<a href="http://beian.bce.baidu.com/" title="百度云备案系统">百度云备案系统</a>，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。</p>
<h6 id="h6--"><a name="三、域名解析、端口转发" class="reference-link"></a><span class="header-link octicon octicon-link"></span>三、域名解析、端口转发</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。</p>
<h6 id="h6--"><a name="四、通过域名进行网站访问" class="reference-link"></a><span class="header-link octicon octicon-link"></span>四、通过域名进行网站访问</h6><p>完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。</p>
, ## 前言
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过"服务器主机IP:应用端口"的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名->备案->做IP解析、端口转发的过程。

###### 一、申请域名以及实名认证
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳[域名申请地址](https://cloud.baidu.com/product/bcd/search.html "域名申请地址")。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。

###### 二、工信部备案
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳[百度云备案系统](http://beian.bce.baidu.com/ "百度云备案系统")，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。

###### 三、域名解析、端口转发
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。

###### 四、通过域名进行网站访问
完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。



2019-03-03 17:07:31.334 DEBUG c.c.m.A.queryRelation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:07:31.335 DEBUG c.c.m.A.queryRelation - ==>  Preparing: SELECT A.id,A.articleId,B.id keyWordId,B.name keyName,A.updatetime FROM mine_article_keyword_relation A INNER JOIN mine_keywords B ON A.keyId = B.id WHERE A.articleId=? 
2019-03-03 17:07:31.335 DEBUG c.c.m.A.queryRelation - ==> Parameters: 36(Integer)
2019-03-03 17:07:31.459 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:07:31.486 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:07:31.487 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:07:31.487 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:07:31.501 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:07:31.502 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:07:31.503 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:07:31.503 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:07:31.503 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:07:31.504 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:07:31.504 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:07:31.531 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:07:31.552 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:07:31.552 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:07:31.552 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:07:31.572 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:07:31.572 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 56, 2, 网站前端
2019-03-03 17:07:31.573 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 17:07:31.573 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 17:07:31.573 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 17:07:31.573 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 17:07:31.599 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:07:31.606 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:07:31.606 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:07:31.619 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2951c002]
2019-03-03 17:07:31.619 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:07:31.619 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:07:31.620 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:07:31.620 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:07:31.620 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:07:31.621 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:07:31.621 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:07:31.621 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:07:31.631 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:07:31.632 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:07:31.633 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:07:31.633 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:07:31.633 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:07:31.635 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:07:31.636 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:07:31.636 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:07:31.637 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:07:31.637 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:07:31.637 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:07:31.638 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:07:31.638 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:07:31.638 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:07:31.639 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:07:31.639 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:07:31.640 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:07:31.640 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:07:31.641 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:07:31.641 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:07:31.642 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:07:31.651 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:07:31.653 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:07:33.411 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_PRAISE","params":[36]}
2019-03-03 17:07:34.767 DEBUG c.c.m.A.updateArticlePraiseCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:07:34.768 DEBUG c.c.m.A.updateArticlePraiseCount - ==>  Preparing: UPDATE mine_articles SET praisecount = praisecount+1 WHERE id=? 
2019-03-03 17:07:34.769 DEBUG c.c.m.A.updateArticlePraiseCount - ==> Parameters: 36(Integer)
2019-03-03 17:07:39.485 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["36"]}
2019-03-03 17:07:39.536 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:07:39.537 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-03-03 17:07:39.537 DEBUG c.c.m.A.findDetailById - ==> Parameters: 36(String)
2019-03-03 17:07:39.660 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms, htmlContent, content
2019-03-03 17:07:39.660 DEBUG c.c.m.A.findDetailById - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 57, 2, 网站前端, <h2 id="h2-u524Du8A00"><a name="前言" class="reference-link"></a><span class="header-link octicon octicon-link"></span>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过”服务器主机IP:应用端口”的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名-&gt;备案-&gt;做IP解析、端口转发的过程。</p>
<h6 id="h6--"><a name="一、申请域名以及实名认证" class="reference-link"></a><span class="header-link octicon octicon-link"></span>一、申请域名以及实名认证</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳<a href="https://cloud.baidu.com/product/bcd/search.html" title="域名申请地址">域名申请地址</a>。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。</p>
<h6 id="h6--"><a name="二、工信部备案" class="reference-link"></a><span class="header-link octicon octicon-link"></span>二、工信部备案</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳<a href="http://beian.bce.baidu.com/" title="百度云备案系统">百度云备案系统</a>，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。</p>
<h6 id="h6--"><a name="三、域名解析、端口转发" class="reference-link"></a><span class="header-link octicon octicon-link"></span>三、域名解析、端口转发</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。</p>
<h6 id="h6--"><a name="四、通过域名进行网站访问" class="reference-link"></a><span class="header-link octicon octicon-link"></span>四、通过域名进行网站访问</h6><p>完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。</p>
, ## 前言
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过"服务器主机IP:应用端口"的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名->备案->做IP解析、端口转发的过程。

###### 一、申请域名以及实名认证
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳[域名申请地址](https://cloud.baidu.com/product/bcd/search.html "域名申请地址")。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。

###### 二、工信部备案
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳[百度云备案系统](http://beian.bce.baidu.com/ "百度云备案系统")，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。

###### 三、域名解析、端口转发
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。

###### 四、通过域名进行网站访问
完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。



2019-03-03 17:07:39.661 DEBUG c.c.m.A.queryRelation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:07:39.661 DEBUG c.c.m.A.queryRelation - ==>  Preparing: SELECT A.id,A.articleId,B.id keyWordId,B.name keyName,A.updatetime FROM mine_article_keyword_relation A INNER JOIN mine_keywords B ON A.keyId = B.id WHERE A.articleId=? 
2019-03-03 17:07:39.661 DEBUG c.c.m.A.queryRelation - ==> Parameters: 36(Integer)
2019-03-03 17:07:39.822 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:07:39.854 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:07:39.855 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:07:39.855 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:07:39.922 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:07:39.922 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:07:39.922 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:07:39.923 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:07:39.923 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:07:39.923 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:07:39.923 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:07:39.950 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:07:39.963 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:07:39.963 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:07:39.963 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:07:39.992 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:07:39.993 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 57, 2, 网站前端
2019-03-03 17:07:39.993 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 17:07:39.993 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 17:07:39.993 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 17:07:39.994 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 17:07:40.025 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:07:40.028 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:07:40.031 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:07:40.042 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:07:40.042 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2951c002]
2019-03-03 17:07:40.042 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:07:40.043 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:07:40.043 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:07:40.043 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:07:40.045 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:07:40.047 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:07:40.047 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:07:40.069 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:07:40.069 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:07:40.069 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:07:40.069 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:07:40.070 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:07:40.070 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:07:40.071 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:07:40.071 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:07:40.071 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:07:40.072 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:07:40.072 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:07:40.073 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:07:40.073 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:07:40.074 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:07:40.074 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:07:40.075 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:07:40.075 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:07:40.076 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:07:40.076 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:07:40.077 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:07:40.078 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:07:40.095 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:07:40.095 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:07:41.405 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_PRAISE","params":[36]}
2019-03-03 17:07:41.614 DEBUG c.c.m.A.updateArticlePraiseCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:07:41.615 DEBUG c.c.m.A.updateArticlePraiseCount - ==>  Preparing: UPDATE mine_articles SET praisecount = praisecount+1 WHERE id=? 
2019-03-03 17:07:41.615 DEBUG c.c.m.A.updateArticlePraiseCount - ==> Parameters: 36(Integer)
2019-03-03 17:07:55.553 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["36"]}
2019-03-03 17:07:55.655 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:07:55.655 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-03-03 17:07:55.656 DEBUG c.c.m.A.findDetailById - ==> Parameters: 36(String)
2019-03-03 17:07:55.805 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms, htmlContent, content
2019-03-03 17:07:55.806 DEBUG c.c.m.A.findDetailById - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 58, 2, 网站前端, <h2 id="h2-u524Du8A00"><a name="前言" class="reference-link"></a><span class="header-link octicon octicon-link"></span>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过”服务器主机IP:应用端口”的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名-&gt;备案-&gt;做IP解析、端口转发的过程。</p>
<h6 id="h6--"><a name="一、申请域名以及实名认证" class="reference-link"></a><span class="header-link octicon octicon-link"></span>一、申请域名以及实名认证</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳<a href="https://cloud.baidu.com/product/bcd/search.html" title="域名申请地址">域名申请地址</a>。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。</p>
<h6 id="h6--"><a name="二、工信部备案" class="reference-link"></a><span class="header-link octicon octicon-link"></span>二、工信部备案</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳<a href="http://beian.bce.baidu.com/" title="百度云备案系统">百度云备案系统</a>，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。</p>
<h6 id="h6--"><a name="三、域名解析、端口转发" class="reference-link"></a><span class="header-link octicon octicon-link"></span>三、域名解析、端口转发</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。</p>
<h6 id="h6--"><a name="四、通过域名进行网站访问" class="reference-link"></a><span class="header-link octicon octicon-link"></span>四、通过域名进行网站访问</h6><p>完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。</p>
, ## 前言
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过"服务器主机IP:应用端口"的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名->备案->做IP解析、端口转发的过程。

###### 一、申请域名以及实名认证
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳[域名申请地址](https://cloud.baidu.com/product/bcd/search.html "域名申请地址")。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。

###### 二、工信部备案
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳[百度云备案系统](http://beian.bce.baidu.com/ "百度云备案系统")，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。

###### 三、域名解析、端口转发
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。

###### 四、通过域名进行网站访问
完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。



2019-03-03 17:07:55.807 DEBUG c.c.m.A.queryRelation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:07:55.807 DEBUG c.c.m.A.queryRelation - ==>  Preparing: SELECT A.id,A.articleId,B.id keyWordId,B.name keyName,A.updatetime FROM mine_article_keyword_relation A INNER JOIN mine_keywords B ON A.keyId = B.id WHERE A.articleId=? 
2019-03-03 17:07:55.808 DEBUG c.c.m.A.queryRelation - ==> Parameters: 36(Integer)
2019-03-03 17:07:55.908 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:07:55.921 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:07:55.921 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:07:55.922 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:07:55.943 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:07:55.943 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:07:55.944 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:07:55.944 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:07:55.944 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:07:55.944 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:07:55.945 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:07:55.972 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:07:55.996 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:07:55.996 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:07:55.996 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:07:56.127 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:07:56.127 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 58, 2, 网站前端
2019-03-03 17:07:56.128 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 17:07:56.128 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 17:07:56.128 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 17:07:56.129 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 17:07:56.286 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:07:56.287 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:07:56.289 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:07:56.469 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:07:56.469 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2951c002]
2019-03-03 17:07:56.469 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:07:56.469 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:07:56.470 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:07:56.470 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:07:56.471 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:07:56.471 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:07:56.471 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:07:56.486 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:07:56.487 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:07:56.487 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:07:56.487 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:07:56.488 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:07:56.488 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:07:56.488 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:07:56.489 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:07:56.489 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:07:56.490 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:07:56.490 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:07:56.490 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:07:56.490 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:07:56.490 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:07:56.491 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:07:56.491 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:07:56.492 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:07:56.492 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:07:56.492 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:07:56.493 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:07:56.493 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:07:56.511 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:07:56.511 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:07:58.849 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_PRAISE","params":[36]}
2019-03-03 17:07:58.908 DEBUG c.c.m.A.updateArticlePraiseCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:07:58.908 DEBUG c.c.m.A.updateArticlePraiseCount - ==>  Preparing: UPDATE mine_articles SET praisecount = praisecount+1 WHERE id=? 
2019-03-03 17:07:58.908 DEBUG c.c.m.A.updateArticlePraiseCount - ==> Parameters: 36(Integer)
2019-03-03 17:08:03.566 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["36"]}
2019-03-03 17:08:05.056 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:08:05.056 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-03-03 17:08:05.056 DEBUG c.c.m.A.findDetailById - ==> Parameters: 36(String)
2019-03-03 17:08:05.458 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms, htmlContent, content
2019-03-03 17:08:05.458 DEBUG c.c.m.A.findDetailById - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 59, 2, 网站前端, <h2 id="h2-u524Du8A00"><a name="前言" class="reference-link"></a><span class="header-link octicon octicon-link"></span>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过”服务器主机IP:应用端口”的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名-&gt;备案-&gt;做IP解析、端口转发的过程。</p>
<h6 id="h6--"><a name="一、申请域名以及实名认证" class="reference-link"></a><span class="header-link octicon octicon-link"></span>一、申请域名以及实名认证</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳<a href="https://cloud.baidu.com/product/bcd/search.html" title="域名申请地址">域名申请地址</a>。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。</p>
<h6 id="h6--"><a name="二、工信部备案" class="reference-link"></a><span class="header-link octicon octicon-link"></span>二、工信部备案</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳<a href="http://beian.bce.baidu.com/" title="百度云备案系统">百度云备案系统</a>，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。</p>
<h6 id="h6--"><a name="三、域名解析、端口转发" class="reference-link"></a><span class="header-link octicon octicon-link"></span>三、域名解析、端口转发</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。</p>
<h6 id="h6--"><a name="四、通过域名进行网站访问" class="reference-link"></a><span class="header-link octicon octicon-link"></span>四、通过域名进行网站访问</h6><p>完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。</p>
, ## 前言
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过"服务器主机IP:应用端口"的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名->备案->做IP解析、端口转发的过程。

###### 一、申请域名以及实名认证
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳[域名申请地址](https://cloud.baidu.com/product/bcd/search.html "域名申请地址")。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。

###### 二、工信部备案
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳[百度云备案系统](http://beian.bce.baidu.com/ "百度云备案系统")，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。

###### 三、域名解析、端口转发
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。

###### 四、通过域名进行网站访问
完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。



2019-03-03 17:08:05.459 DEBUG c.c.m.A.queryRelation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:08:05.459 DEBUG c.c.m.A.queryRelation - ==>  Preparing: SELECT A.id,A.articleId,B.id keyWordId,B.name keyName,A.updatetime FROM mine_article_keyword_relation A INNER JOIN mine_keywords B ON A.keyId = B.id WHERE A.articleId=? 
2019-03-03 17:08:05.459 DEBUG c.c.m.A.queryRelation - ==> Parameters: 36(Integer)
2019-03-03 17:08:05.570 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:08:05.583 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:08:05.584 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:08:05.585 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:08:05.600 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:08:05.601 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:08:05.602 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:08:05.602 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:08:05.602 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:08:05.603 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:08:05.603 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:08:05.648 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:08:05.684 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:08:05.684 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:08:05.684 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:08:05.709 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:08:05.709 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 59, 2, 网站前端
2019-03-03 17:08:05.710 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 17:08:05.710 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 17:08:05.710 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 17:08:05.710 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 17:08:05.748 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:08:05.755 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:08:05.756 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:08:05.787 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:08:05.787 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2951c002]
2019-03-03 17:08:05.787 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:08:05.788 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:08:05.788 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:08:05.788 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:08:05.788 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:08:05.789 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:08:05.789 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:08:05.936 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:08:05.937 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:08:05.937 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:08:05.937 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:08:05.937 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:08:05.938 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:08:05.938 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:08:05.939 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:08:05.939 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:08:05.939 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:08:05.939 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:08:05.939 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:08:05.939 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:08:05.940 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:08:05.940 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:08:05.940 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:08:05.940 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:08:05.940 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:08:05.941 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:08:05.941 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:08:05.942 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:08:06.129 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:08:06.130 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:08:40.814 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["36"]}
2019-03-03 17:08:40.826 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:08:40.826 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-03-03 17:08:40.826 DEBUG c.c.m.A.findDetailById - ==> Parameters: 36(String)
2019-03-03 17:08:40.843 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms, htmlContent, content
2019-03-03 17:08:40.843 DEBUG c.c.m.A.findDetailById - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 59, 2, 网站前端, <h2 id="h2-u524Du8A00"><a name="前言" class="reference-link"></a><span class="header-link octicon octicon-link"></span>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过”服务器主机IP:应用端口”的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名-&gt;备案-&gt;做IP解析、端口转发的过程。</p>
<h6 id="h6--"><a name="一、申请域名以及实名认证" class="reference-link"></a><span class="header-link octicon octicon-link"></span>一、申请域名以及实名认证</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳<a href="https://cloud.baidu.com/product/bcd/search.html" title="域名申请地址">域名申请地址</a>。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。</p>
<h6 id="h6--"><a name="二、工信部备案" class="reference-link"></a><span class="header-link octicon octicon-link"></span>二、工信部备案</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳<a href="http://beian.bce.baidu.com/" title="百度云备案系统">百度云备案系统</a>，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。</p>
<h6 id="h6--"><a name="三、域名解析、端口转发" class="reference-link"></a><span class="header-link octicon octicon-link"></span>三、域名解析、端口转发</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。</p>
<h6 id="h6--"><a name="四、通过域名进行网站访问" class="reference-link"></a><span class="header-link octicon octicon-link"></span>四、通过域名进行网站访问</h6><p>完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。</p>
, ## 前言
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过"服务器主机IP:应用端口"的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名->备案->做IP解析、端口转发的过程。

###### 一、申请域名以及实名认证
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳[域名申请地址](https://cloud.baidu.com/product/bcd/search.html "域名申请地址")。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。

###### 二、工信部备案
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳[百度云备案系统](http://beian.bce.baidu.com/ "百度云备案系统")，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。

###### 三、域名解析、端口转发
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。

###### 四、通过域名进行网站访问
完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。



2019-03-03 17:08:40.844 DEBUG c.c.m.A.queryRelation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:08:40.844 DEBUG c.c.m.A.queryRelation - ==>  Preparing: SELECT A.id,A.articleId,B.id keyWordId,B.name keyName,A.updatetime FROM mine_article_keyword_relation A INNER JOIN mine_keywords B ON A.keyId = B.id WHERE A.articleId=? 
2019-03-03 17:08:40.845 DEBUG c.c.m.A.queryRelation - ==> Parameters: 36(Integer)
2019-03-03 17:08:40.955 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:08:40.966 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:08:40.967 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:08:40.967 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:08:41.024 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:08:41.025 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:08:41.025 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:08:41.025 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:08:41.025 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:08:41.026 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:08:41.026 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:08:41.094 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:08:41.126 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:08:41.127 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:08:41.127 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:08:41.306 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:08:41.306 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 59, 2, 网站前端
2019-03-03 17:08:41.306 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 17:08:41.307 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 17:08:41.307 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 17:08:41.307 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 17:08:41.403 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:08:41.410 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:08:41.410 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:08:41.543 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:08:41.543 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:08:41.543 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2951c002]
2019-03-03 17:08:41.543 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:08:41.543 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:08:41.543 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:08:41.544 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:08:41.544 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:08:41.544 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:08:41.556 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:08:41.556 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:08:41.557 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2951c002]
2019-03-03 17:08:41.557 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:08:41.557 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:08:41.561 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:08:41.561 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:08:41.561 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:08:41.561 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:08:41.562 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:08:41.562 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:08:41.562 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:08:41.562 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:08:41.562 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:08:41.563 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:08:41.563 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:08:41.563 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:08:41.563 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:08:41.563 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:08:41.563 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:08:41.564 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:08:41.564 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:08:41.564 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:08:43.819 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_PRAISE","params":[36]}
2019-03-03 17:08:43.901 DEBUG c.c.m.A.updateArticlePraiseCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:08:43.902 DEBUG c.c.m.A.updateArticlePraiseCount - ==>  Preparing: UPDATE mine_articles SET praisecount = praisecount+1 WHERE id=? 
2019-03-03 17:08:43.903 DEBUG c.c.m.A.updateArticlePraiseCount - ==> Parameters: 36(Integer)
2019-03-03 17:08:55.782 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["35"]}
2019-03-03 17:08:55.993 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:08:55.993 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-03-03 17:08:55.993 DEBUG c.c.m.A.findDetailById - ==> Parameters: 35(String)
2019-03-03 17:08:56.065 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms, htmlContent, content
2019-03-03 17:08:56.066 DEBUG c.c.m.A.findDetailById - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端, , #### 前言
    一直以来都想开发出一个属于自己的博客网站，可惜总会因为各种原因没有去动手实现，可能是因为懒吧。如今断断续续地终于开发出了博客的V1.0版本，界面比较简陋。后续我会再花零散的时间对本博客进行不断改造升级，并在此博文中记录每个版本更新的功能点。

#### 开发技术
	本博客网站采用前端和后端完全分离、后端按业务点进行模块分离的思想进行开发.
	前端技术：html+css+javascript+jquery+bootstrap+markdown.
	后端技术：springboot+mybatis+redis+druid.

#### V1.0
	完成前后端基础核心架构搭建开发.
	完成文章列表分页展示、最新文章、随机文章、随笔展示功能点开发.

2019-03-03 17:08:56.069 DEBUG c.c.m.A.queryRelation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:08:56.071 DEBUG c.c.m.A.queryRelation - ==>  Preparing: SELECT A.id,A.articleId,B.id keyWordId,B.name keyName,A.updatetime FROM mine_article_keyword_relation A INNER JOIN mine_keywords B ON A.keyId = B.id WHERE A.articleId=? 
2019-03-03 17:08:56.072 DEBUG c.c.m.A.queryRelation - ==> Parameters: 35(Integer)
2019-03-03 17:08:56.265 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:08:56.425 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:08:56.426 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:08:56.426 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:08:56.520 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:08:56.521 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:08:56.522 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:08:56.523 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:08:56.524 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:08:56.525 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:08:56.526 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:08:56.550 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:08:56.605 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:08:56.605 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:08:56.606 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:08:56.635 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:08:56.635 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 60, 2, 网站前端
2019-03-03 17:08:56.636 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 44, 2, 网站前端
2019-03-03 17:08:56.637 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 17:08:56.637 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 17:08:56.637 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 17:08:56.660 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:08:56.663 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:08:56.664 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:08:56.725 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:08:56.725 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2951c002]
2019-03-03 17:08:56.725 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:08:56.725 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:08:56.725 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:08:56.725 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:08:56.726 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:08:56.726 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:08:56.727 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:08:56.741 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:08:56.741 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:08:56.741 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:08:56.741 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:08:56.741 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:08:56.743 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:08:56.743 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:08:56.743 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:08:56.743 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:08:56.744 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:08:56.744 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:08:56.744 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:08:56.745 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:08:56.745 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:08:56.745 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:08:56.746 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:08:56.746 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:08:56.746 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:08:56.746 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:08:56.747 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:08:56.747 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:08:56.819 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:08:56.820 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:09:02.433 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_PRAISE","params":[35]}
2019-03-03 17:09:02.837 DEBUG c.c.m.A.updateArticlePraiseCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:09:02.839 DEBUG c.c.m.A.updateArticlePraiseCount - ==>  Preparing: UPDATE mine_articles SET praisecount = praisecount+1 WHERE id=? 
2019-03-03 17:09:02.840 DEBUG c.c.m.A.updateArticlePraiseCount - ==> Parameters: 35(Integer)
2019-03-03 17:09:38.384 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:09:40.765 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:09:40.766 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:09:40.767 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:09:42.320 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:09:42.321 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:09:42.321 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:09:42.322 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:09:42.322 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:09:42.323 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:09:42.324 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:09:43.796 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:09:44.546 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:09:44.547 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:09:44.547 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:09:44.826 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:09:44.826 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 60, 2, 网站前端
2019-03-03 17:09:44.827 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 45, 2, 网站前端
2019-03-03 17:09:44.827 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 17:09:44.827 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 17:09:44.827 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 17:09:44.847 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:09:44.852 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:09:44.852 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:09:44.858 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:09:44.858 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:09:44.859 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:09:44.861 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2951c002]
2019-03-03 17:09:44.861 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:09:44.861 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:09:44.866 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:09:44.867 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:09:44.867 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:09:44.869 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:09:44.870 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:09:44.871 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2951c002]
2019-03-03 17:09:44.872 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:09:44.873 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:09:44.888 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:09:44.888 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:09:44.888 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:09:44.889 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:09:44.889 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:09:44.889 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:09:44.890 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:09:44.890 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:09:44.890 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:09:44.891 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:09:44.891 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:09:44.891 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:09:44.891 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:09:44.892 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:09:44.892 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:09:44.892 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:09:44.893 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:09:44.893 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:10:25.114 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:10:26.202 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:10:26.203 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:10:26.204 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:10:26.815 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:10:26.816 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:10:26.816 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:10:26.816 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:10:26.817 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:10:26.817 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:10:26.817 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:10:27.335 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:10:27.658 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:10:27.658 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:10:27.659 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:10:27.969 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:10:27.970 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 60, 2, 网站前端
2019-03-03 17:10:27.972 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 45, 2, 网站前端
2019-03-03 17:10:27.973 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 17:10:27.974 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 17:10:27.975 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 17:10:28.007 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:10:28.011 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:10:28.011 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:10:28.020 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2951c002]
2019-03-03 17:10:28.020 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:10:28.021 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:10:28.021 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:10:28.021 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:10:28.022 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:10:28.022 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:10:28.022 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:10:28.023 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:10:28.036 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:10:28.036 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:10:28.038 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:10:28.038 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:10:28.040 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:10:28.040 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:10:28.041 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:10:28.041 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:10:28.042 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:10:28.042 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:10:28.042 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:10:28.043 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:10:28.043 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:10:28.043 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:10:28.091 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:10:28.091 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:10:28.092 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:10:28.092 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:10:28.094 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:10:28.094 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:10:28.095 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:10:28.096 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:10:28.096 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:10:52.534 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:10:53.046 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:10:53.046 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:10:53.047 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:10:53.471 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:10:53.472 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:10:53.473 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:10:53.474 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:10:53.475 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:10:53.476 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:10:53.477 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:10:53.545 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:10:53.622 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:10:53.623 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:10:53.624 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:10:53.815 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:10:53.816 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 60, 2, 网站前端
2019-03-03 17:10:53.816 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 45, 2, 网站前端
2019-03-03 17:10:53.817 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 17:10:53.817 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 17:10:53.818 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 17:10:53.892 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:10:53.895 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:10:53.898 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],"1"]}
2019-03-03 17:10:53.898 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:10:53.913 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:10:53.914 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:10:53.914 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:10:53.918 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2951c002]
2019-03-03 17:10:53.918 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:10:53.918 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:10:53.918 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:10:53.918 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:10:53.919 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:10:53.929 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 17:10:53.930 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) AND dm = ? 
2019-03-03 17:10:53.930 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String), 1(String)
2019-03-03 17:10:53.943 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:10:53.943 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:10:53.944 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:10:53.944 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:10:53.944 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:10:53.945 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:10:53.945 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2951c002]
2019-03-03 17:10:53.945 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:10:53.945 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:10:53.945 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:10:53.946 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:10:53.946 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:10:53.946 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:10:53.947 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:10:53.950 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:10:53.950 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:10:53.950 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:10:53.950 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:10:53.951 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:10:53.951 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:10:53.951 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:10:54.085 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:10:54.085 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:10:54.086 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:10:54.086 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:10:54.156 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":["1",null,null]}
2019-03-03 17:10:54.184 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 17:10:54.184 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' AND B.dm = ? ORDER BY A.updatetime DESC 
2019-03-03 17:10:54.184 DEBUG c.c.m.A.findArticle - ==> Parameters: 1(String)
2019-03-03 17:10:54.951 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:10:54.952 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 8, null, 99, 1, 后端技术
2019-03-03 17:10:54.953 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 17:10:56.491 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:10:56.863 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 17:10:56.864 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:10:56.865 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:10:57.065 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:10:57.067 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:10:57.068 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:10:57.069 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:10:57.069 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:10:57.070 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:10:57.071 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:10:57.116 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:10:57.151 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 17:10:57.151 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:10:57.152 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:10:57.190 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:10:57.191 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 60, 2, 网站前端
2019-03-03 17:10:57.191 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 45, 2, 网站前端
2019-03-03 17:10:57.191 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 17:10:57.192 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 17:10:57.192 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 17:10:57.583 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:10:57.583 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:10:57.585 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:10:57.586 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],"2"]}
2019-03-03 17:10:57.637 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:10:57.637 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2951c002]
2019-03-03 17:10:57.637 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:10:57.637 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:10:57.638 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:10:57.638 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:10:57.638 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 17:10:57.638 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:10:57.638 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:10:57.639 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) AND dm = ? 
2019-03-03 17:10:57.639 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:10:57.639 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String), 2(String)
2019-03-03 17:10:57.673 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:10:57.673 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:10:57.674 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:10:57.675 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:10:57.675 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:10:57.675 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:10:57.676 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:10:57.677 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:10:57.678 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:10:57.678 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:10:57.679 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:10:57.680 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:10:57.682 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 17:10:57.683 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:10:57.684 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:10:57.685 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:10:57.686 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:10:57.687 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:10:57.688 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:10:57.689 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:10:57.690 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:10:57.692 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:10:57.695 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:10:58.150 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:10:58.151 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:10:58.166 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":["2",null,null]}
2019-03-03 17:10:58.298 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:10:58.299 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' AND B.dm = ? ORDER BY A.updatetime DESC 
2019-03-03 17:10:58.301 DEBUG c.c.m.A.findArticle - ==> Parameters: 2(String)
2019-03-03 17:10:58.584 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:10:58.585 DEBUG c.c.m.A.findArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 60, 2, 网站前端
2019-03-03 17:10:58.586 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 17:10:58.587 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 17:10:58.588 DEBUG c.c.m.A.findArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 45, 2, 网站前端
2019-03-03 17:11:01.507 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:11:01.825 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:11:01.825 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:11:01.826 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:11:02.108 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:11:02.110 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:11:02.110 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:11:02.111 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:11:02.113 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:11:02.114 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:11:02.114 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:11:02.756 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:11:03.557 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:11:03.557 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:11:03.557 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:11:03.745 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:11:03.746 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 60, 2, 网站前端
2019-03-03 17:11:03.746 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 45, 2, 网站前端
2019-03-03 17:11:03.746 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 17:11:03.746 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 17:11:03.746 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 17:11:04.028 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:11:04.032 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],"1"]}
2019-03-03 17:11:04.033 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:11:04.033 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:11:04.064 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2951c002]
2019-03-03 17:11:04.064 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:11:04.065 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:11:04.358 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:11:04.359 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:11:04.359 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 17:11:04.359 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:11:04.359 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:11:04.360 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:11:04.360 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:11:04.360 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) AND dm = ? 
2019-03-03 17:11:04.361 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:11:04.361 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:11:04.361 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:11:04.362 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String), 1(String)
2019-03-03 17:11:04.362 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:11:04.364 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:11:04.364 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:11:04.364 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:11:04.365 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:11:04.365 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:11:04.426 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:11:04.426 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:11:04.426 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 17:11:04.426 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:11:04.427 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:11:04.482 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:11:04.482 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:11:04.482 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:11:04.482 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:11:04.558 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:11:04.558 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:11:04.559 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:11:04.559 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:11:04.559 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:11:04.559 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:11:04.559 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:11:04.594 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":["1",null,null]}
2019-03-03 17:11:04.645 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:11:04.645 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' AND B.dm = ? ORDER BY A.updatetime DESC 
2019-03-03 17:11:04.645 DEBUG c.c.m.A.findArticle - ==> Parameters: 1(String)
2019-03-03 17:11:04.721 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:11:04.721 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 8, null, 99, 1, 后端技术
2019-03-03 17:11:04.722 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 17:11:09.786 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:11:09.863 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:11:09.863 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:11:09.863 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:11:09.950 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:11:09.951 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:11:09.951 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:11:09.951 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:11:09.951 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:11:09.952 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:11:09.952 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:11:09.976 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:11:09.986 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:11:09.986 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:11:09.987 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:11:10.008 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:11:10.008 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 60, 2, 网站前端
2019-03-03 17:11:10.008 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 45, 2, 网站前端
2019-03-03 17:11:10.009 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 17:11:10.009 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 17:11:10.009 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 17:11:10.033 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:11:10.037 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:11:10.038 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:11:10.069 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:11:10.069 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:11:10.069 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 17:11:10.070 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:11:10.070 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:11:10.070 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:11:10.071 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:11:10.071 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:11:10.071 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:11:10.095 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:11:10.095 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:11:10.096 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:11:10.096 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:11:10.098 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:11:10.098 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:11:10.098 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:11:10.098 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:11:10.099 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:11:10.099 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:11:10.100 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:11:10.100 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:11:10.101 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:11:10.102 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:11:10.102 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:11:10.103 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:11:10.103 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:11:10.104 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:11:10.105 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:11:10.107 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:11:10.108 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:11:10.113 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:11:10.114 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:11:11.805 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:11:12.208 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:11:12.208 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:11:12.209 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:11:12.340 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:11:12.341 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:11:12.341 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:11:12.341 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:11:12.342 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:11:12.342 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:11:12.342 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:11:12.437 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:11:12.461 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:11:12.461 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:11:12.461 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:11:12.494 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:11:12.495 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 60, 2, 网站前端
2019-03-03 17:11:12.495 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 45, 2, 网站前端
2019-03-03 17:11:12.495 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 17:11:12.495 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 17:11:12.496 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 17:11:12.520 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:11:12.522 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:11:12.523 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:11:12.534 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:11:12.534 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:11:12.534 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:11:12.534 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:11:12.535 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:11:12.535 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:11:12.535 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 17:11:12.536 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:11:12.536 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:11:12.550 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:11:12.550 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:11:12.551 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:11:12.551 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:11:12.552 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:11:12.552 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 17:11:12.552 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:11:12.552 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:11:12.553 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:11:12.553 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:11:12.553 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:11:12.554 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:11:12.554 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:11:12.555 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:11:12.555 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:11:12.556 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:11:12.557 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:11:12.557 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:11:12.558 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:11:12.558 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:11:12.559 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:11:12.575 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:11:12.577 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:11:43.903 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:11:44.643 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 17:11:44.644 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:11:44.644 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:11:46.053 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:11:46.054 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:11:46.055 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:11:46.056 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:11:46.057 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:11:46.058 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:11:46.059 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:11:46.111 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:11:46.124 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 17:11:46.125 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:11:46.125 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:11:46.276 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:11:46.276 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 60, 2, 网站前端
2019-03-03 17:11:46.276 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 45, 2, 网站前端
2019-03-03 17:11:46.277 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 17:11:46.277 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 17:11:46.277 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 17:11:46.359 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:11:46.363 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:11:46.364 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_LATEST_ARTICLE","params":[10]}
2019-03-03 17:11:46.365 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:11:46.365 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:11:46.427 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 17:11:46.427 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:11:46.427 DEBUG c.c.m.A.findLatestArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2951c002]
2019-03-03 17:11:46.427 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:11:46.428 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:11:46.428 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:11:46.428 DEBUG c.c.m.A.findLatestArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC LIMIT ? 
2019-03-03 17:11:46.428 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:11:46.429 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:11:46.429 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:11:46.429 DEBUG c.c.m.A.findLatestArticle - ==> Parameters: 10(Integer)
2019-03-03 17:11:46.429 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:11:46.451 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:11:46.451 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:11:46.451 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:11:46.452 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:11:46.452 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:11:46.452 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:11:46.452 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:11:46.452 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:11:46.453 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:11:46.453 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:11:46.453 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:11:46.454 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:11:46.454 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:11:46.455 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:11:46.455 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:11:46.455 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:11:46.455 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:11:46.455 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:11:46.456 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:11:46.456 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:11:46.456 DEBUG c.c.m.A.findLatestArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:11:46.456 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:11:46.457 DEBUG c.c.m.A.findLatestArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 60, 2, 网站前端
2019-03-03 17:11:46.457 DEBUG c.c.m.A.findLatestArticle - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 17:11:46.458 DEBUG c.c.m.A.findLatestArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 17:11:46.458 DEBUG c.c.m.A.findLatestArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 45, 2, 网站前端
2019-03-03 17:11:46.459 DEBUG c.c.m.A.findLatestArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 8, null, 99, 1, 后端技术
2019-03-03 17:11:46.459 DEBUG c.c.m.A.findLatestArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 11, 4, 数据库
2019-03-03 17:11:46.459 DEBUG c.c.m.A.findLatestArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 17:11:46.484 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:11:46.484 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:11:46.485 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2951c002]
2019-03-03 17:11:46.486 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:11:46.486 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:11:46.519 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:11:46.520 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:11:46.520 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:11:46.521 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:11:46.521 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:11:46.521 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:11:46.521 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:11:46.553 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:11:46.560 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2951c002]
2019-03-03 17:11:46.561 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:11:46.561 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:11:46.599 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:11:46.599 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:11:46.600 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:11:46.600 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:11:46.600 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:11:46.600 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:11:46.600 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:11:46.620 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null,null]}
2019-03-03 17:11:46.627 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2951c002]
2019-03-03 17:11:46.627 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-03-03 17:11:46.627 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-03-03 17:11:46.653 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:11:46.653 DEBUG c.c.m.A.findArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 60, 2, 网站前端
2019-03-03 17:11:46.654 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 17:11:46.654 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 17:11:46.654 DEBUG c.c.m.A.findArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 45, 2, 网站前端
2019-03-03 17:11:46.654 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 8, null, 99, 1, 后端技术
2019-03-03 17:11:46.655 DEBUG c.c.m.A.findArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 11, 4, 数据库
2019-03-03 17:11:46.655 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 17:11:54.469 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["36"]}
2019-03-03 17:11:54.610 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2951c002]
2019-03-03 17:11:54.610 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-03-03 17:11:54.610 DEBUG c.c.m.A.findDetailById - ==> Parameters: 36(String)
2019-03-03 17:11:54.703 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms, htmlContent, content
2019-03-03 17:11:54.704 DEBUG c.c.m.A.findDetailById - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 60, 2, 网站前端, <h2 id="h2-u524Du8A00"><a name="前言" class="reference-link"></a><span class="header-link octicon octicon-link"></span>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过”服务器主机IP:应用端口”的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名-&gt;备案-&gt;做IP解析、端口转发的过程。</p>
<h6 id="h6--"><a name="一、申请域名以及实名认证" class="reference-link"></a><span class="header-link octicon octicon-link"></span>一、申请域名以及实名认证</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳<a href="https://cloud.baidu.com/product/bcd/search.html" title="域名申请地址">域名申请地址</a>。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。</p>
<h6 id="h6--"><a name="二、工信部备案" class="reference-link"></a><span class="header-link octicon octicon-link"></span>二、工信部备案</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳<a href="http://beian.bce.baidu.com/" title="百度云备案系统">百度云备案系统</a>，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。</p>
<h6 id="h6--"><a name="三、域名解析、端口转发" class="reference-link"></a><span class="header-link octicon octicon-link"></span>三、域名解析、端口转发</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。</p>
<h6 id="h6--"><a name="四、通过域名进行网站访问" class="reference-link"></a><span class="header-link octicon octicon-link"></span>四、通过域名进行网站访问</h6><p>完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。</p>
, ## 前言
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过"服务器主机IP:应用端口"的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名->备案->做IP解析、端口转发的过程。

###### 一、申请域名以及实名认证
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳[域名申请地址](https://cloud.baidu.com/product/bcd/search.html "域名申请地址")。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。

###### 二、工信部备案
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳[百度云备案系统](http://beian.bce.baidu.com/ "百度云备案系统")，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。

###### 三、域名解析、端口转发
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。

###### 四、通过域名进行网站访问
完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。



2019-03-03 17:11:54.709 DEBUG c.c.m.A.queryRelation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2951c002]
2019-03-03 17:11:54.710 DEBUG c.c.m.A.queryRelation - ==>  Preparing: SELECT A.id,A.articleId,B.id keyWordId,B.name keyName,A.updatetime FROM mine_article_keyword_relation A INNER JOIN mine_keywords B ON A.keyId = B.id WHERE A.articleId=? 
2019-03-03 17:11:54.711 DEBUG c.c.m.A.queryRelation - ==> Parameters: 36(Integer)
2019-03-03 17:11:54.836 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:11:54.849 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2951c002]
2019-03-03 17:11:54.849 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:11:54.850 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:11:54.860 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:11:54.860 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:11:54.860 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:11:54.860 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:11:54.861 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:11:54.861 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:11:54.861 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:11:54.877 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:11:54.885 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2951c002]
2019-03-03 17:11:54.885 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:11:54.886 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:11:54.938 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:11:54.938 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 60, 2, 网站前端
2019-03-03 17:11:54.938 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 45, 2, 网站前端
2019-03-03 17:11:54.939 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 17:11:54.939 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 17:11:54.939 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 17:11:54.989 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:11:54.990 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:11:54.993 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:11:54.997 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2951c002]
2019-03-03 17:11:54.997 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:11:54.998 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:11:55.010 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:11:55.010 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5290f462]
2019-03-03 17:11:55.011 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:11:55.011 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:11:55.011 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:11:55.012 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:11:55.027 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:11:55.027 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:11:55.028 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:11:55.028 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:11:55.028 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:11:55.028 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:11:55.029 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:11:55.029 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:11:55.029 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5290f462]
2019-03-03 17:11:55.029 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:11:55.030 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:11:55.030 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:11:55.030 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:11:55.030 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:11:55.030 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:11:55.031 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:11:55.031 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:11:55.032 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:11:55.032 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:11:55.032 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:11:55.033 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:11:55.048 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:11:55.048 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:12:14.949 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["36"]}
2019-03-03 17:12:15.318 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5290f462]
2019-03-03 17:12:15.319 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-03-03 17:12:15.320 DEBUG c.c.m.A.findDetailById - ==> Parameters: 36(String)
2019-03-03 17:12:15.350 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms, htmlContent, content
2019-03-03 17:12:15.351 DEBUG c.c.m.A.findDetailById - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 60, 2, 网站前端, <h2 id="h2-u524Du8A00"><a name="前言" class="reference-link"></a><span class="header-link octicon octicon-link"></span>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过”服务器主机IP:应用端口”的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名-&gt;备案-&gt;做IP解析、端口转发的过程。</p>
<h6 id="h6--"><a name="一、申请域名以及实名认证" class="reference-link"></a><span class="header-link octicon octicon-link"></span>一、申请域名以及实名认证</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳<a href="https://cloud.baidu.com/product/bcd/search.html" title="域名申请地址">域名申请地址</a>。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。</p>
<h6 id="h6--"><a name="二、工信部备案" class="reference-link"></a><span class="header-link octicon octicon-link"></span>二、工信部备案</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳<a href="http://beian.bce.baidu.com/" title="百度云备案系统">百度云备案系统</a>，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。</p>
<h6 id="h6--"><a name="三、域名解析、端口转发" class="reference-link"></a><span class="header-link octicon octicon-link"></span>三、域名解析、端口转发</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。</p>
<h6 id="h6--"><a name="四、通过域名进行网站访问" class="reference-link"></a><span class="header-link octicon octicon-link"></span>四、通过域名进行网站访问</h6><p>完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。</p>
, ## 前言
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过"服务器主机IP:应用端口"的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名->备案->做IP解析、端口转发的过程。

###### 一、申请域名以及实名认证
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳[域名申请地址](https://cloud.baidu.com/product/bcd/search.html "域名申请地址")。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。

###### 二、工信部备案
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳[百度云备案系统](http://beian.bce.baidu.com/ "百度云备案系统")，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。

###### 三、域名解析、端口转发
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。

###### 四、通过域名进行网站访问
完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。



2019-03-03 17:12:15.352 DEBUG c.c.m.A.queryRelation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5290f462]
2019-03-03 17:12:15.352 DEBUG c.c.m.A.queryRelation - ==>  Preparing: SELECT A.id,A.articleId,B.id keyWordId,B.name keyName,A.updatetime FROM mine_article_keyword_relation A INNER JOIN mine_keywords B ON A.keyId = B.id WHERE A.articleId=? 
2019-03-03 17:12:15.352 DEBUG c.c.m.A.queryRelation - ==> Parameters: 36(Integer)
2019-03-03 17:12:15.448 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:12:15.534 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5290f462]
2019-03-03 17:12:15.534 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:12:15.534 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:12:15.564 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:12:15.565 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:12:15.565 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:12:15.565 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:12:15.565 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:12:15.566 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:12:15.566 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:12:15.616 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:12:15.627 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5290f462]
2019-03-03 17:12:15.627 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:12:15.628 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:12:15.654 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:12:15.654 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 21219, null, 60, 2, 网站前端
2019-03-03 17:12:15.655 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 132, null, 45, 2, 网站前端
2019-03-03 17:12:15.655 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 34, null, 22, 2, 网站前端
2019-03-03 17:12:15.655 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 32, null, 33, 2, 网站前端
2019-03-03 17:12:15.655 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 12, null, 11, 1, 后端技术
2019-03-03 17:12:15.689 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:12:15.697 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:12:15.697 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:12:15.735 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2951c002]
2019-03-03 17:12:15.735 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:12:15.735 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5290f462]
2019-03-03 17:12:15.735 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:12:15.736 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:12:15.736 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:12:15.736 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:12:15.736 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:12:15.737 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:12:15.767 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:12:15.767 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:12:15.767 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:12:15.767 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:12:15.768 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:12:15.768 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:12:15.768 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2951c002]
2019-03-03 17:12:15.768 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:12:15.768 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:12:15.769 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:12:15.769 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:12:15.769 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:12:15.770 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:12:15.770 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:12:15.770 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:12:15.770 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:12:15.771 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:12:15.771 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:12:15.771 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:12:15.771 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:12:15.772 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:12:15.816 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:12:15.817 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:13:27.640 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["36"]}
2019-03-03 17:13:28.345 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2951c002]
2019-03-03 17:13:28.346 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-03-03 17:13:28.347 DEBUG c.c.m.A.findDetailById - ==> Parameters: 36(String)
2019-03-03 17:13:36.922 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["36"]}
2019-03-03 17:13:37.109 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2951c002]
2019-03-03 17:13:37.110 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-03-03 17:13:37.111 DEBUG c.c.m.A.findDetailById - ==> Parameters: 36(String)
2019-03-03 17:13:51.159 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:13:55.459 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2951c002]
2019-03-03 17:13:55.459 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:13:55.459 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:13:57.327 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:13:57.328 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:13:57.330 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:13:57.333 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:13:57.334 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:13:57.336 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:13:57.338 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:13:57.367 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:13:57.449 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2951c002]
2019-03-03 17:13:57.450 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:13:57.450 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:13:57.676 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:13:57.685 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:13:57.687 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:13:57.687 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_LATEST_ARTICLE","params":[10]}
2019-03-03 17:13:57.688 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:13:58.040 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:13:58.040 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2951c002]
2019-03-03 17:13:58.040 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5290f462]
2019-03-03 17:13:58.040 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:13:58.040 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:13:58.040 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:13:58.040 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:13:58.040 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:13:58.041 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:13:58.041 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:13:58.041 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:13:58.041 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:13:58.118 DEBUG c.c.m.A.findLatestArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 17:13:58.119 DEBUG c.c.m.A.findLatestArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC LIMIT ? 
2019-03-03 17:13:58.120 DEBUG c.c.m.A.findLatestArticle - ==> Parameters: 10(Integer)
2019-03-03 17:13:59.163 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:13:59.163 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:13:59.163 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:13:59.163 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:13:59.164 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:13:59.164 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:13:59.164 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:13:59.165 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:13:59.165 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:13:59.165 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:13:59.165 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:13:59.165 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:13:59.165 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:13:59.166 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:13:59.166 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:13:59.166 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:13:59.167 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:13:59.167 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:13:59.167 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:13:59.168 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:13:59.168 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:13:59.239 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:13:59.240 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:13:59.241 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:13:59.241 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:13:59.241 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:13:59.241 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:13:59.241 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:13:59.465 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:13:59.466 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:13:59.529 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:13:59.564 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:13:59.565 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:13:59.565 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:13:59.871 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:13:59.872 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:13:59.872 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:13:59.872 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:13:59.872 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:13:59.873 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:13:59.873 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:13:59.904 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null,null]}
2019-03-03 17:13:59.923 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:13:59.924 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-03-03 17:13:59.924 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-03-03 17:13:59.959 DEBUG c.c.s.i.ArticleServiceImpl - 未查到任何文章信息
2019-03-03 17:14:36.376 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:14:40.292 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:14:40.292 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:14:40.293 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:14:40.366 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:14:40.366 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:14:40.366 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:14:40.366 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:14:40.366 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:14:40.367 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:14:40.367 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:14:40.416 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:14:40.437 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:14:40.437 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:14:40.437 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:14:42.812 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:14:42.820 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:14:42.821 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:14:42.822 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:14:42.825 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_LATEST_ARTICLE","params":[10]}
2019-03-03 17:14:43.223 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:14:43.223 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 17:14:43.223 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:14:43.223 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5290f462]
2019-03-03 17:14:43.223 DEBUG c.c.m.A.findLatestArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2951c002]
2019-03-03 17:14:43.224 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:14:43.224 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:14:43.224 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:14:43.224 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:14:43.225 DEBUG c.c.m.A.findLatestArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC LIMIT ? 
2019-03-03 17:14:43.225 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:14:43.225 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:14:43.226 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:14:43.226 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:14:43.226 DEBUG c.c.m.A.findLatestArticle - ==> Parameters: 10(Integer)
2019-03-03 17:14:43.971 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:14:43.971 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:14:43.971 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:14:43.971 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:14:43.972 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:14:43.972 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:14:43.973 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:14:43.973 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:14:43.974 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:14:43.974 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:14:43.976 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 17:14:43.976 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:14:43.976 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:14:43.976 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:14:43.977 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:14:43.979 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:14:43.979 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:14:43.980 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:14:43.981 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:14:43.981 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:14:43.982 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:14:43.982 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:14:43.984 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:14:43.984 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:14:43.984 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:14:43.985 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:14:43.985 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:14:43.986 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:14:44.410 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:14:44.411 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:14:44.423 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:14:44.930 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:14:44.930 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:14:44.931 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:14:45.246 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:14:45.247 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:14:45.248 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:14:45.249 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:14:45.250 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:14:45.250 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:14:45.251 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:14:45.289 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null,null]}
2019-03-03 17:14:45.300 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:14:45.301 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-03-03 17:14:45.302 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-03-03 17:14:45.335 DEBUG c.c.s.i.ArticleServiceImpl - 未查到任何文章信息
2019-03-03 17:15:00.079 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:15:27.625 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:15:27.626 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:15:27.628 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:15:28.688 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:15:28.689 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:15:28.690 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:15:28.690 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:15:28.690 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:15:28.691 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:15:28.691 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:15:29.142 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:15:29.207 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:15:29.207 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:15:29.208 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:15:29.262 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:15:29.267 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:15:29.269 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:15:29.270 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_LATEST_ARTICLE","params":[10]}
2019-03-03 17:15:29.270 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:15:29.276 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1a2d0895]
2019-03-03 17:15:29.276 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:15:29.277 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:15:29.277 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2951c002]
2019-03-03 17:15:29.278 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:15:29.278 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:15:29.280 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5290f462]
2019-03-03 17:15:29.281 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:15:29.281 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:15:29.283 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 17:15:29.283 DEBUG c.c.m.A.findLatestArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@df3a27c]
2019-03-03 17:15:29.283 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:15:29.283 DEBUG c.c.m.A.findLatestArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC LIMIT ? 
2019-03-03 17:15:29.284 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:15:29.284 DEBUG c.c.m.A.findLatestArticle - ==> Parameters: 10(Integer)
2019-03-03 17:15:29.290 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:15:29.290 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:15:29.290 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:15:29.290 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:15:29.290 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:15:29.291 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:15:29.291 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:15:29.295 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:15:29.295 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:15:29.296 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:15:29.296 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:15:29.296 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:15:29.296 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:15:29.296 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@488313a7]
2019-03-03 17:15:29.297 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:15:29.297 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:15:29.297 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:15:29.298 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:15:29.298 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:15:29.298 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:15:29.298 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:15:29.299 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:15:29.299 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:15:29.299 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:15:29.299 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:15:29.300 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:15:29.300 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:15:29.300 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:15:29.311 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:15:29.345 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:15:29.346 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2951c002]
2019-03-03 17:15:29.346 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:15:29.346 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:15:29.348 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:15:29.358 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:15:29.358 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:15:29.359 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:15:29.359 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:15:29.359 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:15:29.359 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:15:29.360 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:15:29.375 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null,null]}
2019-03-03 17:15:29.393 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2951c002]
2019-03-03 17:15:29.393 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-03-03 17:15:29.393 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-03-03 17:15:29.409 DEBUG c.c.s.i.ArticleServiceImpl - 未查到任何文章信息
2019-03-03 17:16:02.782 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:16:03.648 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@69ff0eea]
2019-03-03 17:16:03.649 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:16:03.651 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:16:03.663 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:16:03.664 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:16:03.665 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:16:03.665 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:16:03.666 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:16:03.667 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:16:03.667 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:16:03.697 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:16:03.709 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@69ff0eea]
2019-03-03 17:16:03.709 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:16:03.709 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:16:03.763 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:16:03.768 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:16:03.768 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:16:03.770 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:16:03.770 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_LATEST_ARTICLE","params":[10]}
2019-03-03 17:16:03.777 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@69ff0eea]
2019-03-03 17:16:03.777 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:16:03.778 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:16:03.802 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:16:03.802 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:16:03.803 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:16:03.803 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:16:03.803 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:16:03.803 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:16:03.803 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:16:03.847 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@69ff0eea]
2019-03-03 17:16:03.847 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:16:03.848 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:16:03.859 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:16:03.860 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:16:03.860 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:16:03.861 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:16:03.861 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:16:03.861 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:16:03.862 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:16:03.862 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:16:03.862 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:16:03.885 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@69ff0eea]
2019-03-03 17:16:03.885 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:16:03.886 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:16:03.896 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:16:03.897 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:16:03.899 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:16:03.900 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:16:03.900 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:16:03.900 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:16:03.900 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:16:03.907 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@7cbc039b]
2019-03-03 17:16:03.908 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:16:03.908 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:16:03.920 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:16:03.920 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:16:03.921 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@7cbc039b]
2019-03-03 17:16:03.921 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:16:03.922 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:16:03.923 DEBUG c.c.m.A.findLatestArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@69ff0eea]
2019-03-03 17:16:03.924 DEBUG c.c.m.A.findLatestArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC LIMIT ? 
2019-03-03 17:16:03.924 DEBUG c.c.m.A.findLatestArticle - ==> Parameters: 10(Integer)
2019-03-03 17:16:03.927 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:16:03.932 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:16:03.932 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:16:03.961 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@7cbc039b]
2019-03-03 17:16:03.961 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:16:03.962 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:16:03.984 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:16:03.984 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:16:03.984 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:16:03.985 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:16:03.985 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:16:03.985 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:16:03.985 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:16:03.997 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null,null]}
2019-03-03 17:16:04.004 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@40e8af1b]
2019-03-03 17:16:04.005 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-03-03 17:16:04.005 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-03-03 17:16:04.020 DEBUG c.c.s.i.ArticleServiceImpl - 未查到任何文章信息
2019-03-03 17:16:15.731 INFO  o.h.v.i.u.Version - HV000001: Hibernate Validator 5.2.4.Final
2019-03-03 17:16:15.811 INFO  c.c.ServerApp - Starting ServerApp on WINDOWS-GUOYD with PID 18824 (E:\personal_workspace\git_code\project\mine-server\mine-starter\target\classes started by guoyd in E:\personal_workspace\git_code\project\mine-server\mine-starter)
2019-03-03 17:16:15.811 DEBUG c.c.ServerApp - Running with Spring Boot v1.3.3.RELEASE, Spring v4.2.3.RELEASE
2019-03-03 17:16:15.812 INFO  c.c.ServerApp - No active profile set, falling back to default profiles: default
2019-03-03 17:16:17.410 ERROR c.a.d.p.DruidAbstractDataSource - maxIdle is deprecated
2019-03-03 17:16:38.923 INFO  c.a.d.p.DruidDataSource - {dataSource-1} inited
2019-03-03 17:16:38.971 DEBUG o.a.i.l.LogFactory - Logging initialized using 'org.apache.ibatis.logging.slf4j.Slf4jImpl' adapter.
2019-03-03 17:16:39.195 DEBUG c.g.m.m.p.OffsetLimitInterceptor - dialectClass: com.github.miemiedev.mybatis.paginator.dialect.MySQLDialect 
2019-03-03 17:16:39.196 DEBUG c.g.m.m.p.OffsetLimitInterceptor - asyncTotalCount: false 
2019-03-03 17:16:40.236 INFO  o.a.c.c.StandardService - Starting service Tomcat
2019-03-03 17:16:40.238 INFO  o.a.c.c.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.0.28
2019-03-03 17:16:40.451 INFO  o.a.c.c.C.[.[.[/] - Initializing Spring embedded WebApplicationContext
2019-03-03 17:16:41.062 DEBUG c.c.c.MineServiceHandler - 测试接口初始化
2019-03-03 17:16:41.126 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_USER_LOGIN
2019-03-03 17:16:41.127 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_ARTICLE_DETAIL
2019-03-03 17:16:41.127 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_ARTICLE_LIST_RANK_TOP
2019-03-03 17:16:41.127 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_ARTICLE_PRAISE
2019-03-03 17:16:41.127 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_ARTICLE_UPDATE_READ_COUNT
2019-03-03 17:16:41.127 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_ARTICLE_LIST
2019-03-03 17:16:41.127 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_RANDOM_ARTICLE
2019-03-03 17:16:41.128 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_LATEST_ARTICLE
2019-03-03 17:16:41.128 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_KEYWORDS
2019-03-03 17:16:41.128 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_DAILY_ESSAYS
2019-03-03 17:16:41.128 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_DATA_EXPORT
2019-03-03 17:16:41.128 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_CONST
2019-03-03 17:16:41.129 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_SITE_INFORMATION
2019-03-03 17:16:41.129 DEBUG c.c.c.MineServiceHandler - 测试接口初始化完毕
2019-03-03 17:16:42.478 INFO  o.a.c.h.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8181"]
2019-03-03 17:16:42.493 INFO  o.a.c.h.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8181"]
2019-03-03 17:16:42.511 INFO  o.a.t.u.n.NioSelectorPool - Using a shared selector for servlet write/read
2019-03-03 17:16:42.570 INFO  c.c.ServerApp - Started ServerApp in 27.41 seconds (JVM running for 28.16)
2019-03-03 17:16:45.633 INFO  o.a.c.c.C.[.[.[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-03-03 17:16:46.039 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:16:46.726 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@a761413]
2019-03-03 17:16:46.729 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:16:46.754 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:16:47.384 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:16:47.384 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:16:47.386 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:16:47.386 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:16:47.387 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:16:47.388 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:16:47.388 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:16:48.069 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:16:48.551 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@a761413]
2019-03-03 17:16:48.552 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:16:48.554 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:16:49.292 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:16:49.302 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:16:49.306 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:16:49.312 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:16:49.312 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_LATEST_ARTICLE","params":[10]}
2019-03-03 17:16:49.922 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@a761413]
2019-03-03 17:16:49.922 DEBUG c.c.m.A.findLatestArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@42ea9e0f]
2019-03-03 17:16:49.923 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2f88724b]
2019-03-03 17:16:49.923 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:16:49.924 DEBUG c.c.m.A.findLatestArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC LIMIT ? 
2019-03-03 17:16:49.925 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@50503ea8]
2019-03-03 17:16:49.926 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@f85cd2c]
2019-03-03 17:16:49.926 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:16:49.927 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:16:49.929 DEBUG c.c.m.A.findLatestArticle - ==> Parameters: 10(Integer)
2019-03-03 17:16:49.930 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:16:49.931 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:16:49.934 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:16:49.938 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:16:49.939 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:16:50.573 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:16:50.573 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:16:50.576 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:16:50.576 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:16:50.576 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:16:50.598 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:16:50.600 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:16:50.602 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2f88724b]
2019-03-03 17:16:50.603 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:16:50.604 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:16:50.604 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:16:50.604 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:16:50.605 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:16:50.605 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:16:50.606 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:16:50.606 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:16:50.607 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:16:50.607 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:16:50.607 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:16:50.608 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:16:50.609 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:16:50.609 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:16:50.609 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:16:50.610 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:16:50.610 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:16:50.611 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:16:50.611 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:16:50.613 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:16:51.098 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:16:51.104 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:16:51.131 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:16:51.526 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@50503ea8]
2019-03-03 17:16:51.527 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:16:51.527 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:16:51.983 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:16:51.983 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:16:51.985 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:16:51.986 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:16:51.986 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:16:51.987 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:16:51.987 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:16:52.911 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null,null]}
2019-03-03 17:16:53.798 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@50503ea8]
2019-03-03 17:16:53.800 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-03-03 17:16:53.802 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-03-03 17:16:54.407 DEBUG c.c.s.i.ArticleServiceImpl - 未查到任何文章信息
2019-03-03 17:18:19.056 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:18:26.480 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@50503ea8]
2019-03-03 17:18:26.481 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:18:26.481 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:18:26.545 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:18:26.547 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:18:26.549 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:18:26.552 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:18:26.554 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:18:26.556 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:18:26.557 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:18:27.899 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:18:28.222 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@50503ea8]
2019-03-03 17:18:28.222 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:18:28.223 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:18:28.351 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:18:28.355 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:18:28.358 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],"1"]}
2019-03-03 17:18:28.359 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:18:28.594 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@a761413]
2019-03-03 17:18:28.594 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2f88724b]
2019-03-03 17:18:28.594 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) AND dm = ? 
2019-03-03 17:18:28.595 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:18:28.595 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String), 1(String)
2019-03-03 17:18:28.596 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@50503ea8]
2019-03-03 17:18:28.596 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:18:28.596 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@f85cd2c]
2019-03-03 17:18:28.597 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:18:28.598 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:18:28.598 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:18:28.599 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:18:28.846 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:18:28.846 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:18:28.848 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:18:28.848 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:18:28.849 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:18:28.849 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2f88724b]
2019-03-03 17:18:28.851 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:18:28.851 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:18:28.852 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:18:28.852 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:18:28.853 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:18:28.853 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:18:28.854 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:18:28.855 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:18:28.855 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:18:28.856 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:18:28.856 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:18:28.857 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:18:28.857 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:18:28.858 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:18:28.858 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:18:28.859 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:18:28.859 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:18:28.996 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:18:28.997 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:18:29.003 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":["1",null,null]}
2019-03-03 17:18:29.074 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@f85cd2c]
2019-03-03 17:18:29.075 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' AND B.dm = ? ORDER BY A.updatetime DESC 
2019-03-03 17:18:29.075 DEBUG c.c.m.A.findArticle - ==> Parameters: 1(String)
2019-03-03 17:18:29.234 DEBUG c.c.s.i.ArticleServiceImpl - 未查到任何文章信息
2019-03-03 17:18:48.565 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:18:48.628 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@f85cd2c]
2019-03-03 17:18:48.629 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:18:48.629 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:18:48.872 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:18:48.873 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:18:48.876 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:18:48.878 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:18:48.880 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:18:48.880 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:18:48.881 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:18:49.379 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:18:49.410 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@f85cd2c]
2019-03-03 17:18:49.411 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:18:49.411 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:18:49.607 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:18:49.611 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:18:49.611 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:18:49.612 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],"1"]}
2019-03-03 17:18:49.671 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@a761413]
2019-03-03 17:18:49.671 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2f88724b]
2019-03-03 17:18:49.672 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:18:49.672 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:18:49.672 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:18:49.672 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:18:49.674 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@f85cd2c]
2019-03-03 17:18:49.674 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@50503ea8]
2019-03-03 17:18:49.674 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:18:49.675 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) AND dm = ? 
2019-03-03 17:18:49.675 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:18:49.676 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String), 1(String)
2019-03-03 17:18:49.798 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:18:49.799 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:18:49.895 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:18:49.895 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:18:49.896 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:18:49.896 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:18:49.896 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:18:49.896 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:18:49.897 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:18:49.897 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:18:49.897 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:18:49.898 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:18:49.898 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:18:49.899 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:18:49.899 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:18:49.899 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:18:49.900 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:18:49.900 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:18:49.901 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:18:49.901 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:18:49.902 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@a761413]
2019-03-03 17:18:49.903 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:18:49.903 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:18:49.908 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":["1",null,null]}
2019-03-03 17:18:49.996 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:18:49.997 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:18:49.998 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@50503ea8]
2019-03-03 17:18:49.999 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' AND B.dm = ? ORDER BY A.updatetime DESC 
2019-03-03 17:18:50.001 DEBUG c.c.m.A.findArticle - ==> Parameters: 1(String)
2019-03-03 17:18:50.987 DEBUG c.c.s.i.ArticleServiceImpl - 未查到任何文章信息
2019-03-03 17:18:54.288 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:18:54.320 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@50503ea8]
2019-03-03 17:18:54.321 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:18:54.321 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:18:54.771 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:18:54.773 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:18:54.774 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:18:54.776 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:18:54.777 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:18:54.779 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:18:54.780 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:18:55.440 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:18:55.798 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@50503ea8]
2019-03-03 17:18:55.799 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:18:55.800 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:18:55.913 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:18:55.917 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:18:55.921 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:18:55.945 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@50503ea8]
2019-03-03 17:18:55.945 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:18:55.946 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:18:55.984 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@a761413]
2019-03-03 17:18:55.985 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:18:55.985 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:18:55.988 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@f85cd2c]
2019-03-03 17:18:55.988 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:18:55.989 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:18:55.992 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:18:55.994 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:18:55.995 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:18:55.995 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:18:55.996 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:18:55.996 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:18:55.996 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:18:56.064 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:18:56.065 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:18:56.066 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@a761413]
2019-03-03 17:18:56.066 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:18:56.067 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:18:56.078 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:18:56.078 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:18:56.079 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:18:56.079 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:18:56.079 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:18:56.080 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:18:56.080 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:18:56.080 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:18:56.080 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:18:56.102 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:18:56.103 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:18:57.450 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:18:57.748 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@a761413]
2019-03-03 17:18:57.749 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:18:57.749 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:18:57.973 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:18:57.974 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:18:57.975 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:18:57.976 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:18:57.977 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:18:57.978 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:18:57.978 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:18:58.041 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:18:58.195 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@a761413]
2019-03-03 17:18:58.196 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:18:58.196 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:18:58.365 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:18:58.368 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:18:58.371 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:18:58.373 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:18:58.374 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_LATEST_ARTICLE","params":[10]}
2019-03-03 17:18:58.480 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@a761413]
2019-03-03 17:18:58.482 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:18:58.484 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:18:58.516 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2f88724b]
2019-03-03 17:18:58.516 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:18:58.517 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:18:58.553 DEBUG c.c.m.A.findLatestArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@42ea9e0f]
2019-03-03 17:18:58.554 DEBUG c.c.m.A.findLatestArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC LIMIT ? 
2019-03-03 17:18:58.554 DEBUG c.c.m.A.findLatestArticle - ==> Parameters: 10(Integer)
2019-03-03 17:18:58.556 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@50503ea8]
2019-03-03 17:18:58.556 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@f85cd2c]
2019-03-03 17:18:58.557 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:18:58.557 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:18:58.557 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:18:58.557 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:18:58.575 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:18:58.575 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:18:58.576 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:18:58.576 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:18:58.578 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:18:58.579 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:18:58.579 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:18:58.579 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:18:58.579 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:18:58.581 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:18:58.582 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:18:58.583 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:18:58.583 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:18:58.584 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:18:58.584 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:18:58.584 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:18:58.585 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:18:58.585 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:18:58.585 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:18:58.585 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:18:58.586 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:18:58.587 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@f85cd2c]
2019-03-03 17:18:58.587 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:18:58.588 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:18:58.588 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:18:58.588 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:18:58.589 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:18:58.589 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:18:58.644 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:18:58.655 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:18:58.655 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:18:58.660 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2f88724b]
2019-03-03 17:18:58.661 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:18:58.662 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:18:58.682 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:18:58.682 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:18:58.682 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:18:58.683 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:18:58.683 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:18:58.683 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:18:58.684 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:18:58.708 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null,null]}
2019-03-03 17:18:58.737 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2f88724b]
2019-03-03 17:18:58.737 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-03-03 17:18:58.737 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-03-03 17:18:58.802 DEBUG c.c.s.i.ArticleServiceImpl - 未查到任何文章信息
2019-03-03 17:21:00.976 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:21:01.019 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2f88724b]
2019-03-03 17:21:01.020 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:21:01.020 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:21:01.035 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:21:01.036 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:21:01.037 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:21:01.038 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:21:01.038 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:21:01.039 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:21:01.039 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:21:01.067 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:21:01.074 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2f88724b]
2019-03-03 17:21:01.075 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:21:01.075 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:21:01.165 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:21:01.172 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:21:01.175 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:21:01.176 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:21:01.210 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2f88724b]
2019-03-03 17:21:01.210 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@50503ea8]
2019-03-03 17:21:01.210 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@f85cd2c]
2019-03-03 17:21:01.210 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@a761413]
2019-03-03 17:21:01.210 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:21:01.210 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:21:01.211 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:21:01.211 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:21:01.211 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:21:01.211 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:21:01.212 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:21:01.212 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:21:01.236 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:21:01.236 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:21:01.236 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:21:01.236 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:21:01.237 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:21:01.238 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:21:01.239 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:21:01.240 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:21:01.241 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@f85cd2c]
2019-03-03 17:21:01.241 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:21:01.242 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:21:01.243 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:21:01.243 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:21:01.243 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:21:01.244 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:21:01.244 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:21:01.245 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:21:01.245 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:21:01.246 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:21:01.246 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:21:01.247 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:21:01.247 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:21:01.248 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:21:01.248 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:21:01.248 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:21:01.249 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:21:01.249 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:21:01.251 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:21:01.291 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:21:01.291 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:21:01.296 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null,null]}
2019-03-03 17:21:01.374 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@a761413]
2019-03-03 17:21:01.375 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-03-03 17:21:01.376 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-03-03 17:21:01.404 DEBUG c.c.s.i.ArticleServiceImpl - 未查到任何文章信息
2019-03-03 17:21:03.655 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:21:04.093 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@a761413]
2019-03-03 17:21:04.093 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:21:04.093 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:21:04.129 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:21:04.130 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:21:04.130 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:21:04.131 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:21:04.131 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:21:04.131 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:21:04.132 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:21:04.152 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:21:04.171 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@a761413]
2019-03-03 17:21:04.171 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:21:04.171 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:21:04.231 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:21:04.232 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:21:04.233 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:21:04.234 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:21:04.253 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2f88724b]
2019-03-03 17:21:04.253 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@50503ea8]
2019-03-03 17:21:04.253 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@f85cd2c]
2019-03-03 17:21:04.253 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@a761413]
2019-03-03 17:21:04.255 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:21:04.255 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:21:04.255 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:21:04.255 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:21:04.255 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:21:04.255 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:21:04.256 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:21:04.256 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:21:04.294 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:21:04.294 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:21:04.294 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:21:04.294 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:21:04.294 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:21:04.295 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:21:04.295 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:21:04.295 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:21:04.296 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@f85cd2c]
2019-03-03 17:21:04.296 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:21:04.296 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:21:04.296 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:21:04.296 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:21:04.296 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:21:04.296 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:21:04.296 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:21:04.296 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:21:04.296 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:21:04.298 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:21:04.298 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:21:04.298 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:21:04.299 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:21:04.299 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:21:04.299 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:21:04.299 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:21:04.300 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:21:04.300 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:21:04.301 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:21:04.378 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:21:04.379 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:21:04.384 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null,null]}
2019-03-03 17:21:04.545 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2f88724b]
2019-03-03 17:21:04.546 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-03-03 17:21:04.546 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-03-03 17:21:04.607 DEBUG c.c.s.i.ArticleServiceImpl - 未查到任何文章信息
2019-03-03 17:23:31.997 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:23:32.047 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2f88724b]
2019-03-03 17:23:32.048 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:23:32.048 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:23:32.216 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:23:32.216 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:23:32.217 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:23:32.217 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:23:32.217 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:23:32.217 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:23:32.218 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:23:32.256 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:23:32.264 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2f88724b]
2019-03-03 17:23:32.264 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:23:32.265 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:23:32.291 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:23:32.291 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 3, null, 0, 4, 数据库
2019-03-03 17:23:32.292 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 2, null, 0, 4, 数据库
2019-03-03 17:23:32.292 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 0, 1, 后端技术
2019-03-03 17:23:32.293 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 1, null, 0, 4, 数据库
2019-03-03 17:23:32.293 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 43, 测, 测11111, 2017-10-30 14:47:01.0, 0, null, 0, 1, 后端技术
2019-03-03 17:23:32.362 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:23:32.369 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:23:32.370 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:23:32.371 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:23:32.372 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_LATEST_ARTICLE","params":[10]}
2019-03-03 17:23:32.384 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2f88724b]
2019-03-03 17:23:32.385 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:23:32.386 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:23:32.392 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@f85cd2c]
2019-03-03 17:23:32.393 DEBUG c.c.m.A.findLatestArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@42ea9e0f]
2019-03-03 17:23:32.393 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@a761413]
2019-03-03 17:23:32.393 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:23:32.393 DEBUG c.c.m.A.findLatestArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC LIMIT ? 
2019-03-03 17:23:32.394 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:23:32.394 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:23:32.395 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@50503ea8]
2019-03-03 17:23:32.395 DEBUG c.c.m.A.findLatestArticle - ==> Parameters: 10(Integer)
2019-03-03 17:23:32.395 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:23:32.396 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:23:32.396 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:23:32.398 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:23:32.398 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:23:32.399 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:23:32.399 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:23:32.399 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:23:32.400 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:23:32.400 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:23:32.404 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:23:32.405 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:23:32.406 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@f85cd2c]
2019-03-03 17:23:32.406 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:23:32.406 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:23:32.407 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:23:32.407 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:23:32.408 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:23:32.408 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:23:32.408 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:23:32.409 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:23:32.409 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:23:32.409 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:23:32.409 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:23:32.410 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:23:32.411 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:23:32.411 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:23:32.411 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:23:32.412 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:23:32.413 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:23:32.414 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:23:32.414 DEBUG c.c.m.A.findLatestArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:23:32.415 DEBUG c.c.m.A.findLatestArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 0, null, 0, 4, 数据库
2019-03-03 17:23:32.415 DEBUG c.c.m.A.findLatestArticle - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 2, null, 0, 4, 数据库
2019-03-03 17:23:32.416 DEBUG c.c.m.A.findLatestArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 3, null, 0, 4, 数据库
2019-03-03 17:23:32.416 DEBUG c.c.m.A.findLatestArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 1, null, 0, 4, 数据库
2019-03-03 17:23:32.417 DEBUG c.c.m.A.findLatestArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 0, null, 0, 4, 数据库
2019-03-03 17:23:32.417 DEBUG c.c.m.A.findLatestArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 0, 1, 后端技术
2019-03-03 17:23:32.417 DEBUG c.c.m.A.findLatestArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 0, null, 0, 4, 数据库
2019-03-03 17:23:32.418 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:23:32.418 DEBUG c.c.m.A.findLatestArticle - <==        Row: 54, AA, AA, 2017-11-05 01:09:08.0, 0, null, 0, 4, 数据库
2019-03-03 17:23:32.418 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:23:32.419 DEBUG c.c.m.A.findLatestArticle - <==        Row: 43, 测, 测11111, 2017-10-30 14:47:01.0, 0, null, 0, 1, 后端技术
2019-03-03 17:23:32.438 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:23:32.448 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@42ea9e0f]
2019-03-03 17:23:32.448 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:23:32.448 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:23:32.459 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:23:32.460 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:23:32.460 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:23:32.461 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:23:32.461 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:23:32.461 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:23:32.462 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:23:32.478 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null,null]}
2019-03-03 17:23:32.492 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@42ea9e0f]
2019-03-03 17:23:32.492 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-03-03 17:23:32.493 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-03-03 17:23:32.536 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:23:32.536 DEBUG c.c.m.A.findArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 0, null, 0, 4, 数据库
2019-03-03 17:23:32.537 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 2, null, 0, 4, 数据库
2019-03-03 17:23:32.540 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 3, null, 0, 4, 数据库
2019-03-03 17:23:32.540 DEBUG c.c.m.A.findArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 1, null, 0, 4, 数据库
2019-03-03 17:23:32.541 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 0, null, 0, 4, 数据库
2019-03-03 17:23:32.541 DEBUG c.c.m.A.findArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 0, 1, 后端技术
2019-03-03 17:23:32.542 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 0, null, 0, 4, 数据库
2019-03-03 17:23:32.542 DEBUG c.c.m.A.findArticle - <==        Row: 54, AA, AA, 2017-11-05 01:09:08.0, 0, null, 0, 4, 数据库
2019-03-03 17:23:32.542 DEBUG c.c.m.A.findArticle - <==        Row: 43, 测, 测11111, 2017-10-30 14:47:01.0, 0, null, 0, 1, 后端技术
2019-03-03 17:23:53.707 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["36"]}
2019-03-03 17:23:53.785 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@42ea9e0f]
2019-03-03 17:23:53.785 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-03-03 17:23:53.786 DEBUG c.c.m.A.findDetailById - ==> Parameters: 36(String)
2019-03-03 17:23:53.932 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms, htmlContent, content
2019-03-03 17:23:53.933 DEBUG c.c.m.A.findDetailById - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 0, null, 0, 4, 数据库, <h2 id="h2-u524Du8A00"><a name="前言" class="reference-link"></a><span class="header-link octicon octicon-link"></span>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过”服务器主机IP:应用端口”的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名-&gt;备案-&gt;做IP解析、端口转发的过程。</p>
<h6 id="h6--"><a name="一、申请域名以及实名认证" class="reference-link"></a><span class="header-link octicon octicon-link"></span>一、申请域名以及实名认证</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳<a href="https://cloud.baidu.com/product/bcd/search.html" title="域名申请地址">域名申请地址</a>。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。</p>
<h6 id="h6--"><a name="二、工信部备案" class="reference-link"></a><span class="header-link octicon octicon-link"></span>二、工信部备案</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳<a href="http://beian.bce.baidu.com/" title="百度云备案系统">百度云备案系统</a>，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。</p>
<h6 id="h6--"><a name="三、域名解析、端口转发" class="reference-link"></a><span class="header-link octicon octicon-link"></span>三、域名解析、端口转发</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。</p>
<h6 id="h6--"><a name="四、通过域名进行网站访问" class="reference-link"></a><span class="header-link octicon octicon-link"></span>四、通过域名进行网站访问</h6><p>完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。</p>
, ## 前言
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过"服务器主机IP:应用端口"的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名->备案->做IP解析、端口转发的过程。

###### 一、申请域名以及实名认证
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳[域名申请地址](https://cloud.baidu.com/product/bcd/search.html "域名申请地址")。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。

###### 二、工信部备案
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳[百度云备案系统](http://beian.bce.baidu.com/ "百度云备案系统")，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。

###### 三、域名解析、端口转发
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。

###### 四、通过域名进行网站访问
完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。



2019-03-03 17:23:53.934 DEBUG c.c.m.A.queryRelation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@42ea9e0f]
2019-03-03 17:23:53.934 DEBUG c.c.m.A.queryRelation - ==>  Preparing: SELECT A.id,A.articleId,B.id keyWordId,B.name keyName,A.updatetime FROM mine_article_keyword_relation A INNER JOIN mine_keywords B ON A.keyId = B.id WHERE A.articleId=? 
2019-03-03 17:23:53.935 DEBUG c.c.m.A.queryRelation - ==> Parameters: 36(Integer)
2019-03-03 17:23:54.091 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:23:54.107 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@42ea9e0f]
2019-03-03 17:23:54.107 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:23:54.108 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:23:54.120 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:23:54.121 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:23:54.121 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:23:54.122 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:23:54.123 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:23:54.123 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:23:54.124 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:23:54.142 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:23:54.152 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@42ea9e0f]
2019-03-03 17:23:54.152 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:23:54.153 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:23:54.210 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:23:54.211 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 3, null, 0, 4, 数据库
2019-03-03 17:23:54.211 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 2, null, 0, 4, 数据库
2019-03-03 17:23:54.212 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 0, 1, 后端技术
2019-03-03 17:23:54.212 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 1, null, 0, 4, 数据库
2019-03-03 17:23:54.212 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 43, 测, 测11111, 2017-10-30 14:47:01.0, 0, null, 0, 1, 后端技术
2019-03-03 17:23:54.286 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:23:54.290 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:23:54.292 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:23:54.309 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@f85cd2c]
2019-03-03 17:23:54.309 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@42ea9e0f]
2019-03-03 17:23:54.309 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@50503ea8]
2019-03-03 17:23:54.310 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:23:54.310 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:23:54.311 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:23:54.311 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:23:54.311 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:23:54.312 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:23:54.355 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:23:54.355 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:23:54.355 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:23:54.356 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:23:54.356 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:23:54.356 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:23:54.357 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:23:54.357 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:23:54.357 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@f85cd2c]
2019-03-03 17:23:54.357 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:23:54.358 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:23:54.358 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:23:54.358 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:23:54.358 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:23:54.358 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:23:54.359 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:23:54.359 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:23:54.359 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:23:54.360 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:23:54.360 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:23:54.360 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:23:54.411 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:23:54.412 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:23:56.042 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_PRAISE","params":[36]}
2019-03-03 17:23:56.054 DEBUG c.c.m.A.updateArticlePraiseCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@f85cd2c]
2019-03-03 17:23:56.055 DEBUG c.c.m.A.updateArticlePraiseCount - ==>  Preparing: UPDATE mine_articles SET praisecount = praisecount+1 WHERE id=? 
2019-03-03 17:23:56.055 DEBUG c.c.m.A.updateArticlePraiseCount - ==> Parameters: 36(Integer)
2019-03-03 17:33:58.434 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["36"]}
2019-03-03 17:33:59.060 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:33:59.060 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-03-03 17:33:59.060 DEBUG c.c.m.A.findDetailById - ==> Parameters: 36(String)
2019-03-03 17:33:59.092 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms, htmlContent, content
2019-03-03 17:33:59.092 DEBUG c.c.m.A.findDetailById - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 0, null, 1, 4, 数据库, <h2 id="h2-u524Du8A00"><a name="前言" class="reference-link"></a><span class="header-link octicon octicon-link"></span>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过”服务器主机IP:应用端口”的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名-&gt;备案-&gt;做IP解析、端口转发的过程。</p>
<h6 id="h6--"><a name="一、申请域名以及实名认证" class="reference-link"></a><span class="header-link octicon octicon-link"></span>一、申请域名以及实名认证</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳<a href="https://cloud.baidu.com/product/bcd/search.html" title="域名申请地址">域名申请地址</a>。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。</p>
<h6 id="h6--"><a name="二、工信部备案" class="reference-link"></a><span class="header-link octicon octicon-link"></span>二、工信部备案</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳<a href="http://beian.bce.baidu.com/" title="百度云备案系统">百度云备案系统</a>，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。</p>
<h6 id="h6--"><a name="三、域名解析、端口转发" class="reference-link"></a><span class="header-link octicon octicon-link"></span>三、域名解析、端口转发</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。</p>
<h6 id="h6--"><a name="四、通过域名进行网站访问" class="reference-link"></a><span class="header-link octicon octicon-link"></span>四、通过域名进行网站访问</h6><p>完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。</p>
, ## 前言
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过"服务器主机IP:应用端口"的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名->备案->做IP解析、端口转发的过程。

###### 一、申请域名以及实名认证
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳[域名申请地址](https://cloud.baidu.com/product/bcd/search.html "域名申请地址")。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。

###### 二、工信部备案
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳[百度云备案系统](http://beian.bce.baidu.com/ "百度云备案系统")，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。

###### 三、域名解析、端口转发
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。

###### 四、通过域名进行网站访问
完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。



2019-03-03 17:33:59.093 DEBUG c.c.m.A.queryRelation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:33:59.093 DEBUG c.c.m.A.queryRelation - ==>  Preparing: SELECT A.id,A.articleId,B.id keyWordId,B.name keyName,A.updatetime FROM mine_article_keyword_relation A INNER JOIN mine_keywords B ON A.keyId = B.id WHERE A.articleId=? 
2019-03-03 17:33:59.093 DEBUG c.c.m.A.queryRelation - ==> Parameters: 36(Integer)
2019-03-03 17:34:29.506 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:34:30.097 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:34:30.098 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:34:30.099 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:34:30.431 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:34:30.433 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:34:30.434 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:34:30.436 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:34:30.437 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:34:30.438 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:34:30.439 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:34:30.620 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:34:30.637 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:34:30.638 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:34:30.638 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:34:30.657 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:34:30.658 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 3, null, 0, 4, 数据库
2019-03-03 17:34:30.659 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 2, null, 0, 4, 数据库
2019-03-03 17:34:30.659 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 0, 1, 后端技术
2019-03-03 17:34:30.659 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 1, null, 0, 4, 数据库
2019-03-03 17:34:30.659 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 43, 测, 测11111, 2017-10-30 14:47:01.0, 0, null, 0, 1, 后端技术
2019-03-03 17:34:30.689 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:34:30.694 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:34:30.696 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:34:30.696 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:34:30.698 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_LATEST_ARTICLE","params":[10]}
2019-03-03 17:34:30.831 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:34:30.831 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:34:30.831 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:34:31.071 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:34:31.072 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:34:31.073 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:34:31.074 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:34:31.075 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:34:31.076 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:34:31.077 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:34:31.513 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:34:31.513 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:34:31.514 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:34:31.524 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:34:31.526 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:34:31.526 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:34:31.528 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:34:31.528 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:34:31.542 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:34:31.543 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:34:31.663 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:34:31.665 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:34:31.666 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:34:31.718 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:34:31.718 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:34:31.719 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:34:31.719 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:34:31.719 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:34:31.720 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:34:31.720 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:34:31.720 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:34:31.720 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:34:31.747 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:34:31.748 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:34:31.748 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:34:31.749 DEBUG c.c.m.A.findLatestArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1c8ccc91]
2019-03-03 17:34:31.749 DEBUG c.c.m.A.findLatestArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC LIMIT ? 
2019-03-03 17:34:31.750 DEBUG c.c.m.A.findLatestArticle - ==> Parameters: 10(Integer)
2019-03-03 17:34:31.760 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:34:31.761 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:34:31.761 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:34:31.762 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:34:31.762 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:34:31.763 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:34:31.763 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:34:31.768 DEBUG c.c.m.A.findLatestArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:34:31.768 DEBUG c.c.m.A.findLatestArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 0, null, 1, 4, 数据库
2019-03-03 17:34:31.769 DEBUG c.c.m.A.findLatestArticle - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 2, null, 0, 4, 数据库
2019-03-03 17:34:31.769 DEBUG c.c.m.A.findLatestArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 3, null, 0, 4, 数据库
2019-03-03 17:34:31.769 DEBUG c.c.m.A.findLatestArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 1, null, 0, 4, 数据库
2019-03-03 17:34:31.769 DEBUG c.c.m.A.findLatestArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 0, null, 0, 4, 数据库
2019-03-03 17:34:31.770 DEBUG c.c.m.A.findLatestArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 0, 1, 后端技术
2019-03-03 17:34:31.770 DEBUG c.c.m.A.findLatestArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 0, null, 0, 4, 数据库
2019-03-03 17:34:31.770 DEBUG c.c.m.A.findLatestArticle - <==        Row: 54, AA, AA, 2017-11-05 01:09:08.0, 0, null, 0, 4, 数据库
2019-03-03 17:34:31.770 DEBUG c.c.m.A.findLatestArticle - <==        Row: 43, 测, 测11111, 2017-10-30 14:47:01.0, 0, null, 0, 1, 后端技术
2019-03-03 17:34:31.789 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:34:31.806 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:34:31.806 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:34:31.806 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:34:31.909 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:34:31.909 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:34:31.909 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:34:31.910 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:34:31.910 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:34:31.910 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:34:31.910 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:34:31.923 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null,null]}
2019-03-03 17:34:31.934 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:34:31.934 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-03-03 17:34:31.935 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-03-03 17:34:32.004 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:34:32.005 DEBUG c.c.m.A.findArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 0, null, 1, 4, 数据库
2019-03-03 17:34:32.005 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 2, null, 0, 4, 数据库
2019-03-03 17:34:32.005 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 3, null, 0, 4, 数据库
2019-03-03 17:34:32.006 DEBUG c.c.m.A.findArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 1, null, 0, 4, 数据库
2019-03-03 17:34:32.006 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 0, null, 0, 4, 数据库
2019-03-03 17:34:32.007 DEBUG c.c.m.A.findArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 0, 1, 后端技术
2019-03-03 17:34:32.007 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 0, null, 0, 4, 数据库
2019-03-03 17:34:32.007 DEBUG c.c.m.A.findArticle - <==        Row: 54, AA, AA, 2017-11-05 01:09:08.0, 0, null, 0, 4, 数据库
2019-03-03 17:34:32.007 DEBUG c.c.m.A.findArticle - <==        Row: 43, 测, 测11111, 2017-10-30 14:47:01.0, 0, null, 0, 1, 后端技术
2019-03-03 17:34:35.709 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["36"]}
2019-03-03 17:34:35.791 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:34:35.792 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-03-03 17:34:35.792 DEBUG c.c.m.A.findDetailById - ==> Parameters: 36(String)
2019-03-03 17:34:35.914 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms, htmlContent, content
2019-03-03 17:34:35.914 DEBUG c.c.m.A.findDetailById - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 0, null, 1, 4, 数据库, <h2 id="h2-u524Du8A00"><a name="前言" class="reference-link"></a><span class="header-link octicon octicon-link"></span>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过”服务器主机IP:应用端口”的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名-&gt;备案-&gt;做IP解析、端口转发的过程。</p>
<h6 id="h6--"><a name="一、申请域名以及实名认证" class="reference-link"></a><span class="header-link octicon octicon-link"></span>一、申请域名以及实名认证</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳<a href="https://cloud.baidu.com/product/bcd/search.html" title="域名申请地址">域名申请地址</a>。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。</p>
<h6 id="h6--"><a name="二、工信部备案" class="reference-link"></a><span class="header-link octicon octicon-link"></span>二、工信部备案</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳<a href="http://beian.bce.baidu.com/" title="百度云备案系统">百度云备案系统</a>，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。</p>
<h6 id="h6--"><a name="三、域名解析、端口转发" class="reference-link"></a><span class="header-link octicon octicon-link"></span>三、域名解析、端口转发</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。</p>
<h6 id="h6--"><a name="四、通过域名进行网站访问" class="reference-link"></a><span class="header-link octicon octicon-link"></span>四、通过域名进行网站访问</h6><p>完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。</p>
, ## 前言
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过"服务器主机IP:应用端口"的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名->备案->做IP解析、端口转发的过程。

###### 一、申请域名以及实名认证
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳[域名申请地址](https://cloud.baidu.com/product/bcd/search.html "域名申请地址")。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。

###### 二、工信部备案
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳[百度云备案系统](http://beian.bce.baidu.com/ "百度云备案系统")，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。

###### 三、域名解析、端口转发
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。

###### 四、通过域名进行网站访问
完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。



2019-03-03 17:34:35.915 DEBUG c.c.m.A.queryRelation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:34:35.915 DEBUG c.c.m.A.queryRelation - ==>  Preparing: SELECT A.id,A.articleId,B.id keyWordId,B.name keyName,A.updatetime FROM mine_article_keyword_relation A INNER JOIN mine_keywords B ON A.keyId = B.id WHERE A.articleId=? 
2019-03-03 17:34:35.915 DEBUG c.c.m.A.queryRelation - ==> Parameters: 36(Integer)
2019-03-03 17:38:36.808 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["36"]}
2019-03-03 17:38:37.247 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:38:37.248 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-03-03 17:38:37.248 DEBUG c.c.m.A.findDetailById - ==> Parameters: 36(String)
2019-03-03 17:38:37.432 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms, htmlContent, content
2019-03-03 17:38:37.433 DEBUG c.c.m.A.findDetailById - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 0, null, 1, 4, 数据库, <h2 id="h2-u524Du8A00"><a name="前言" class="reference-link"></a><span class="header-link octicon octicon-link"></span>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过”服务器主机IP:应用端口”的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名-&gt;备案-&gt;做IP解析、端口转发的过程。</p>
<h6 id="h6--"><a name="一、申请域名以及实名认证" class="reference-link"></a><span class="header-link octicon octicon-link"></span>一、申请域名以及实名认证</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳<a href="https://cloud.baidu.com/product/bcd/search.html" title="域名申请地址">域名申请地址</a>。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。</p>
<h6 id="h6--"><a name="二、工信部备案" class="reference-link"></a><span class="header-link octicon octicon-link"></span>二、工信部备案</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳<a href="http://beian.bce.baidu.com/" title="百度云备案系统">百度云备案系统</a>，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。</p>
<h6 id="h6--"><a name="三、域名解析、端口转发" class="reference-link"></a><span class="header-link octicon octicon-link"></span>三、域名解析、端口转发</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。</p>
<h6 id="h6--"><a name="四、通过域名进行网站访问" class="reference-link"></a><span class="header-link octicon octicon-link"></span>四、通过域名进行网站访问</h6><p>完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。</p>
, ## 前言
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过"服务器主机IP:应用端口"的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名->备案->做IP解析、端口转发的过程。

###### 一、申请域名以及实名认证
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳[域名申请地址](https://cloud.baidu.com/product/bcd/search.html "域名申请地址")。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。

###### 二、工信部备案
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳[百度云备案系统](http://beian.bce.baidu.com/ "百度云备案系统")，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。

###### 三、域名解析、端口转发
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。

###### 四、通过域名进行网站访问
完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。



2019-03-03 17:38:37.433 DEBUG c.c.m.A.queryRelation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:38:37.434 DEBUG c.c.m.A.queryRelation - ==>  Preparing: SELECT A.id,A.articleId,B.id keyWordId,B.name keyName,A.updatetime FROM mine_article_keyword_relation A INNER JOIN mine_keywords B ON A.keyId = B.id WHERE A.articleId=? 
2019-03-03 17:38:37.434 DEBUG c.c.m.A.queryRelation - ==> Parameters: 36(Integer)
2019-03-03 17:42:23.830 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["36"]}
2019-03-03 17:42:23.886 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:42:23.887 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-03-03 17:42:23.888 DEBUG c.c.m.A.findDetailById - ==> Parameters: 36(String)
2019-03-03 17:42:24.021 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms, htmlContent, content
2019-03-03 17:42:24.021 DEBUG c.c.m.A.findDetailById - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 0, null, 1, 4, 数据库, <h2 id="h2-u524Du8A00"><a name="前言" class="reference-link"></a><span class="header-link octicon octicon-link"></span>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过”服务器主机IP:应用端口”的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名-&gt;备案-&gt;做IP解析、端口转发的过程。</p>
<h6 id="h6--"><a name="一、申请域名以及实名认证" class="reference-link"></a><span class="header-link octicon octicon-link"></span>一、申请域名以及实名认证</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳<a href="https://cloud.baidu.com/product/bcd/search.html" title="域名申请地址">域名申请地址</a>。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。</p>
<h6 id="h6--"><a name="二、工信部备案" class="reference-link"></a><span class="header-link octicon octicon-link"></span>二、工信部备案</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳<a href="http://beian.bce.baidu.com/" title="百度云备案系统">百度云备案系统</a>，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。</p>
<h6 id="h6--"><a name="三、域名解析、端口转发" class="reference-link"></a><span class="header-link octicon octicon-link"></span>三、域名解析、端口转发</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。</p>
<h6 id="h6--"><a name="四、通过域名进行网站访问" class="reference-link"></a><span class="header-link octicon octicon-link"></span>四、通过域名进行网站访问</h6><p>完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。</p>
, ## 前言
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过"服务器主机IP:应用端口"的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名->备案->做IP解析、端口转发的过程。

###### 一、申请域名以及实名认证
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳[域名申请地址](https://cloud.baidu.com/product/bcd/search.html "域名申请地址")。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。

###### 二、工信部备案
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳[百度云备案系统](http://beian.bce.baidu.com/ "百度云备案系统")，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。

###### 三、域名解析、端口转发
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。

###### 四、通过域名进行网站访问
完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。



2019-03-03 17:42:24.022 DEBUG c.c.m.A.queryRelation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:42:24.022 DEBUG c.c.m.A.queryRelation - ==>  Preparing: SELECT A.id,A.articleId,B.id keyWordId,B.name keyName,A.updatetime FROM mine_article_keyword_relation A INNER JOIN mine_keywords B ON A.keyId = B.id WHERE A.articleId=? 
2019-03-03 17:42:24.022 DEBUG c.c.m.A.queryRelation - ==> Parameters: 36(Integer)
2019-03-03 17:42:24.160 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:42:24.196 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:42:24.197 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:42:24.197 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:42:24.256 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:42:24.257 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:42:24.258 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:42:24.260 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:42:24.261 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:42:24.262 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:42:24.263 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:42:24.295 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:42:24.313 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:42:24.313 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:42:24.314 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:42:24.481 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:42:24.482 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 3, null, 0, 4, 数据库
2019-03-03 17:42:24.483 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 2, null, 0, 4, 数据库
2019-03-03 17:42:24.484 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 0, 1, 后端技术
2019-03-03 17:42:24.485 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 1, null, 0, 4, 数据库
2019-03-03 17:42:24.486 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 43, 测, 测11111, 2017-10-30 14:47:01.0, 0, null, 0, 1, 后端技术
2019-03-03 17:42:24.678 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:42:24.682 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:42:24.684 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:42:24.764 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:42:24.765 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:42:24.765 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:42:24.820 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:42:24.820 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:42:24.821 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:42:24.821 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:42:24.821 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:42:24.821 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:42:24.822 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:42:24.848 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:42:24.849 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:42:24.849 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:42:24.859 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:42:24.860 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:42:24.861 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:42:24.862 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:42:24.862 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:42:24.872 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:42:24.872 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:42:24.956 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:42:24.957 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:42:24.957 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:42:25.017 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:42:25.017 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:42:25.018 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:42:25.018 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:42:25.018 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:42:25.018 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:42:25.018 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:42:25.019 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:42:25.019 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:42:29.940 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["36"]}
2019-03-03 17:42:29.964 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3051b886]
2019-03-03 17:42:29.965 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-03-03 17:42:29.965 DEBUG c.c.m.A.findDetailById - ==> Parameters: 36(String)
2019-03-03 17:42:29.992 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms, htmlContent, content
2019-03-03 17:42:29.993 DEBUG c.c.m.A.findDetailById - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 0, null, 1, 4, 数据库, <h2 id="h2-u524Du8A00"><a name="前言" class="reference-link"></a><span class="header-link octicon octicon-link"></span>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过”服务器主机IP:应用端口”的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名-&gt;备案-&gt;做IP解析、端口转发的过程。</p>
<h6 id="h6--"><a name="一、申请域名以及实名认证" class="reference-link"></a><span class="header-link octicon octicon-link"></span>一、申请域名以及实名认证</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳<a href="https://cloud.baidu.com/product/bcd/search.html" title="域名申请地址">域名申请地址</a>。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。</p>
<h6 id="h6--"><a name="二、工信部备案" class="reference-link"></a><span class="header-link octicon octicon-link"></span>二、工信部备案</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳<a href="http://beian.bce.baidu.com/" title="百度云备案系统">百度云备案系统</a>，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。</p>
<h6 id="h6--"><a name="三、域名解析、端口转发" class="reference-link"></a><span class="header-link octicon octicon-link"></span>三、域名解析、端口转发</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。</p>
<h6 id="h6--"><a name="四、通过域名进行网站访问" class="reference-link"></a><span class="header-link octicon octicon-link"></span>四、通过域名进行网站访问</h6><p>完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。</p>
, ## 前言
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过"服务器主机IP:应用端口"的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名->备案->做IP解析、端口转发的过程。

###### 一、申请域名以及实名认证
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳[域名申请地址](https://cloud.baidu.com/product/bcd/search.html "域名申请地址")。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。

###### 二、工信部备案
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳[百度云备案系统](http://beian.bce.baidu.com/ "百度云备案系统")，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。

###### 三、域名解析、端口转发
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。

###### 四、通过域名进行网站访问
完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。



2019-03-03 17:42:29.994 DEBUG c.c.m.A.queryRelation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3051b886]
2019-03-03 17:42:29.995 DEBUG c.c.m.A.queryRelation - ==>  Preparing: SELECT A.id,A.articleId,B.id keyWordId,B.name keyName,A.updatetime FROM mine_article_keyword_relation A INNER JOIN mine_keywords B ON A.keyId = B.id WHERE A.articleId=? 
2019-03-03 17:42:29.995 DEBUG c.c.m.A.queryRelation - ==> Parameters: 36(Integer)
2019-03-03 17:42:30.138 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:42:30.174 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3051b886]
2019-03-03 17:42:30.174 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:42:30.174 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:42:30.203 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:42:30.204 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:42:30.205 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:42:30.205 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:42:30.206 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:42:30.206 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:42:30.206 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:42:30.274 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:42:30.319 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3051b886]
2019-03-03 17:42:30.319 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:42:30.319 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:42:30.366 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:42:30.366 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 3, null, 0, 4, 数据库
2019-03-03 17:42:30.366 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 2, null, 0, 4, 数据库
2019-03-03 17:42:30.367 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 0, 1, 后端技术
2019-03-03 17:42:30.367 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 1, null, 0, 4, 数据库
2019-03-03 17:42:30.367 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 43, 测, 测11111, 2017-10-30 14:47:01.0, 0, null, 0, 1, 后端技术
2019-03-03 17:42:30.399 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:42:30.402 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:42:30.403 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:42:30.422 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:42:30.422 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3051b886]
2019-03-03 17:42:30.423 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:42:30.423 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:42:30.423 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:42:30.424 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:42:30.456 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:42:30.456 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:42:30.456 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:42:30.456 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:42:30.456 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:42:30.457 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:42:30.457 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:42:30.457 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:42:30.457 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:42:30.457 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:42:30.458 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:42:30.458 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:42:30.564 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:42:30.564 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:42:30.778 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3051b886]
2019-03-03 17:42:30.778 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:42:30.779 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:42:30.973 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:42:30.973 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:42:30.973 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:42:30.974 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:42:30.974 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:42:30.974 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:42:30.975 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:42:30.975 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:42:30.975 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:42:33.214 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["36"]}
2019-03-03 17:42:34.236 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5b9fea4b]
2019-03-03 17:42:34.236 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-03-03 17:42:34.236 DEBUG c.c.m.A.findDetailById - ==> Parameters: 36(String)
2019-03-03 17:42:35.047 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms, htmlContent, content
2019-03-03 17:42:35.048 DEBUG c.c.m.A.findDetailById - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 0, null, 1, 4, 数据库, <h2 id="h2-u524Du8A00"><a name="前言" class="reference-link"></a><span class="header-link octicon octicon-link"></span>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过”服务器主机IP:应用端口”的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名-&gt;备案-&gt;做IP解析、端口转发的过程。</p>
<h6 id="h6--"><a name="一、申请域名以及实名认证" class="reference-link"></a><span class="header-link octicon octicon-link"></span>一、申请域名以及实名认证</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳<a href="https://cloud.baidu.com/product/bcd/search.html" title="域名申请地址">域名申请地址</a>。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。</p>
<h6 id="h6--"><a name="二、工信部备案" class="reference-link"></a><span class="header-link octicon octicon-link"></span>二、工信部备案</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳<a href="http://beian.bce.baidu.com/" title="百度云备案系统">百度云备案系统</a>，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。</p>
<h6 id="h6--"><a name="三、域名解析、端口转发" class="reference-link"></a><span class="header-link octicon octicon-link"></span>三、域名解析、端口转发</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。</p>
<h6 id="h6--"><a name="四、通过域名进行网站访问" class="reference-link"></a><span class="header-link octicon octicon-link"></span>四、通过域名进行网站访问</h6><p>完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。</p>
, ## 前言
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过"服务器主机IP:应用端口"的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名->备案->做IP解析、端口转发的过程。

###### 一、申请域名以及实名认证
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳[域名申请地址](https://cloud.baidu.com/product/bcd/search.html "域名申请地址")。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。

###### 二、工信部备案
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳[百度云备案系统](http://beian.bce.baidu.com/ "百度云备案系统")，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。

###### 三、域名解析、端口转发
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。

###### 四、通过域名进行网站访问
完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。



2019-03-03 17:42:35.048 DEBUG c.c.m.A.queryRelation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5b9fea4b]
2019-03-03 17:42:35.049 DEBUG c.c.m.A.queryRelation - ==>  Preparing: SELECT A.id,A.articleId,B.id keyWordId,B.name keyName,A.updatetime FROM mine_article_keyword_relation A INNER JOIN mine_keywords B ON A.keyId = B.id WHERE A.articleId=? 
2019-03-03 17:42:35.049 DEBUG c.c.m.A.queryRelation - ==> Parameters: 36(Integer)
2019-03-03 17:42:35.157 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:42:35.204 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5b9fea4b]
2019-03-03 17:42:35.204 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:42:35.205 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:42:35.238 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:42:35.239 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:42:35.240 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:42:35.240 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:42:35.240 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:42:35.240 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:42:35.241 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:42:35.258 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:42:35.282 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5b9fea4b]
2019-03-03 17:42:35.283 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:42:35.284 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:42:35.304 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:42:35.305 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 3, null, 0, 4, 数据库
2019-03-03 17:42:35.306 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 2, null, 0, 4, 数据库
2019-03-03 17:42:35.306 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 0, 1, 后端技术
2019-03-03 17:42:35.306 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 1, null, 0, 4, 数据库
2019-03-03 17:42:35.307 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 43, 测, 测11111, 2017-10-30 14:47:01.0, 0, null, 0, 1, 后端技术
2019-03-03 17:42:35.326 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:42:35.330 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:42:35.330 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:42:35.415 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3051b886]
2019-03-03 17:42:35.415 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5b9fea4b]
2019-03-03 17:42:35.415 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:42:35.415 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:42:35.415 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:42:35.415 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:42:35.416 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:42:35.416 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:42:35.416 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:42:35.570 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:42:35.570 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:42:35.570 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:42:35.570 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:42:35.570 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:42:35.571 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:42:35.571 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:42:35.571 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3051b886]
2019-03-03 17:42:35.571 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:42:35.572 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:42:35.572 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:42:35.572 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:42:35.572 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:42:35.572 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:42:35.573 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:42:35.573 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:42:35.573 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:42:35.573 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:42:35.574 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:42:35.574 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:42:35.574 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:42:36.398 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:42:36.398 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:42:53.397 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:42:53.481 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3051b886]
2019-03-03 17:42:53.482 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:42:53.482 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:42:53.815 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:42:53.816 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:42:53.816 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:42:53.816 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:42:53.817 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:42:53.817 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:42:53.817 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:42:53.848 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:42:53.863 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3051b886]
2019-03-03 17:42:53.864 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:42:53.864 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:42:53.923 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:42:53.924 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 3, null, 0, 4, 数据库
2019-03-03 17:42:53.924 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 2, null, 0, 4, 数据库
2019-03-03 17:42:53.924 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 0, 1, 后端技术
2019-03-03 17:42:53.924 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 1, null, 0, 4, 数据库
2019-03-03 17:42:53.924 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 43, 测, 测11111, 2017-10-30 14:47:01.0, 0, null, 0, 1, 后端技术
2019-03-03 17:42:54.039 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:42:54.042 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:42:54.044 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:42:54.047 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:42:54.049 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_LATEST_ARTICLE","params":[10]}
2019-03-03 17:42:54.104 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3051b886]
2019-03-03 17:42:54.104 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5b9fea4b]
2019-03-03 17:42:54.104 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:42:54.104 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:42:54.105 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:42:54.105 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:42:54.105 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:42:54.105 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:42:54.105 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:42:54.154 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:42:54.154 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:42:54.155 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:42:54.155 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:42:54.156 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:42:54.156 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5b9fea4b]
2019-03-03 17:42:54.156 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:42:54.156 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:42:54.157 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:42:54.157 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:42:54.157 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:42:54.158 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:42:54.158 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:42:54.158 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:42:54.196 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:42:54.196 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:42:54.196 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:42:54.197 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:42:54.197 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:42:54.198 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:42:54.198 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:42:54.199 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:42:54.199 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:42:54.257 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:42:54.258 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:42:54.260 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:42:54.421 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:42:54.421 DEBUG c.c.m.A.findLatestArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5b9fea4b]
2019-03-03 17:42:54.421 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:42:54.422 DEBUG c.c.m.A.findLatestArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC LIMIT ? 
2019-03-03 17:42:54.422 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:42:54.422 DEBUG c.c.m.A.findLatestArticle - ==> Parameters: 10(Integer)
2019-03-03 17:42:54.422 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:42:54.423 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:42:54.423 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:42:54.424 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:42:54.536 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:42:54.576 DEBUG c.c.m.A.findLatestArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:42:54.576 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:42:54.577 DEBUG c.c.m.A.findLatestArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 0, null, 1, 4, 数据库
2019-03-03 17:42:54.577 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:42:54.578 DEBUG c.c.m.A.findLatestArticle - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 2, null, 0, 4, 数据库
2019-03-03 17:42:54.578 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:42:54.578 DEBUG c.c.m.A.findLatestArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 3, null, 0, 4, 数据库
2019-03-03 17:42:54.579 DEBUG c.c.m.A.findLatestArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 1, null, 0, 4, 数据库
2019-03-03 17:42:54.579 DEBUG c.c.m.A.findLatestArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 0, null, 0, 4, 数据库
2019-03-03 17:42:54.579 DEBUG c.c.m.A.findLatestArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 0, 1, 后端技术
2019-03-03 17:42:54.579 DEBUG c.c.m.A.findLatestArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 0, null, 0, 4, 数据库
2019-03-03 17:42:54.579 DEBUG c.c.m.A.findLatestArticle - <==        Row: 54, AA, AA, 2017-11-05 01:09:08.0, 0, null, 0, 4, 数据库
2019-03-03 17:42:54.580 DEBUG c.c.m.A.findLatestArticle - <==        Row: 43, 测, 测11111, 2017-10-30 14:47:01.0, 0, null, 0, 1, 后端技术
2019-03-03 17:42:54.601 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:42:54.601 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:42:54.602 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:42:54.602 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:42:54.602 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:42:54.602 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:42:54.602 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:42:54.631 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null,null]}
2019-03-03 17:42:54.720 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@71a79d58]
2019-03-03 17:42:54.720 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-03-03 17:42:54.721 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-03-03 17:42:54.749 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:42:54.749 DEBUG c.c.m.A.findArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 0, null, 1, 4, 数据库
2019-03-03 17:42:54.750 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 2, null, 0, 4, 数据库
2019-03-03 17:42:54.750 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 3, null, 0, 4, 数据库
2019-03-03 17:42:54.750 DEBUG c.c.m.A.findArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 1, null, 0, 4, 数据库
2019-03-03 17:42:54.750 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 0, null, 0, 4, 数据库
2019-03-03 17:42:54.750 DEBUG c.c.m.A.findArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 0, 1, 后端技术
2019-03-03 17:42:54.751 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 0, null, 0, 4, 数据库
2019-03-03 17:42:54.751 DEBUG c.c.m.A.findArticle - <==        Row: 54, AA, AA, 2017-11-05 01:09:08.0, 0, null, 0, 4, 数据库
2019-03-03 17:42:54.751 DEBUG c.c.m.A.findArticle - <==        Row: 43, 测, 测11111, 2017-10-30 14:47:01.0, 0, null, 0, 1, 后端技术
2019-03-03 17:42:58.009 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:42:58.236 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@71a79d58]
2019-03-03 17:42:58.237 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:42:58.239 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:42:58.383 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:42:58.384 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:42:58.385 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:42:58.386 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:42:58.387 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:42:58.388 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:42:58.389 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:42:58.430 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:42:58.443 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@71a79d58]
2019-03-03 17:42:58.443 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:42:58.443 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:42:58.472 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:42:58.473 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 3, null, 0, 4, 数据库
2019-03-03 17:42:58.474 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 2, null, 0, 4, 数据库
2019-03-03 17:42:58.476 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 0, 1, 后端技术
2019-03-03 17:42:58.477 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 1, null, 0, 4, 数据库
2019-03-03 17:42:58.478 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 43, 测, 测11111, 2017-10-30 14:47:01.0, 0, null, 0, 1, 后端技术
2019-03-03 17:42:58.523 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:42:58.524 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:42:58.524 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:42:58.633 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@71a79d58]
2019-03-03 17:42:58.633 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:42:58.633 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5b9fea4b]
2019-03-03 17:42:58.634 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:42:58.634 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:42:58.634 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:42:58.634 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:42:58.635 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:42:58.635 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:42:58.678 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:42:58.678 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:42:58.678 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:42:58.679 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:42:58.680 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:42:58.680 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:42:58.681 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:42:58.681 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:42:58.682 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@71a79d58]
2019-03-03 17:42:58.682 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:42:58.682 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:42:58.682 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:42:58.682 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:42:58.683 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:42:58.683 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:42:58.683 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:42:58.683 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:42:58.683 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:42:58.683 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:42:58.683 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:42:58.684 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:42:58.693 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:42:58.693 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:43:01.285 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:43:01.558 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@71a79d58]
2019-03-03 17:43:01.558 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:43:01.559 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:43:01.646 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:43:01.646 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:43:01.646 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:43:01.647 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:43:01.647 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:43:01.647 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:43:01.648 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:43:01.718 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:43:01.734 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@71a79d58]
2019-03-03 17:43:01.734 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:43:01.734 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:43:01.771 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:43:01.771 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 3, null, 0, 4, 数据库
2019-03-03 17:43:01.772 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 2, null, 0, 4, 数据库
2019-03-03 17:43:01.772 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 0, 1, 后端技术
2019-03-03 17:43:01.772 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 1, null, 0, 4, 数据库
2019-03-03 17:43:01.772 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 43, 测, 测11111, 2017-10-30 14:47:01.0, 0, null, 0, 1, 后端技术
2019-03-03 17:43:01.925 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:43:01.930 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:43:01.930 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:43:01.933 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:43:01.933 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_LATEST_ARTICLE","params":[10]}
2019-03-03 17:43:01.980 DEBUG c.c.m.A.findLatestArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3051b886]
2019-03-03 17:43:01.980 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:43:01.980 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5b9fea4b]
2019-03-03 17:43:01.980 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@71a79d58]
2019-03-03 17:43:01.980 DEBUG c.c.m.A.findLatestArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC LIMIT ? 
2019-03-03 17:43:01.980 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:43:01.981 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:43:01.981 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:43:01.981 DEBUG c.c.m.A.findLatestArticle - ==> Parameters: 10(Integer)
2019-03-03 17:43:01.981 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:43:01.981 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:43:01.982 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:43:02.014 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:43:02.014 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:43:02.015 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:43:02.015 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:43:02.015 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:43:02.016 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:43:02.016 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:43:02.016 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5b9fea4b]
2019-03-03 17:43:02.016 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:43:02.016 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:43:02.016 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:43:02.017 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:43:02.017 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:43:02.018 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:43:02.018 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:43:02.018 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:43:02.018 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:43:02.018 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:43:02.019 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:43:02.019 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:43:02.019 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:43:02.028 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:43:02.028 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:43:02.035 DEBUG c.c.m.A.findLatestArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:43:02.035 DEBUG c.c.m.A.findLatestArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 0, null, 1, 4, 数据库
2019-03-03 17:43:02.036 DEBUG c.c.m.A.findLatestArticle - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 2, null, 0, 4, 数据库
2019-03-03 17:43:02.036 DEBUG c.c.m.A.findLatestArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 3, null, 0, 4, 数据库
2019-03-03 17:43:02.036 DEBUG c.c.m.A.findLatestArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 1, null, 0, 4, 数据库
2019-03-03 17:43:02.036 DEBUG c.c.m.A.findLatestArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 0, null, 0, 4, 数据库
2019-03-03 17:43:02.037 DEBUG c.c.m.A.findLatestArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 0, 1, 后端技术
2019-03-03 17:43:02.037 DEBUG c.c.m.A.findLatestArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 0, null, 0, 4, 数据库
2019-03-03 17:43:02.038 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@71a79d58]
2019-03-03 17:43:02.038 DEBUG c.c.m.A.findLatestArticle - <==        Row: 54, AA, AA, 2017-11-05 01:09:08.0, 0, null, 0, 4, 数据库
2019-03-03 17:43:02.039 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:43:02.039 DEBUG c.c.m.A.findLatestArticle - <==        Row: 43, 测, 测11111, 2017-10-30 14:47:01.0, 0, null, 0, 1, 后端技术
2019-03-03 17:43:02.040 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:43:02.065 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:43:02.065 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:43:02.066 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:43:02.066 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:43:02.066 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:43:02.066 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:43:02.067 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:43:02.124 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:43:02.135 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@71a79d58]
2019-03-03 17:43:02.136 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:43:02.136 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:43:02.146 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:43:02.147 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:43:02.147 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:43:02.147 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:43:02.147 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:43:02.148 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:43:02.148 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:43:02.158 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null,null]}
2019-03-03 17:43:02.165 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@71a79d58]
2019-03-03 17:43:02.165 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-03-03 17:43:02.165 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-03-03 17:43:02.186 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:43:02.187 DEBUG c.c.m.A.findArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 0, null, 1, 4, 数据库
2019-03-03 17:43:02.187 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 2, null, 0, 4, 数据库
2019-03-03 17:43:02.187 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 3, null, 0, 4, 数据库
2019-03-03 17:43:02.188 DEBUG c.c.m.A.findArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 1, null, 0, 4, 数据库
2019-03-03 17:43:02.188 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 0, null, 0, 4, 数据库
2019-03-03 17:43:02.188 DEBUG c.c.m.A.findArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 0, 1, 后端技术
2019-03-03 17:43:02.189 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 0, null, 0, 4, 数据库
2019-03-03 17:43:02.189 DEBUG c.c.m.A.findArticle - <==        Row: 54, AA, AA, 2017-11-05 01:09:08.0, 0, null, 0, 4, 数据库
2019-03-03 17:43:02.189 DEBUG c.c.m.A.findArticle - <==        Row: 43, 测, 测11111, 2017-10-30 14:47:01.0, 0, null, 0, 1, 后端技术
2019-03-03 17:43:04.114 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["35"]}
2019-03-03 17:43:04.187 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@71a79d58]
2019-03-03 17:43:04.187 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-03-03 17:43:04.187 DEBUG c.c.m.A.findDetailById - ==> Parameters: 35(String)
2019-03-03 17:43:04.204 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms, htmlContent, content
2019-03-03 17:43:04.205 DEBUG c.c.m.A.findDetailById - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 1, null, 0, 4, 数据库, , #### 前言
    一直以来都想开发出一个属于自己的博客网站，可惜总会因为各种原因没有去动手实现，可能是因为懒吧。如今断断续续地终于开发出了博客的V1.0版本，界面比较简陋。后续我会再花零散的时间对本博客进行不断改造升级，并在此博文中记录每个版本更新的功能点。

#### 开发技术
	本博客网站采用前端和后端完全分离、后端按业务点进行模块分离的思想进行开发.
	前端技术：html+css+javascript+jquery+bootstrap+markdown.
	后端技术：springboot+mybatis+redis+druid.

#### V1.0
	完成前后端基础核心架构搭建开发.
	完成文章列表分页展示、最新文章、随机文章、随笔展示功能点开发.

2019-03-03 17:43:04.205 DEBUG c.c.m.A.queryRelation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@71a79d58]
2019-03-03 17:43:04.206 DEBUG c.c.m.A.queryRelation - ==>  Preparing: SELECT A.id,A.articleId,B.id keyWordId,B.name keyName,A.updatetime FROM mine_article_keyword_relation A INNER JOIN mine_keywords B ON A.keyId = B.id WHERE A.articleId=? 
2019-03-03 17:43:04.206 DEBUG c.c.m.A.queryRelation - ==> Parameters: 35(Integer)
2019-03-03 17:43:04.336 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:43:04.490 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@71a79d58]
2019-03-03 17:43:04.491 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:43:04.491 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:43:04.533 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:43:04.534 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:43:04.535 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:43:04.536 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:43:04.537 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:43:04.538 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:43:04.539 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:43:04.602 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:43:04.721 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@71a79d58]
2019-03-03 17:43:04.721 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:43:04.722 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:43:04.827 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:43:04.827 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 3, null, 0, 4, 数据库
2019-03-03 17:43:04.828 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 2, null, 0, 4, 数据库
2019-03-03 17:43:04.828 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 0, 1, 后端技术
2019-03-03 17:43:04.828 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 1, null, 0, 4, 数据库
2019-03-03 17:43:04.828 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 43, 测, 测11111, 2017-10-30 14:47:01.0, 0, null, 0, 1, 后端技术
2019-03-03 17:43:04.874 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:43:04.878 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:43:04.878 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:43:04.929 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@71a79d58]
2019-03-03 17:43:04.929 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3051b886]
2019-03-03 17:43:04.929 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1d755dbd]
2019-03-03 17:43:04.930 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:43:04.930 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:43:04.931 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:43:04.931 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:43:04.931 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:43:04.932 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:43:05.011 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:43:05.011 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:43:05.011 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:43:05.013 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:43:05.013 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:43:05.014 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:43:05.014 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:43:05.014 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1d755dbd]
2019-03-03 17:43:05.014 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:43:05.015 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:43:05.015 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:43:05.015 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:43:05.015 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:43:05.015 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:43:05.016 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:43:05.016 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:43:05.016 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:43:05.016 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:43:05.017 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:43:05.017 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:43:05.017 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:43:05.066 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:43:05.067 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:44:04.095 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["36"]}
2019-03-03 17:44:04.214 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1d755dbd]
2019-03-03 17:44:04.214 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-03-03 17:44:04.214 DEBUG c.c.m.A.findDetailById - ==> Parameters: 36(String)
2019-03-03 17:44:04.675 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms, htmlContent, content
2019-03-03 17:44:04.676 DEBUG c.c.m.A.findDetailById - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 0, null, 1, 4, 数据库, <h2 id="h2-u524Du8A00"><a name="前言" class="reference-link"></a><span class="header-link octicon octicon-link"></span>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过”服务器主机IP:应用端口”的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名-&gt;备案-&gt;做IP解析、端口转发的过程。</p>
<h6 id="h6--"><a name="一、申请域名以及实名认证" class="reference-link"></a><span class="header-link octicon octicon-link"></span>一、申请域名以及实名认证</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳<a href="https://cloud.baidu.com/product/bcd/search.html" title="域名申请地址">域名申请地址</a>。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。</p>
<h6 id="h6--"><a name="二、工信部备案" class="reference-link"></a><span class="header-link octicon octicon-link"></span>二、工信部备案</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳<a href="http://beian.bce.baidu.com/" title="百度云备案系统">百度云备案系统</a>，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。</p>
<h6 id="h6--"><a name="三、域名解析、端口转发" class="reference-link"></a><span class="header-link octicon octicon-link"></span>三、域名解析、端口转发</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。</p>
<h6 id="h6--"><a name="四、通过域名进行网站访问" class="reference-link"></a><span class="header-link octicon octicon-link"></span>四、通过域名进行网站访问</h6><p>完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。</p>
, ## 前言
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过"服务器主机IP:应用端口"的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名->备案->做IP解析、端口转发的过程。

###### 一、申请域名以及实名认证
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳[域名申请地址](https://cloud.baidu.com/product/bcd/search.html "域名申请地址")。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。

###### 二、工信部备案
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳[百度云备案系统](http://beian.bce.baidu.com/ "百度云备案系统")，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。

###### 三、域名解析、端口转发
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。

###### 四、通过域名进行网站访问
完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。



2019-03-03 17:44:04.677 DEBUG c.c.m.A.queryRelation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1d755dbd]
2019-03-03 17:44:04.677 DEBUG c.c.m.A.queryRelation - ==>  Preparing: SELECT A.id,A.articleId,B.id keyWordId,B.name keyName,A.updatetime FROM mine_article_keyword_relation A INNER JOIN mine_keywords B ON A.keyId = B.id WHERE A.articleId=? 
2019-03-03 17:44:04.677 DEBUG c.c.m.A.queryRelation - ==> Parameters: 36(Integer)
2019-03-03 17:44:04.764 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:44:04.780 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1d755dbd]
2019-03-03 17:44:04.781 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:44:04.782 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:44:04.817 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:44:04.817 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:44:04.818 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:44:04.818 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:44:04.818 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:44:04.818 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:44:04.818 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:44:04.898 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:44:04.917 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1d755dbd]
2019-03-03 17:44:04.917 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:44:04.918 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:44:04.954 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:44:04.955 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 3, null, 0, 4, 数据库
2019-03-03 17:44:04.955 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 2, null, 0, 4, 数据库
2019-03-03 17:44:04.955 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 0, 1, 后端技术
2019-03-03 17:44:04.955 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 1, null, 0, 4, 数据库
2019-03-03 17:44:04.956 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 43, 测, 测11111, 2017-10-30 14:47:01.0, 0, null, 0, 1, 后端技术
2019-03-03 17:44:05.162 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:44:05.170 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:44:05.171 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:44:05.340 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1d755dbd]
2019-03-03 17:44:05.340 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@71a79d58]
2019-03-03 17:44:05.340 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3051b886]
2019-03-03 17:44:05.341 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:44:05.341 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:44:05.341 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:44:05.342 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:44:05.342 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:44:05.342 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:44:05.546 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:44:05.546 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:44:05.546 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:44:05.548 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:44:05.549 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:44:05.550 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:44:05.551 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:44:05.552 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:44:05.553 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3051b886]
2019-03-03 17:44:05.553 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:44:05.554 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:44:05.554 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:44:05.555 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:44:05.556 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:44:05.557 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:44:05.557 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:44:05.559 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:44:05.560 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:44:05.561 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:44:05.562 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:44:05.564 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:44:05.868 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:44:05.869 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:45:29.526 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:45:29.616 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3051b886]
2019-03-03 17:45:29.616 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:45:29.616 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:45:29.649 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:45:29.649 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:45:29.649 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:45:29.650 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:45:29.650 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:45:29.650 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:45:29.650 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:45:29.685 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:45:29.715 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3051b886]
2019-03-03 17:45:29.716 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:45:29.716 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:45:29.767 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:45:29.767 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 3, null, 0, 4, 数据库
2019-03-03 17:45:29.768 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 2, null, 0, 4, 数据库
2019-03-03 17:45:29.768 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 0, 1, 后端技术
2019-03-03 17:45:29.768 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 1, null, 0, 4, 数据库
2019-03-03 17:45:29.768 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 43, 测, 测11111, 2017-10-30 14:47:01.0, 0, null, 0, 1, 后端技术
2019-03-03 17:45:29.795 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:45:29.802 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:45:29.802 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:45:29.802 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:45:29.804 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_LATEST_ARTICLE","params":[10]}
2019-03-03 17:45:29.823 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5b9fea4b]
2019-03-03 17:45:29.823 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@1d755dbd]
2019-03-03 17:45:29.823 DEBUG c.c.m.A.findLatestArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:45:29.823 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@71a79d58]
2019-03-03 17:45:29.823 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3051b886]
2019-03-03 17:45:29.824 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:45:29.824 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:45:29.824 DEBUG c.c.m.A.findLatestArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC LIMIT ? 
2019-03-03 17:45:29.824 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:45:29.824 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:45:29.825 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:45:29.825 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:45:29.825 DEBUG c.c.m.A.findLatestArticle - ==> Parameters: 10(Integer)
2019-03-03 17:45:29.825 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:45:29.826 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:45:29.835 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:45:29.835 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:45:29.835 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:45:29.835 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:45:29.835 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:45:29.836 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:45:29.836 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:45:29.836 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:45:29.837 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@71a79d58]
2019-03-03 17:45:29.837 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:45:29.837 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:45:29.837 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:45:29.837 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:45:29.838 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:45:29.838 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:45:29.838 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:45:29.838 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:45:29.839 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:45:29.839 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:45:29.839 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:45:29.840 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:45:29.852 DEBUG c.c.m.A.findLatestArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:45:29.852 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:45:29.852 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:45:29.853 DEBUG c.c.m.A.findLatestArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 0, null, 1, 4, 数据库
2019-03-03 17:45:29.854 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:45:29.855 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
2019-03-03 17:45:29.855 DEBUG c.c.m.A.findLatestArticle - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 2, null, 0, 4, 数据库
2019-03-03 17:45:29.856 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:45:29.857 DEBUG c.c.m.A.findLatestArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 3, null, 0, 4, 数据库
2019-03-03 17:45:29.857 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:45:29.858 DEBUG c.c.m.A.findLatestArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 1, null, 0, 4, 数据库
2019-03-03 17:45:29.858 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:45:29.859 DEBUG c.c.m.A.findLatestArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 0, null, 0, 4, 数据库
2019-03-03 17:45:29.859 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:45:29.859 DEBUG c.c.m.A.findLatestArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 0, 1, 后端技术
2019-03-03 17:45:29.860 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:45:29.860 DEBUG c.c.m.A.findLatestArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 0, null, 0, 4, 数据库
2019-03-03 17:45:29.861 DEBUG c.c.m.A.findLatestArticle - <==        Row: 54, AA, AA, 2017-11-05 01:09:08.0, 0, null, 0, 4, 数据库
2019-03-03 17:45:29.861 DEBUG c.c.m.A.findLatestArticle - <==        Row: 43, 测, 测11111, 2017-10-30 14:47:01.0, 0, null, 0, 1, 后端技术
2019-03-03 17:45:29.871 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:45:29.882 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:45:29.883 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:45:29.883 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:45:29.895 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:45:29.895 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:45:29.896 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:45:29.896 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:45:29.896 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:45:29.896 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:45:29.897 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:45:29.921 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null,null]}
2019-03-03 17:45:29.941 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:45:29.941 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-03-03 17:45:29.941 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-03-03 17:45:30.002 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:45:30.004 DEBUG c.c.m.A.findArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 0, null, 1, 4, 数据库
2019-03-03 17:45:30.005 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 2, null, 0, 4, 数据库
2019-03-03 17:45:30.006 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 3, null, 0, 4, 数据库
2019-03-03 17:45:30.007 DEBUG c.c.m.A.findArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 1, null, 0, 4, 数据库
2019-03-03 17:45:30.007 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2019-01-18 19:51:52.0, 0, null, 0, 4, 数据库
2019-03-03 17:45:30.008 DEBUG c.c.m.A.findArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 0, 1, 后端技术
2019-03-03 17:45:30.009 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2018-12-14 19:51:52.0, 0, null, 0, 4, 数据库
2019-03-03 17:45:30.010 DEBUG c.c.m.A.findArticle - <==        Row: 54, AA, AA, 2017-11-05 01:09:08.0, 0, null, 0, 4, 数据库
2019-03-03 17:45:30.011 DEBUG c.c.m.A.findArticle - <==        Row: 43, 测, 测11111, 2017-10-30 14:47:01.0, 0, null, 0, 1, 后端技术
2019-03-03 17:45:30.713 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["36"]}
2019-03-03 17:45:30.740 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:45:30.740 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-03-03 17:45:30.740 DEBUG c.c.m.A.findDetailById - ==> Parameters: 36(String)
2019-03-03 17:45:30.774 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms, htmlContent, content
2019-03-03 17:45:30.774 DEBUG c.c.m.A.findDetailById - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2019-02-23 22:33:25.0, 0, null, 1, 4, 数据库, <h2 id="h2-u524Du8A00"><a name="前言" class="reference-link"></a><span class="header-link octicon octicon-link"></span>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过”服务器主机IP:应用端口”的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名-&gt;备案-&gt;做IP解析、端口转发的过程。</p>
<h6 id="h6--"><a name="一、申请域名以及实名认证" class="reference-link"></a><span class="header-link octicon octicon-link"></span>一、申请域名以及实名认证</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳<a href="https://cloud.baidu.com/product/bcd/search.html" title="域名申请地址">域名申请地址</a>。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。</p>
<h6 id="h6--"><a name="二、工信部备案" class="reference-link"></a><span class="header-link octicon octicon-link"></span>二、工信部备案</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳<a href="http://beian.bce.baidu.com/" title="百度云备案系统">百度云备案系统</a>，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。</p>
<h6 id="h6--"><a name="三、域名解析、端口转发" class="reference-link"></a><span class="header-link octicon octicon-link"></span>三、域名解析、端口转发</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。</p>
<h6 id="h6--"><a name="四、通过域名进行网站访问" class="reference-link"></a><span class="header-link octicon octicon-link"></span>四、通过域名进行网站访问</h6><p>完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。</p>
, ## 前言
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过"服务器主机IP:应用端口"的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名->备案->做IP解析、端口转发的过程。

###### 一、申请域名以及实名认证
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳[域名申请地址](https://cloud.baidu.com/product/bcd/search.html "域名申请地址")。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。

###### 二、工信部备案
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳[百度云备案系统](http://beian.bce.baidu.com/ "百度云备案系统")，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。

###### 三、域名解析、端口转发
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。

###### 四、通过域名进行网站访问
完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。



2019-03-03 17:45:30.775 DEBUG c.c.m.A.queryRelation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:45:30.775 DEBUG c.c.m.A.queryRelation - ==>  Preparing: SELECT A.id,A.articleId,B.id keyWordId,B.name keyName,A.updatetime FROM mine_article_keyword_relation A INNER JOIN mine_keywords B ON A.keyId = B.id WHERE A.articleId=? 
2019-03-03 17:45:30.775 DEBUG c.c.m.A.queryRelation - ==> Parameters: 36(Integer)
2019-03-03 17:45:30.896 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:45:30.916 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:45:30.916 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:45:30.917 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:45:30.930 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:45:30.932 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:45:30.932 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:45:30.932 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:45:30.933 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:45:30.933 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:45:30.933 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:45:30.954 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-03-03 17:45:30.969 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:45:30.969 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,A.readingcount,A.url,A.praisecount,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-03-03 17:45:30.969 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-03-03 17:45:31.050 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, praisecount, type, ms
2019-03-03 17:45:31.050 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2019-02-23 15:28:11.0, 3, null, 0, 4, 数据库
2019-03-03 17:45:31.051 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2019-02-23 16:06:26.0, 2, null, 0, 4, 数据库
2019-03-03 17:45:31.053 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2019-01-14 19:52:07.0, 1, null, 0, 1, 后端技术
2019-03-03 17:45:31.054 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2019-01-24 19:52:17.0, 1, null, 0, 4, 数据库
2019-03-03 17:45:31.055 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 43, 测, 测11111, 2017-10-30 14:47:01.0, 0, null, 0, 1, 后端技术
2019-03-03 17:45:31.170 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-03-03 17:45:31.172 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-03-03 17:45:31.173 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-03-03 17:45:31.213 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3051b886]
2019-03-03 17:45:31.213 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@71a79d58]
2019-03-03 17:45:31.213 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3cb71c86]
2019-03-03 17:45:31.213 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-03-03 17:45:31.213 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-03-03 17:45:31.214 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-03-03 17:45:31.214 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-03-03 17:45:31.214 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-03-03 17:45:31.215 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-03-03 17:45:31.344 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-03-03 17:45:31.344 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-03-03 17:45:31.345 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-03-03 17:45:31.345 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-03-03 17:45:31.345 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-03-03 17:45:31.345 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-03-03 17:45:31.345 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-03-03 17:45:31.346 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-03-03 17:45:31.346 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-03-03 17:45:31.346 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-03-03 17:45:31.346 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-03-03 17:45:31.347 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-03-03 17:45:31.347 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-03-03 17:45:31.347 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-03-03 17:45:31.348 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-03-03 17:45:31.349 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-03-03 17:45:31.349 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2019-02-23 16:11:56.0
2019-03-03 17:45:31.350 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2018-02-12 20:50:22.0, 网站介绍
2019-03-03 17:45:31.352 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@3051b886]
2019-03-03 17:45:31.352 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-03-03 17:45:31.352 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-03-03 17:45:31.429 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-03-03 17:45:31.430 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 9
