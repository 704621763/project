2019-02-13 21:05:50.447 INFO  o.h.v.i.u.Version - HV000001: Hibernate Validator 5.2.4.Final
2019-02-13 21:05:50.528 INFO  c.c.ServerApp - Starting ServerApp on WINDOWS-GUOYD with PID 10968 (E:\personal_workspace\git_code\project\mine-server\mine-starter\target\classes started by guoyd in E:\personal_workspace\git_code\project\mine-server\mine-starter)
2019-02-13 21:05:50.528 DEBUG c.c.ServerApp - Running with Spring Boot v1.3.3.RELEASE, Spring v4.2.3.RELEASE
2019-02-13 21:05:50.528 INFO  c.c.ServerApp - No active profile set, falling back to default profiles: default
2019-02-13 21:05:52.009 ERROR c.a.d.p.DruidAbstractDataSource - maxIdle is deprecated
2019-02-13 21:05:57.093 ERROR c.a.d.p.DruidDataSource - init datasource error, url: jdbc:mysql://server.natappfree.cc:39930/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:628)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1014)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2286)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2085)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:677)
	at com.alibaba.druid.pool.DruidDataSourceFactory.config(DruidDataSourceFactory.java:361)
	at com.alibaba.druid.pool.DruidDataSourceFactory.createDataSource(DruidDataSourceFactory.java:143)
	at com.codinggyd.config.MyBatisConfig$DataSourceConfig.dbH2DataSource(MyBatisConfig.java:117)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1192)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:545)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1214)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:368)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1192)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:545)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1214)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(PostProcessorRegistrationDelegate.java:228)
	at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:686)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:522)
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:766)
	at org.springframework.boot.SpringApplication.createAndRefreshContext(SpringApplication.java:361)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:307)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1191)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1180)
	at com.codinggyd.ServerApp.main(ServerApp.java:24)
Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.
	at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:560)
	... 398 common frames omitted
2019-02-13 21:05:57.113 INFO  c.a.d.p.DruidDataSource - {dataSource-1} inited
2019-02-13 21:05:57.165 DEBUG o.a.i.l.LogFactory - Logging initialized using 'org.apache.ibatis.logging.slf4j.Slf4jImpl' adapter.
2019-02-13 21:05:57.406 DEBUG c.g.m.m.p.OffsetLimitInterceptor - dialectClass: com.github.miemiedev.mybatis.paginator.dialect.MySQLDialect 
2019-02-13 21:05:57.406 DEBUG c.g.m.m.p.OffsetLimitInterceptor - asyncTotalCount: false 
2019-02-13 21:05:58.363 INFO  o.a.c.c.StandardService - Starting service Tomcat
2019-02-13 21:05:58.365 INFO  o.a.c.c.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.0.28
2019-02-13 21:05:58.577 INFO  o.a.c.c.C.[.[.[/] - Initializing Spring embedded WebApplicationContext
2019-02-13 21:05:59.244 DEBUG c.c.c.MineServiceHandler - 测试接口初始化
2019-02-13 21:05:59.304 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_USER_LOGIN
2019-02-13 21:05:59.304 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_RANDOM_ARTICLE
2019-02-13 21:05:59.304 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_LATEST_ARTICLE
2019-02-13 21:05:59.305 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_ARTICLE_LIST
2019-02-13 21:05:59.305 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_ARTICLE_DETAIL
2019-02-13 21:05:59.305 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_ARTICLE_LIST_RANK_TOP
2019-02-13 21:05:59.306 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_ARTICLE_UPDATE_READ_COUNT
2019-02-13 21:05:59.306 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_DAILY_ESSAYS
2019-02-13 21:05:59.306 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_DATA_EXPORT
2019-02-13 21:05:59.306 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_CONST
2019-02-13 21:05:59.306 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_SITE_INFORMATION
2019-02-13 21:05:59.307 DEBUG c.c.c.MineServiceHandler - 测试接口初始化完毕
2019-02-13 21:06:00.551 INFO  o.a.c.h.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8181"]
2019-02-13 21:06:00.571 INFO  o.a.c.h.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8181"]
2019-02-13 21:06:00.591 INFO  o.a.t.u.n.NioSelectorPool - Using a shared selector for servlet write/read
2019-02-13 21:06:00.649 INFO  c.c.ServerApp - Started ServerApp in 10.76 seconds (JVM running for 11.564)
2019-02-13 21:07:04.109 INFO  o.a.c.c.C.[.[.[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-02-13 21:07:04.561 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:07:04.770 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@399c9b8f]
2019-02-13 21:07:04.774 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:07:04.803 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:07:04.932 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:07:04.933 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:07:04.935 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:07:04.936 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:07:04.938 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:07:04.939 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:07:04.941 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:07:05.180 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-13 21:07:05.279 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@399c9b8f]
2019-02-13 21:07:05.280 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-13 21:07:05.281 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-13 21:07:05.355 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:07:05.356 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:07:05.358 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:07:05.359 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:07:05.361 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:07:05.362 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:07:05.479 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:07:05.488 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:07:05.491 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_LATEST_ARTICLE","params":[3]}
2019-02-13 21:07:05.492 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:07:05.562 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@399c9b8f]
2019-02-13 21:07:05.563 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:07:05.564 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:07:05.564 DEBUG c.c.m.A.findLatestArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:07:05.565 DEBUG c.c.m.A.findLatestArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC LIMIT ? 
2019-02-13 21:07:05.566 DEBUG c.c.m.A.findLatestArticle - ==> Parameters: 3(Integer)
2019-02-13 21:07:05.570 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:07:05.571 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:07:05.573 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:07:05.583 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:07:05.584 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:07:05.585 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:07:05.646 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:07:05.647 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:07:05.649 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@399c9b8f]
2019-02-13 21:07:05.649 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:07:05.650 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:07:05.650 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:07:05.651 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:07:05.652 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:07:05.653 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:07:05.654 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:07:05.660 DEBUG c.c.m.A.findLatestArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:07:05.660 DEBUG c.c.m.A.findLatestArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48.0, 0, null, 1, 后端技术
2019-02-13 21:07:05.662 DEBUG c.c.m.A.findLatestArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47.0, 0, null, 1, 后端技术
2019-02-13 21:07:05.663 DEBUG c.c.m.A.findLatestArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46.0, 0, null, 1, 后端技术
2019-02-13 21:07:05.689 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:07:05.690 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:07:05.691 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:07:05.692 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:07:05.693 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:07:05.694 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:07:05.696 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:07:05.739 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:07:05.741 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:07:05.754 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:07:05.755 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:07:05.812 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:07:05.891 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@399c9b8f]
2019-02-13 21:07:05.891 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:07:05.892 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:07:05.970 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:07:05.972 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:07:05.973 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:07:05.974 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:07:05.976 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:07:05.979 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:07:05.980 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:07:06.065 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null]}
2019-02-13 21:07:06.157 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@399c9b8f]
2019-02-13 21:07:06.157 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-02-13 21:07:06.157 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-02-13 21:07:06.280 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:07:06.280 DEBUG c.c.m.A.findArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48.0, 0, null, 1, 后端技术
2019-02-13 21:07:06.281 DEBUG c.c.m.A.findArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47.0, 0, null, 1, 后端技术
2019-02-13 21:07:06.281 DEBUG c.c.m.A.findArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46.0, 0, null, 1, 后端技术
2019-02-13 21:07:06.282 DEBUG c.c.m.A.findArticle - <==        Row: 89, 测试5, ces 22233, 2019-02-06 19:48:44.0, 0, null, 1, 后端技术
2019-02-13 21:07:06.282 DEBUG c.c.m.A.findArticle - <==        Row: 88, 测试5, ces 22233, 2019-02-06 19:48:40.0, 0, null, 2, 网站前端
2019-02-13 21:07:06.282 DEBUG c.c.m.A.findArticle - <==        Row: 87, 测试5, ces 22233, 2019-02-06 19:48:38.0, 0, null, 2, 网站前端
2019-02-13 21:07:06.283 DEBUG c.c.m.A.findArticle - <==        Row: 86, 测试4, ces 22233, 2019-02-06 19:48:35.0, 0, null, 2, 网站前端
2019-02-13 21:07:06.283 DEBUG c.c.m.A.findArticle - <==        Row: 85, 测试4, ces 22233, 2019-02-06 19:48:34.0, 0, null, 2, 网站前端
2019-02-13 21:07:06.285 DEBUG c.c.m.A.findArticle - <==        Row: 84, 测试3, ces 22233, 2019-02-06 19:48:31.0, 0, null, 2, 网站前端
2019-02-13 21:07:06.286 DEBUG c.c.m.A.findArticle - <==        Row: 83, 测试2, ces 222, 2019-02-06 19:48:25.0, 0, null, 3, 移动开发
2019-02-13 21:07:06.286 DEBUG c.c.m.A.findArticle - <==        Row: 82, 测试1, ces , 2019-02-06 19:48:21.0, 0, null, 3, 移动开发
2019-02-13 21:07:06.286 DEBUG c.c.m.A.findArticle - <==        Row: 81, 测试, 测试, 2019-02-06 18:53:32.0, 0, null, 3, 移动开发
2019-02-13 21:07:06.287 DEBUG c.c.m.A.findArticle - <==        Row: 80, 过年了, 过年了，洗刷刷, 2019-02-06 18:46:31.0, 0, null, 2, 网站前端
2019-02-13 21:07:06.287 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:07:06.288 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2017-12-03 14:47:34.0, 17674, null, 3, 移动开发
2019-02-13 21:07:06.290 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2017-11-06 20:51:27.0, 19608, null, 3, 移动开发
2019-02-13 21:07:06.291 DEBUG c.c.m.A.findArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:07:06.293 DEBUG c.c.m.A.findArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:07:06.293 DEBUG c.c.m.A.findArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:07:06.294 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:07:10.019 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["33"]}
2019-02-13 21:07:10.091 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@399c9b8f]
2019-02-13 21:07:10.091 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-02-13 21:07:10.092 DEBUG c.c.m.A.findDetailById - ==> Parameters: 33(String)
2019-02-13 21:07:10.239 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms, htmlContent, content
2019-02-13 21:07:10.240 DEBUG c.c.m.A.findDetailById - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术, <h2 id="h2-1-importnew-java-"><a name="1.   ImportNew-专注于 Java 技术分享的网站" class="reference-link"></a><span class="header-link octicon octicon-link"></span>1. <a href="http://www.importnew.com/" title="ImportNew-专注于 Java 技术分享的网站">ImportNew-专注于 Java 技术分享的网站</a></h2><h2 id="h2-2-github-"><a name="2.        GitHub-开源及私有软件项目的大型托管平台" class="reference-link"></a><span class="header-link octicon octicon-link"></span>2. <a href="https://github.com" title="     GitHub-开源及私有软件项目的大型托管平台">     GitHub-开源及私有软件项目的大型托管平台</a></h2><h2 id="h2-3-csdn-it-"><a name="3.   CSDN-全球最大中文IT社区" class="reference-link"></a><span class="header-link octicon octicon-link"></span>3. <a href="http://www.csdn.net/" title="CSDN-全球最大中文IT社区">CSDN-全球最大中文IT社区</a></h2><h2 id="h2-4-iteye-java-spring-ajax-agile-"><a name="4.   ITeye-Java编程 Spring框架 Ajax技术 agile敏捷软件" class="reference-link"></a><span class="header-link octicon octicon-link"></span>4. <a href="http://www.iteye.com/" title="ITeye-Java编程 Spring框架 Ajax技术 agile敏捷软件">ITeye-Java编程 Spring框架 Ajax技术 agile敏捷软件</a></h2><h2 id="h2-5-spring-cloud-"><a name="5.   Spring Cloud中国社区论坛" class="reference-link"></a><span class="header-link octicon octicon-link"></span>5. <a href="http://bbs.springcloud.cn/" title="Spring Cloud中国社区论坛">Spring Cloud中国社区论坛</a></h2><h2 id="h2-6-"><a name="6.   伯乐在线-专业的互联网职业社区" class="reference-link"></a><span class="header-link octicon octicon-link"></span>6. <a href="http://www.jobbole.com/" title="伯乐在线-专业的互联网职业社区">伯乐在线-专业的互联网职业社区</a></h2><h2 id="h2-7-51cto-it-it-"><a name="7.   51CTO-专注IT技术领域，打造中国领先的IT技术网络平台" class="reference-link"></a><span class="header-link octicon octicon-link"></span>7. <a href="http://www.51cto.com/" title="51CTO-专注IT技术领域，打造中国领先的IT技术网络平台">51CTO-专注IT技术领域，打造中国领先的IT技术网络平台</a></h2><h2 id="h2-8-"><a name="8.   开源中国" class="reference-link"></a><span class="header-link octicon octicon-link"></span>8. <a href="https://www.oschina.net/" title="开源中国">开源中国</a></h2><h2 id="h2-9-json-"><a name="9.   JSON在线解析" class="reference-link"></a><span class="header-link octicon octicon-link"></span>9. <a href="http://www.sojson.com/" title="JSON在线解析">JSON在线解析</a></h2><h2 id="h2-10-hutool-java-util-"><a name="10.  Hutool-Java工具集，针对项目中util包进行开刀，抽象大量的工具方法，旨在减少项目中工具类的数量，将我们的编码工作专注在业务上。" class="reference-link"></a><span class="header-link octicon octicon-link"></span>10.<a href="http://hutool.cn/" title="Hutool-Java工具集，针对项目中util包进行开刀，抽象大量的工具方法，旨在减少项目中工具类的数量，将我们的编码工作专注在业务上。">Hutool-Java工具集，针对项目中util包进行开刀，抽象大量的工具方法，旨在减少项目中工具类的数量，将我们的编码工作专注在业务上。</a></h2><h2 id="h2-11-"><a name="11.  小众搜索引擎" class="reference-link"></a><span class="header-link octicon octicon-link"></span>11.<a href="https://www.ecosia.org/" title="小众搜索引擎">小众搜索引擎</a></h2><h2 id="h2-12-"><a name="12.  小众搜索引擎" class="reference-link"></a><span class="header-link octicon octicon-link"></span>12.<a href="https://so.mezw.com/" title="小众搜索引擎">小众搜索引擎</a></h2><h2 id="h2-13-"><a name="13.  小众搜索引擎" class="reference-link"></a><span class="header-link octicon octicon-link"></span>13.<a href="http://bird.so" title="小众搜索引擎">小众搜索引擎</a></h2><h2 id="h2-14-"><a name="14.   博客园" class="reference-link"></a><span class="header-link octicon octicon-link"></span>14. <a href="https://www.cnblogs.com/" title="博客园">博客园</a></h2>, ## 1. [ImportNew-专注于 Java 技术分享的网站](http://www.importnew.com/ "ImportNew-专注于 Java 技术分享的网站")

## 2. [ 	GitHub-开源及私有软件项目的大型托管平台](https://github.com " 	GitHub-开源及私有软件项目的大型托管平台")

## 3. [CSDN-全球最大中文IT社区](http://www.csdn.net/ "CSDN-全球最大中文IT社区")

## 4. [ITeye-Java编程 Spring框架 Ajax技术 agile敏捷软件](http://www.iteye.com/ "ITeye-Java编程 Spring框架 Ajax技术 agile敏捷软件")

## 5. [Spring Cloud中国社区论坛](http://bbs.springcloud.cn/ "Spring Cloud中国社区论坛")

## 6. [伯乐在线-专业的互联网职业社区](http://www.jobbole.com/ "伯乐在线-专业的互联网职业社区")

## 7. [51CTO-专注IT技术领域，打造中国领先的IT技术网络平台](http://www.51cto.com/ "51CTO-专注IT技术领域，打造中国领先的IT技术网络平台")

## 8. [开源中国](https://www.oschina.net/ "开源中国")

## 9. [JSON在线解析](http://www.sojson.com/ "JSON在线解析")

## 10.[Hutool-Java工具集，针对项目中util包进行开刀，抽象大量的工具方法，旨在减少项目中工具类的数量，将我们的编码工作专注在业务上。](http://hutool.cn/ "Hutool-Java工具集，针对项目中util包进行开刀，抽象大量的工具方法，旨在减少项目中工具类的数量，将我们的编码工作专注在业务上。")

## 11.[小众搜索引擎](https://www.ecosia.org/ "小众搜索引擎")
## 12.[小众搜索引擎](https://so.mezw.com/ "小众搜索引擎")
## 13.[小众搜索引擎](http://bird.so "小众搜索引擎")
## 14. [博客园](https://www.cnblogs.com/ "博客园")

2019-02-13 21:07:10.458 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:07:10.523 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@399c9b8f]
2019-02-13 21:07:10.524 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:07:10.524 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:07:10.598 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:07:10.598 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:07:10.599 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:07:10.600 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:07:10.601 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:07:10.602 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:07:10.603 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:07:10.682 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-13 21:07:10.768 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@399c9b8f]
2019-02-13 21:07:10.768 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-13 21:07:10.768 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-13 21:07:10.855 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:07:10.856 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:07:10.856 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:07:10.857 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:07:10.857 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:07:10.858 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:07:10.936 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:07:10.939 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:07:11.002 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@399c9b8f]
2019-02-13 21:07:11.003 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:07:11.003 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:07:11.015 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:07:11.016 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:07:11.016 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:07:11.078 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:07:11.079 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:07:11.080 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@399c9b8f]
2019-02-13 21:07:11.080 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:07:11.081 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:07:11.088 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:07:11.089 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:07:11.089 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:07:11.089 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:07:11.090 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:07:11.157 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:07:11.159 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:07:11.168 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:07:11.169 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:07:13.345 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:07:13.426 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:07:13.427 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:07:13.427 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:07:13.522 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:07:13.525 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:07:13.527 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:07:13.528 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:07:13.530 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:07:13.532 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:07:13.533 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:07:13.629 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-13 21:07:13.710 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:07:13.711 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-13 21:07:13.711 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-13 21:07:13.861 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:07:13.862 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:07:13.862 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:07:13.863 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:07:13.863 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:07:13.864 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:07:13.979 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:07:13.980 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:07:13.982 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_LATEST_ARTICLE","params":[3]}
2019-02-13 21:07:13.982 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:07:14.051 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:07:14.052 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:07:14.052 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:07:14.056 DEBUG c.c.m.A.findLatestArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:07:14.056 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@399c9b8f]
2019-02-13 21:07:14.057 DEBUG c.c.m.A.findLatestArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC LIMIT ? 
2019-02-13 21:07:14.057 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:07:14.057 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:07:14.057 DEBUG c.c.m.A.findLatestArticle - ==> Parameters: 3(Integer)
2019-02-13 21:07:14.066 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:07:14.066 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:07:14.067 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:07:14.149 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:07:14.149 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:07:14.150 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@399c9b8f]
2019-02-13 21:07:14.150 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:07:14.151 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:07:14.153 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:07:14.153 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:07:14.154 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:07:14.154 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:07:14.155 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:07:14.165 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:07:14.166 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:07:14.167 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:07:14.167 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:07:14.168 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:07:14.169 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:07:14.169 DEBUG c.c.m.A.findLatestArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:07:14.169 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:07:14.170 DEBUG c.c.m.A.findLatestArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48.0, 0, null, 1, 后端技术
2019-02-13 21:07:14.171 DEBUG c.c.m.A.findLatestArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47.0, 0, null, 1, 后端技术
2019-02-13 21:07:14.173 DEBUG c.c.m.A.findLatestArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46.0, 0, null, 1, 后端技术
2019-02-13 21:07:14.221 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:07:14.222 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:07:14.228 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:07:14.229 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:07:14.253 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:07:14.324 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:07:14.324 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:07:14.324 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:07:14.420 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:07:14.420 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:07:14.422 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:07:14.424 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:07:14.424 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:07:14.424 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:07:14.425 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:07:14.526 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null]}
2019-02-13 21:07:14.592 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:07:14.593 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-02-13 21:07:14.593 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-02-13 21:07:14.744 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:07:14.744 DEBUG c.c.m.A.findArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48.0, 0, null, 1, 后端技术
2019-02-13 21:07:14.745 DEBUG c.c.m.A.findArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47.0, 0, null, 1, 后端技术
2019-02-13 21:07:14.745 DEBUG c.c.m.A.findArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46.0, 0, null, 1, 后端技术
2019-02-13 21:07:14.746 DEBUG c.c.m.A.findArticle - <==        Row: 89, 测试5, ces 22233, 2019-02-06 19:48:44.0, 0, null, 1, 后端技术
2019-02-13 21:07:14.746 DEBUG c.c.m.A.findArticle - <==        Row: 88, 测试5, ces 22233, 2019-02-06 19:48:40.0, 0, null, 2, 网站前端
2019-02-13 21:07:14.746 DEBUG c.c.m.A.findArticle - <==        Row: 87, 测试5, ces 22233, 2019-02-06 19:48:38.0, 0, null, 2, 网站前端
2019-02-13 21:07:14.747 DEBUG c.c.m.A.findArticle - <==        Row: 86, 测试4, ces 22233, 2019-02-06 19:48:35.0, 0, null, 2, 网站前端
2019-02-13 21:07:14.747 DEBUG c.c.m.A.findArticle - <==        Row: 85, 测试4, ces 22233, 2019-02-06 19:48:34.0, 0, null, 2, 网站前端
2019-02-13 21:07:14.747 DEBUG c.c.m.A.findArticle - <==        Row: 84, 测试3, ces 22233, 2019-02-06 19:48:31.0, 0, null, 2, 网站前端
2019-02-13 21:07:14.748 DEBUG c.c.m.A.findArticle - <==        Row: 83, 测试2, ces 222, 2019-02-06 19:48:25.0, 0, null, 3, 移动开发
2019-02-13 21:07:14.749 DEBUG c.c.m.A.findArticle - <==        Row: 82, 测试1, ces , 2019-02-06 19:48:21.0, 0, null, 3, 移动开发
2019-02-13 21:07:14.749 DEBUG c.c.m.A.findArticle - <==        Row: 81, 测试, 测试, 2019-02-06 18:53:32.0, 0, null, 3, 移动开发
2019-02-13 21:07:14.749 DEBUG c.c.m.A.findArticle - <==        Row: 80, 过年了, 过年了，洗刷刷, 2019-02-06 18:46:31.0, 0, null, 2, 网站前端
2019-02-13 21:07:14.750 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:07:14.750 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2017-12-03 14:47:34.0, 17674, null, 3, 移动开发
2019-02-13 21:07:14.750 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2017-11-06 20:51:27.0, 19608, null, 3, 移动开发
2019-02-13 21:07:14.751 DEBUG c.c.m.A.findArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:07:14.751 DEBUG c.c.m.A.findArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:07:14.752 DEBUG c.c.m.A.findArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:07:14.752 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:07:28.925 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:07:29.012 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:07:29.013 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:07:29.013 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:07:29.105 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:07:29.107 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:07:29.107 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:07:29.108 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:07:29.109 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:07:29.109 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:07:29.110 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:07:29.211 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-13 21:07:29.331 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:07:29.331 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-13 21:07:29.332 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-13 21:07:29.418 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:07:29.419 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:07:29.419 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:07:29.420 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:07:29.420 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:07:29.420 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:07:29.506 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:07:29.508 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:07:29.510 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:07:29.510 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_LATEST_ARTICLE","params":[3]}
2019-02-13 21:07:29.584 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:07:29.584 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:07:29.585 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:07:29.593 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:07:29.594 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:07:29.594 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:07:29.623 DEBUG c.c.m.A.findLatestArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@399c9b8f]
2019-02-13 21:07:29.623 DEBUG c.c.m.A.findLatestArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC LIMIT ? 
2019-02-13 21:07:29.623 DEBUG c.c.m.A.findLatestArticle - ==> Parameters: 3(Integer)
2019-02-13 21:07:29.628 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:07:29.628 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:07:29.628 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:07:29.652 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:07:29.652 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:07:29.653 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:07:29.653 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:07:29.653 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:07:29.705 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:07:29.707 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:07:29.709 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:07:29.709 DEBUG c.c.m.A.findLatestArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:07:29.710 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:07:29.710 DEBUG c.c.m.A.findLatestArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48.0, 0, null, 1, 后端技术
2019-02-13 21:07:29.711 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:07:29.712 DEBUG c.c.m.A.findLatestArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47.0, 0, null, 1, 后端技术
2019-02-13 21:07:29.712 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:07:29.713 DEBUG c.c.m.A.findLatestArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46.0, 0, null, 1, 后端技术
2019-02-13 21:07:29.713 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:07:29.715 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:07:29.715 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:07:29.716 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:07:29.717 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:07:29.718 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:07:29.728 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:07:29.729 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:07:29.793 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:07:29.794 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:07:29.802 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:07:29.901 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:07:29.901 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:07:29.902 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:07:29.988 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:07:29.989 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:07:29.989 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:07:29.989 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:07:29.990 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:07:29.990 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:07:29.990 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:07:30.059 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null]}
2019-02-13 21:07:30.123 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:07:30.124 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-02-13 21:07:30.124 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-02-13 21:07:30.219 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:07:30.219 DEBUG c.c.m.A.findArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48.0, 0, null, 1, 后端技术
2019-02-13 21:07:30.219 DEBUG c.c.m.A.findArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47.0, 0, null, 1, 后端技术
2019-02-13 21:07:30.220 DEBUG c.c.m.A.findArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46.0, 0, null, 1, 后端技术
2019-02-13 21:07:30.220 DEBUG c.c.m.A.findArticle - <==        Row: 89, 测试5, ces 22233, 2019-02-06 19:48:44.0, 0, null, 1, 后端技术
2019-02-13 21:07:30.220 DEBUG c.c.m.A.findArticle - <==        Row: 88, 测试5, ces 22233, 2019-02-06 19:48:40.0, 0, null, 2, 网站前端
2019-02-13 21:07:30.221 DEBUG c.c.m.A.findArticle - <==        Row: 87, 测试5, ces 22233, 2019-02-06 19:48:38.0, 0, null, 2, 网站前端
2019-02-13 21:07:30.221 DEBUG c.c.m.A.findArticle - <==        Row: 86, 测试4, ces 22233, 2019-02-06 19:48:35.0, 0, null, 2, 网站前端
2019-02-13 21:07:30.222 DEBUG c.c.m.A.findArticle - <==        Row: 85, 测试4, ces 22233, 2019-02-06 19:48:34.0, 0, null, 2, 网站前端
2019-02-13 21:07:30.223 DEBUG c.c.m.A.findArticle - <==        Row: 84, 测试3, ces 22233, 2019-02-06 19:48:31.0, 0, null, 2, 网站前端
2019-02-13 21:07:30.223 DEBUG c.c.m.A.findArticle - <==        Row: 83, 测试2, ces 222, 2019-02-06 19:48:25.0, 0, null, 3, 移动开发
2019-02-13 21:07:30.223 DEBUG c.c.m.A.findArticle - <==        Row: 82, 测试1, ces , 2019-02-06 19:48:21.0, 0, null, 3, 移动开发
2019-02-13 21:07:30.224 DEBUG c.c.m.A.findArticle - <==        Row: 81, 测试, 测试, 2019-02-06 18:53:32.0, 0, null, 3, 移动开发
2019-02-13 21:07:30.224 DEBUG c.c.m.A.findArticle - <==        Row: 80, 过年了, 过年了，洗刷刷, 2019-02-06 18:46:31.0, 0, null, 2, 网站前端
2019-02-13 21:07:30.224 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:07:30.225 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2017-12-03 14:47:34.0, 17674, null, 3, 移动开发
2019-02-13 21:07:30.225 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2017-11-06 20:51:27.0, 19608, null, 3, 移动开发
2019-02-13 21:07:30.225 DEBUG c.c.m.A.findArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:07:30.226 DEBUG c.c.m.A.findArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:07:30.226 DEBUG c.c.m.A.findArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:07:30.226 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:07:42.805 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["28"]}
2019-02-13 21:07:42.880 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:07:42.880 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-02-13 21:07:42.880 DEBUG c.c.m.A.findDetailById - ==> Parameters: 28(String)
2019-02-13 21:07:42.996 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms, htmlContent, content
2019-02-13 21:07:42.997 DEBUG c.c.m.A.findDetailById - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端, <h3 id="h3-u7ACBu6B63u5411u524Du8D70"><a name="立正向前走" class="reference-link"></a><span class="header-link octicon octicon-link"></span>立正向前走</h3><p>&nbsp;&nbsp;&nbsp;我们总有这样的茫然时刻，风霜雪雨中，我提着自己的手提箱，问自己我要往哪去?该回去还是继续向前?此时，我们知道应该赶路，却不得不停下来，因为这一刻意义太重大，一念之间决定了我们以后的路。</p>
<p>&nbsp;&nbsp;&nbsp;走到生命的哪一个阶段，都该喜欢那一段时光，完成那一阶段该完成的职责，顺生而行，不沉迷过去，不狂热地期待着未来，生命这样就好。不管正经历着怎样的挣扎与挑战，或许我们都只有一个选择：虽然痛苦，却依然要快乐，并相信未来。</p>
<p>&nbsp;&nbsp;&nbsp;世上最凄绝的距离是两个人本来距离很远，互不相识，忽然有一天，他们相识，相爱，距离变得很近。然后有一天，不再相爱了，本来很近的两个人，变得很远，甚至比以前更远。</p>
<p>&nbsp;&nbsp;&nbsp;我不习惯把自己心里的痛苦展示给别人，因为我怕别人安慰，也不想得到怜悯。相比于弱者的倾诉和哭泣，我更喜欢强者的骄傲和被仰望。心里乌云密布，面上不动声色。就算被误解，也不澄清，不解释，不在乎，把这些都当前行的力量。</p>
<p>&nbsp;&nbsp;&nbsp;为什么我们总是不懂得珍惜眼前人?在未可预知的重逢里，我们以为总会重逢，总会有缘再会，总以为有机会说一声对不起，却从没想过每一次挥手道别，都可能是诀别，每一声叹息，都可能是人间最后的一声叹息。</p>
<p>&nbsp;&nbsp;&nbsp;没有誓言的爱情才是最可靠的爱情。爱情是与誓言无关的。但有趣的是，大多女人都喜欢听男人的誓言，即便是在心里并不把男人的誓言当真，也是听着幸福无比。</p>
<p>&nbsp;&nbsp;&nbsp;如果生活是一杯水，那么痛苦就是掉落杯中的灰尘。我们可以选择让心静下来，慢慢沉淀那些痛苦。如果总是不断地去搅和，痛苦就会充满我们的生活。</p>
<p>&nbsp;&nbsp;&nbsp;年轻时，我不要你们心如止水，我要你们妖孽横行。我不要你们收敛锋芒，我要你们跋扈张扬。我不要你们平淡青春，我要你们嚣张挥霍。总之，要笑要哭，要爱要痛。因为很久很久以后，这段光芒万丈的回忆，会帮你度过很多很多，你以为不能度过的苦难时期。</p>
<p>&nbsp;&nbsp;&nbsp;你的脆弱，也是你的坚强。</p>
<p>&nbsp;&nbsp;&nbsp;爱情如此使人着迷，是不是正因为它是靠不住的?明知道它是水，是无根的，我们却用一双手和一双脚想要去拦住它。直到一天，当它翻起的波涛差点儿把我们淹没，我们才发现，即使再多出十双手和十双脚，要走的东西，终究是拦不住的。</p>
<p>&nbsp;&nbsp;&nbsp;当初你有胆量去选，同样该有勇气把后果承受。</p>
<p>&nbsp;&nbsp;&nbsp;很多时候，面对那些原本以为过不去的坎，面对那些一时无法接受的事，我们能做的只是沉默，沉默的等这一阵过去。相信这一夜的痛哭过后，还有新的早晨。活在世上遇到的悲伤是很多的，但欢乐也有。即使欢乐的日子比哭泣的日子少太多，这个世界，仍值得我们为之走一遭。</p>
<p>&nbsp;&nbsp;&nbsp;在寂静中我唯一能听到的，只剩下那些我说不出来的话。我爱你，一直很爱你，以后也是。</p>
<p>&nbsp;&nbsp;&nbsp;人们不解释的主要原因是根本不在乎对方的想法，无关重要的人，对无关重要的事有点儿误会，有什么关系。你信也好，不信也好，都于当事人生活毫无影响，何劳解释。</p>
<p>&nbsp;&nbsp;&nbsp;既然一事无成，那你还有什么好失去的，鼓起勇气面对一切难堪，打败它吧!只要不放弃一切幸福的信念，我相信，一定会有好事发生!</p>
<p>&nbsp;&nbsp;&nbsp;有些时候我觉得很好笑，那些在我们记忆里占据很小一部分的人，你竟然一辈子都忘不掉。</p>
<pre><code>人生太短，所以笑吧，趁你现在还有牙齿时。
</code></pre><p>&nbsp;&nbsp;&nbsp;我们不怕目标定得高远，只怕没有追寻的勇气、热情和执著。只要心头时时燃烧着坚定的信念，一往无前地行进下去，就会惊讶地发现：很多所谓的远方其实并不遥远。</p>
<p>&nbsp;&nbsp;&nbsp;一个人总有一天会明白，忌妒是无用的，而模仿他人无异于自杀。因为不论好坏，人只有自己才能帮助自己，只有耕种自己的田地，才能收获自家的玉米。</p>
, ### 立正向前走
&nbsp;&nbsp;&nbsp;我们总有这样的茫然时刻，风霜雪雨中，我提着自己的手提箱，问自己我要往哪去?该回去还是继续向前?此时，我们知道应该赶路，却不得不停下来，因为这一刻意义太重大，一念之间决定了我们以后的路。

 

&nbsp;&nbsp;&nbsp;走到生命的哪一个阶段，都该喜欢那一段时光，完成那一阶段该完成的职责，顺生而行，不沉迷过去，不狂热地期待着未来，生命这样就好。不管正经历着怎样的挣扎与挑战，或许我们都只有一个选择：虽然痛苦，却依然要快乐，并相信未来。

 

&nbsp;&nbsp;&nbsp;世上最凄绝的距离是两个人本来距离很远，互不相识，忽然有一天，他们相识，相爱，距离变得很近。然后有一天，不再相爱了，本来很近的两个人，变得很远，甚至比以前更远。

 

&nbsp;&nbsp;&nbsp;我不习惯把自己心里的痛苦展示给别人，因为我怕别人安慰，也不想得到怜悯。相比于弱者的倾诉和哭泣，我更喜欢强者的骄傲和被仰望。心里乌云密布，面上不动声色。就算被误解，也不澄清，不解释，不在乎，把这些都当前行的力量。

 

&nbsp;&nbsp;&nbsp;为什么我们总是不懂得珍惜眼前人?在未可预知的重逢里，我们以为总会重逢，总会有缘再会，总以为有机会说一声对不起，却从没想过每一次挥手道别，都可能是诀别，每一声叹息，都可能是人间最后的一声叹息。

 

&nbsp;&nbsp;&nbsp;没有誓言的爱情才是最可靠的爱情。爱情是与誓言无关的。但有趣的是，大多女人都喜欢听男人的誓言，即便是在心里并不把男人的誓言当真，也是听着幸福无比。

 

&nbsp;&nbsp;&nbsp;如果生活是一杯水，那么痛苦就是掉落杯中的灰尘。我们可以选择让心静下来，慢慢沉淀那些痛苦。如果总是不断地去搅和，痛苦就会充满我们的生活。

 

&nbsp;&nbsp;&nbsp;年轻时，我不要你们心如止水，我要你们妖孽横行。我不要你们收敛锋芒，我要你们跋扈张扬。我不要你们平淡青春，我要你们嚣张挥霍。总之，要笑要哭，要爱要痛。因为很久很久以后，这段光芒万丈的回忆，会帮你度过很多很多，你以为不能度过的苦难时期。

 

&nbsp;&nbsp;&nbsp;你的脆弱，也是你的坚强。

 

&nbsp;&nbsp;&nbsp;爱情如此使人着迷，是不是正因为它是靠不住的?明知道它是水，是无根的，我们却用一双手和一双脚想要去拦住它。直到一天，当它翻起的波涛差点儿把我们淹没，我们才发现，即使再多出十双手和十双脚，要走的东西，终究是拦不住的。

 

&nbsp;&nbsp;&nbsp;当初你有胆量去选，同样该有勇气把后果承受。

 

&nbsp;&nbsp;&nbsp;很多时候，面对那些原本以为过不去的坎，面对那些一时无法接受的事，我们能做的只是沉默，沉默的等这一阵过去。相信这一夜的痛哭过后，还有新的早晨。活在世上遇到的悲伤是很多的，但欢乐也有。即使欢乐的日子比哭泣的日子少太多，这个世界，仍值得我们为之走一遭。

 

&nbsp;&nbsp;&nbsp;在寂静中我唯一能听到的，只剩下那些我说不出来的话。我爱你，一直很爱你，以后也是。

 

&nbsp;&nbsp;&nbsp;人们不解释的主要原因是根本不在乎对方的想法，无关重要的人，对无关重要的事有点儿误会，有什么关系。你信也好，不信也好，都于当事人生活毫无影响，何劳解释。

 

&nbsp;&nbsp;&nbsp;既然一事无成，那你还有什么好失去的，鼓起勇气面对一切难堪，打败它吧!只要不放弃一切幸福的信念，我相信，一定会有好事发生!

 

&nbsp;&nbsp;&nbsp;有些时候我觉得很好笑，那些在我们记忆里占据很小一部分的人，你竟然一辈子都忘不掉。

 

    人生太短，所以笑吧，趁你现在还有牙齿时。

 

&nbsp;&nbsp;&nbsp;我们不怕目标定得高远，只怕没有追寻的勇气、热情和执著。只要心头时时燃烧着坚定的信念，一往无前地行进下去，就会惊讶地发现：很多所谓的远方其实并不遥远。

 

&nbsp;&nbsp;&nbsp;一个人总有一天会明白，忌妒是无用的，而模仿他人无异于自杀。因为不论好坏，人只有自己才能帮助自己，只有耕种自己的田地，才能收获自家的玉米。
2019-02-13 21:07:43.228 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:07:43.309 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:07:43.310 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:07:43.310 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:07:43.382 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:07:43.383 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:07:43.383 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:07:43.384 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:07:43.384 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:07:43.384 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:07:43.385 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:07:43.465 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-13 21:07:43.539 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:07:43.540 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-13 21:07:43.540 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-13 21:07:43.623 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:07:43.623 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:07:43.624 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:07:43.624 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:07:43.625 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:07:43.626 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:07:43.727 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:07:43.730 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:07:43.799 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:07:43.799 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:07:43.799 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:07:43.866 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:07:43.866 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:07:43.867 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:07:43.869 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:07:43.870 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:07:43.870 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:07:43.871 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:07:43.871 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:07:43.938 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:07:43.939 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:07:43.939 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:07:43.940 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:07:43.940 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:07:43.967 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:07:43.968 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:07:44.064 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:07:44.065 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:12:11.061 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:12:11.128 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:12:11.129 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:12:11.130 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:12:11.217 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:12:11.218 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:12:11.219 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:12:11.220 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:12:11.220 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:12:11.221 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:12:11.221 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:12:11.317 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-13 21:12:11.484 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:12:11.484 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-13 21:12:11.485 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-13 21:12:11.600 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:12:11.602 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:12:11.603 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:12:11.605 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:12:11.606 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:12:11.607 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:12:11.771 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:12:11.771 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:12:11.773 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_LATEST_ARTICLE","params":[3]}
2019-02-13 21:12:11.774 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:12:11.834 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:12:11.834 DEBUG c.c.m.A.findLatestArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@399c9b8f]
2019-02-13 21:12:11.834 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:12:11.834 DEBUG c.c.m.A.findLatestArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC LIMIT ? 
2019-02-13 21:12:11.835 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:12:11.835 DEBUG c.c.m.A.findLatestArticle - ==> Parameters: 3(Integer)
2019-02-13 21:12:11.836 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:12:11.837 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:12:11.837 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:12:11.844 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:12:11.844 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:12:11.844 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:12:11.934 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:12:11.935 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:12:11.936 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:12:11.938 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:12:11.939 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:12:11.940 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:12:11.942 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:12:11.944 DEBUG c.c.m.A.findLatestArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:12:11.946 DEBUG c.c.m.A.findLatestArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48.0, 0, null, 1, 后端技术
2019-02-13 21:12:11.947 DEBUG c.c.m.A.findLatestArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47.0, 0, null, 1, 后端技术
2019-02-13 21:12:11.949 DEBUG c.c.m.A.findLatestArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46.0, 0, null, 1, 后端技术
2019-02-13 21:12:11.954 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:12:11.955 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:12:11.956 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:12:11.956 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:12:11.956 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:12:11.965 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:12:11.966 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:12:11.966 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:12:11.967 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:12:11.967 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:12:12.020 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:12:12.020 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:12:12.028 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:12:12.040 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:12:12.040 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:12:12.087 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:12:12.087 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:12:12.087 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:12:12.180 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:12:12.180 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:12:12.181 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:12:12.181 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:12:12.181 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:12:12.182 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:12:12.182 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:12:12.275 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null]}
2019-02-13 21:12:12.337 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:12:12.338 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-02-13 21:12:12.339 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-02-13 21:12:12.479 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:12:12.480 DEBUG c.c.m.A.findArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48.0, 0, null, 1, 后端技术
2019-02-13 21:12:12.482 DEBUG c.c.m.A.findArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47.0, 0, null, 1, 后端技术
2019-02-13 21:12:12.483 DEBUG c.c.m.A.findArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46.0, 0, null, 1, 后端技术
2019-02-13 21:12:12.485 DEBUG c.c.m.A.findArticle - <==        Row: 89, 测试5, ces 22233, 2019-02-06 19:48:44.0, 0, null, 1, 后端技术
2019-02-13 21:12:12.486 DEBUG c.c.m.A.findArticle - <==        Row: 88, 测试5, ces 22233, 2019-02-06 19:48:40.0, 0, null, 2, 网站前端
2019-02-13 21:12:12.487 DEBUG c.c.m.A.findArticle - <==        Row: 87, 测试5, ces 22233, 2019-02-06 19:48:38.0, 0, null, 2, 网站前端
2019-02-13 21:12:12.488 DEBUG c.c.m.A.findArticle - <==        Row: 86, 测试4, ces 22233, 2019-02-06 19:48:35.0, 0, null, 2, 网站前端
2019-02-13 21:12:12.488 DEBUG c.c.m.A.findArticle - <==        Row: 85, 测试4, ces 22233, 2019-02-06 19:48:34.0, 0, null, 2, 网站前端
2019-02-13 21:12:12.489 DEBUG c.c.m.A.findArticle - <==        Row: 84, 测试3, ces 22233, 2019-02-06 19:48:31.0, 0, null, 2, 网站前端
2019-02-13 21:12:12.489 DEBUG c.c.m.A.findArticle - <==        Row: 83, 测试2, ces 222, 2019-02-06 19:48:25.0, 0, null, 3, 移动开发
2019-02-13 21:12:12.490 DEBUG c.c.m.A.findArticle - <==        Row: 82, 测试1, ces , 2019-02-06 19:48:21.0, 0, null, 3, 移动开发
2019-02-13 21:12:12.490 DEBUG c.c.m.A.findArticle - <==        Row: 81, 测试, 测试, 2019-02-06 18:53:32.0, 0, null, 3, 移动开发
2019-02-13 21:12:12.490 DEBUG c.c.m.A.findArticle - <==        Row: 80, 过年了, 过年了，洗刷刷, 2019-02-06 18:46:31.0, 0, null, 2, 网站前端
2019-02-13 21:12:12.491 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:12:12.491 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2017-12-03 14:47:34.0, 17674, null, 3, 移动开发
2019-02-13 21:12:12.491 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2017-11-06 20:51:27.0, 19608, null, 3, 移动开发
2019-02-13 21:12:12.492 DEBUG c.c.m.A.findArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:12:12.492 DEBUG c.c.m.A.findArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:12:12.493 DEBUG c.c.m.A.findArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:12:12.493 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:12:14.820 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["36"]}
2019-02-13 21:12:14.961 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:12:14.961 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-02-13 21:12:14.962 DEBUG c.c.m.A.findDetailById - ==> Parameters: 36(String)
2019-02-13 21:12:15.081 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms, htmlContent, content
2019-02-13 21:12:15.082 DEBUG c.c.m.A.findDetailById - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发, <h2 id="h2-u524Du8A00"><a name="前言" class="reference-link"></a><span class="header-link octicon octicon-link"></span>前言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过”服务器主机IP:应用端口”的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名-&gt;备案-&gt;做IP解析、端口转发的过程。</p>
<h6 id="h6--"><a name="一、申请域名以及实名认证" class="reference-link"></a><span class="header-link octicon octicon-link"></span>一、申请域名以及实名认证</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳<a href="https://cloud.baidu.com/product/bcd/search.html" title="域名申请地址">域名申请地址</a>。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。</p>
<h6 id="h6--"><a name="二、工信部备案" class="reference-link"></a><span class="header-link octicon octicon-link"></span>二、工信部备案</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳<a href="http://beian.bce.baidu.com/" title="百度云备案系统">百度云备案系统</a>，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。</p>
<h6 id="h6--"><a name="三、域名解析、端口转发" class="reference-link"></a><span class="header-link octicon octicon-link"></span>三、域名解析、端口转发</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。</p>
<h6 id="h6--"><a name="四、通过域名进行网站访问" class="reference-link"></a><span class="header-link octicon octicon-link"></span>四、通过域名进行网站访问</h6><p>完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。</p>
, ## 前言
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般某个网站程序部署到云服务器上后,我们就可以直接通过"服务器主机IP:应用端口"的方式来访问该网站服务了，但这种方式非常不友好。对于广大用户而言，没几个人会记得住那一串IP数字地址。因此我们需要提供一个友好的名称来作为服务器主机IP的别名，让用户在浏览器输入别名就可以访问到网站服务，这个别名就可以理解为域名(域名具体介绍请自行百度)。下面简单记录下本博客网站从申请域名->备案->做IP解析、端口转发的过程。

###### 一、申请域名以及实名认证
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是在百度云的域名服务注册中心进行域名申请注册的，地址请戳[域名申请地址](https://cloud.baidu.com/product/bcd/search.html "域名申请地址")。域名具体申请过程就不说了，进入百度云域名服务注册中心自己看。本人在申请域名的时候想了很多个，但是发现都被注册掉了，无奈，，最后选了个二般的域名进行注册。注册完后在百度云平台上完成实名认证操作。

###### 二、工信部备案
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以前域名备案要去当地的管局进行，现在可以直接在比如百度云、阿里云上进行，还是很方便的。我的域名是在百度云上完成备案流程的，备案地址戳[百度云备案系统](http://beian.bce.baidu.com/ "百度云备案系统")，备案流程也不是很复杂，按备案系统操作步骤慢慢来即可完   成。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工信部备案这里耗时最长，我的网站大概半个月才备案完成。

###### 三、域名解析、端口转发
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域名解析我也是直接在百度云域名服务控制台上完成的，几分钟就好了。需要填写主机记录、记录类型、解析线路、记录值、TTL这几个选项，具体含义请自行百度。这里需要注意“记录值”就是服务器主机的IP地址，不能填写具体的端口号。默认在浏览器通过域名访问时会解析到域名对应的IP地址的80端口上。如果需要域名访问服务器上非80端口，可以通过域名:端口号的方式来完成，或者通过80端口转发来达到目的。一般我们都选择第二种方式，域名访问时无需额外填写端口信息即可访问到网站，这种方式更加友好。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我是通过用nginx来监听域名指向的默认80端口并转发到网站程序运行的xxxx端口来完成域名访问网站的。至于nginx如何设置端口转发，非常简单，改下配置文件重启nginx即可!具体操作步骤自行百度教程。

###### 四、通过域名进行网站访问
完成前面三个步骤，就可以打开浏览器通过域名来访问我们自己写的网站了，也可以把域名分享给互联网上的小伙伴们，与小伙伴们分享自己所思、所想。



2019-02-13 21:12:15.243 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:12:15.343 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:12:15.344 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:12:15.344 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:12:15.410 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:12:15.410 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:12:15.411 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:12:15.411 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:12:15.411 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:12:15.412 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:12:15.412 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:12:15.504 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-13 21:12:15.571 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:12:15.571 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-13 21:12:15.572 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-13 21:12:15.651 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:12:15.651 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:12:15.652 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:12:15.652 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:12:15.652 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:12:15.653 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:12:15.852 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:12:15.854 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:12:15.919 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:12:15.919 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:12:15.919 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:12:15.938 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:12:15.938 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:12:15.938 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:12:15.997 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:12:15.998 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:12:15.998 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:12:15.998 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:12:15.999 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:12:16.038 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:12:16.039 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:12:16.039 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:12:16.039 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:12:16.040 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:12:16.104 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:12:16.104 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:12:16.113 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:12:16.113 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:12:27.782 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:12:27.885 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:12:27.885 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:12:27.886 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:12:28.010 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:12:28.011 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:12:28.011 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:12:28.012 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:12:28.012 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:12:28.013 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:12:28.013 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:12:28.120 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-13 21:12:28.202 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:12:28.202 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-13 21:12:28.203 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-13 21:12:28.307 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:12:28.307 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:12:28.308 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:12:28.308 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:12:28.308 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:12:28.309 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:12:28.388 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:12:28.389 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:12:28.464 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:12:28.464 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:12:28.464 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:12:28.471 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:12:28.471 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:12:28.472 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:12:28.540 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:12:28.540 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:12:28.541 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:12:28.541 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:12:28.541 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:12:28.565 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:12:28.566 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:12:28.567 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:12:28.568 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:12:28.568 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:12:28.630 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:12:28.630 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:12:28.637 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:12:28.637 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:12:39.521 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:12:39.592 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:12:39.593 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:12:39.594 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:12:39.663 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:12:39.663 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:12:39.664 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:12:39.664 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:12:39.665 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:12:39.665 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:12:39.665 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:12:39.769 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-13 21:12:39.873 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:12:39.873 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-13 21:12:39.873 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-13 21:12:39.963 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:12:39.963 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:12:39.964 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:12:39.964 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:12:39.964 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:12:39.965 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:12:40.053 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:12:40.055 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:12:40.120 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:12:40.120 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:12:40.121 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:12:40.123 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:12:40.124 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:12:40.124 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:12:40.192 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:12:40.192 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:12:40.193 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:12:40.193 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:12:40.193 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:12:40.202 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:12:40.202 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:12:40.202 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:12:40.203 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:12:40.203 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:12:40.266 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:12:40.267 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:12:40.281 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:12:40.282 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:12:58.507 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:12:58.599 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:12:58.599 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:12:58.600 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:12:58.665 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:12:58.665 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:12:58.666 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:12:58.666 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:12:58.666 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:12:58.666 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:12:58.667 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:12:58.759 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-13 21:12:58.836 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:12:58.837 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-13 21:12:58.837 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-13 21:12:58.939 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:12:58.940 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:12:58.940 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:12:58.941 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:12:58.941 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:12:58.941 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:12:59.029 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:12:59.033 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:12:59.033 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],"1"]}
2019-02-13 21:12:59.107 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:12:59.107 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:12:59.107 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) AND dm = ? 
2019-02-13 21:12:59.108 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:12:59.108 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String), 1(String)
2019-02-13 21:12:59.108 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:12:59.174 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:12:59.174 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:12:59.175 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:12:59.175 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:12:59.176 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:12:59.176 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:12:59.176 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:12:59.259 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":["1",null]}
2019-02-13 21:12:59.268 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:12:59.268 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:12:59.322 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:12:59.322 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' AND B.dm = ? ORDER BY A.updatetime DESC 
2019-02-13 21:12:59.323 DEBUG c.c.m.A.findArticle - ==> Parameters: 1(String)
2019-02-13 21:12:59.368 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:12:59.369 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:12:59.369 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:12:59.402 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:12:59.402 DEBUG c.c.m.A.findArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48.0, 0, null, 1, 后端技术
2019-02-13 21:12:59.403 DEBUG c.c.m.A.findArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47.0, 0, null, 1, 后端技术
2019-02-13 21:12:59.403 DEBUG c.c.m.A.findArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46.0, 0, null, 1, 后端技术
2019-02-13 21:12:59.403 DEBUG c.c.m.A.findArticle - <==        Row: 89, 测试5, ces 22233, 2019-02-06 19:48:44.0, 0, null, 1, 后端技术
2019-02-13 21:12:59.403 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:12:59.446 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:12:59.446 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:12:59.447 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:12:59.447 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:12:59.447 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:12:59.528 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:12:59.528 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:13:00.875 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:13:00.983 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:13:00.984 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:13:00.984 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:13:01.064 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:13:01.064 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:13:01.065 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:13:01.065 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:13:01.065 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:13:01.066 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:13:01.066 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:13:01.161 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-13 21:13:01.237 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:13:01.237 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-13 21:13:01.237 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-13 21:13:01.393 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:13:01.395 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:13:01.397 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:13:01.398 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:13:01.399 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:13:01.400 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:13:01.488 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:13:01.489 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:13:01.491 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],"2"]}
2019-02-13 21:13:01.581 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:13:01.582 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) AND dm = ? 
2019-02-13 21:13:01.582 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String), 2(String)
2019-02-13 21:13:01.595 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:13:01.595 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:13:01.596 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:13:01.596 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:13:01.596 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:13:01.596 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:13:01.653 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:13:01.654 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:13:01.683 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:13:01.684 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:13:01.685 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:13:01.685 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:13:01.685 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:13:01.686 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:13:01.687 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:13:01.687 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:13:01.688 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:13:01.688 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:13:01.738 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":["2",null]}
2019-02-13 21:13:01.743 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:13:01.744 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:13:01.771 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:13:01.771 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:13:01.807 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:13:01.807 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' AND B.dm = ? ORDER BY A.updatetime DESC 
2019-02-13 21:13:01.808 DEBUG c.c.m.A.findArticle - ==> Parameters: 2(String)
2019-02-13 21:13:01.885 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:13:01.886 DEBUG c.c.m.A.findArticle - <==        Row: 88, 测试5, ces 22233, 2019-02-06 19:48:40.0, 0, null, 2, 网站前端
2019-02-13 21:13:01.886 DEBUG c.c.m.A.findArticle - <==        Row: 87, 测试5, ces 22233, 2019-02-06 19:48:38.0, 0, null, 2, 网站前端
2019-02-13 21:13:01.886 DEBUG c.c.m.A.findArticle - <==        Row: 86, 测试4, ces 22233, 2019-02-06 19:48:35.0, 0, null, 2, 网站前端
2019-02-13 21:13:01.887 DEBUG c.c.m.A.findArticle - <==        Row: 85, 测试4, ces 22233, 2019-02-06 19:48:34.0, 0, null, 2, 网站前端
2019-02-13 21:13:01.887 DEBUG c.c.m.A.findArticle - <==        Row: 84, 测试3, ces 22233, 2019-02-06 19:48:31.0, 0, null, 2, 网站前端
2019-02-13 21:13:01.887 DEBUG c.c.m.A.findArticle - <==        Row: 80, 过年了, 过年了，洗刷刷, 2019-02-06 18:46:31.0, 0, null, 2, 网站前端
2019-02-13 21:13:01.887 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:13:03.644 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:13:03.714 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:13:03.715 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:13:03.715 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:13:03.781 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:13:03.781 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:13:03.782 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:13:03.783 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:13:03.783 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:13:03.783 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:13:03.783 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:13:03.875 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-13 21:13:03.939 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:13:03.940 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-13 21:13:03.941 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-13 21:13:04.006 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:13:04.006 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:13:04.007 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:13:04.007 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:13:04.007 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:13:04.007 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:13:04.084 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:13:04.085 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:13:04.087 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],"3"]}
2019-02-13 21:13:04.142 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:13:04.143 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:13:04.143 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:13:04.165 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:13:04.165 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:13:04.166 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:13:04.166 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) AND dm = ? 
2019-02-13 21:13:04.166 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:13:04.166 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String), 3(String)
2019-02-13 21:13:04.209 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:13:04.210 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:13:04.210 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:13:04.210 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:13:04.211 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:13:04.231 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:13:04.232 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:13:04.240 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:13:04.241 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:13:04.241 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:13:04.242 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:13:04.242 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:13:04.276 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:13:04.277 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:13:04.297 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":["3",null]}
2019-02-13 21:13:04.306 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:13:04.306 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:13:04.372 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:13:04.373 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' AND B.dm = ? ORDER BY A.updatetime DESC 
2019-02-13 21:13:04.373 DEBUG c.c.m.A.findArticle - ==> Parameters: 3(String)
2019-02-13 21:13:04.442 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:13:04.443 DEBUG c.c.m.A.findArticle - <==        Row: 83, 测试2, ces 222, 2019-02-06 19:48:25.0, 0, null, 3, 移动开发
2019-02-13 21:13:04.443 DEBUG c.c.m.A.findArticle - <==        Row: 82, 测试1, ces , 2019-02-06 19:48:21.0, 0, null, 3, 移动开发
2019-02-13 21:13:04.443 DEBUG c.c.m.A.findArticle - <==        Row: 81, 测试, 测试, 2019-02-06 18:53:32.0, 0, null, 3, 移动开发
2019-02-13 21:13:04.444 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2017-12-03 14:47:34.0, 17674, null, 3, 移动开发
2019-02-13 21:13:04.444 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2017-11-06 20:51:27.0, 19608, null, 3, 移动开发
2019-02-13 21:13:04.444 DEBUG c.c.m.A.findArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:13:04.445 DEBUG c.c.m.A.findArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:13:04.445 DEBUG c.c.m.A.findArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:13:05.710 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:13:05.792 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:13:05.793 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:13:05.793 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:13:05.882 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:13:05.882 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:13:05.883 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:13:05.883 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:13:05.883 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:13:05.884 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:13:05.884 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:13:05.965 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-13 21:13:06.036 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:13:06.037 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-13 21:13:06.037 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-13 21:13:06.107 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:13:06.108 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:13:06.108 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:13:06.109 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:13:06.109 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:13:06.109 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:13:06.188 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:13:06.190 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:13:06.191 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],"4"]}
2019-02-13 21:13:06.255 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:13:06.256 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:13:06.256 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:13:06.258 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:13:06.258 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) AND dm = ? 
2019-02-13 21:13:06.259 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String), 4(String)
2019-02-13 21:13:06.261 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:13:06.261 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:13:06.262 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:13:06.319 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:13:06.319 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:13:06.320 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:13:06.320 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:13:06.320 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:13:06.322 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:13:06.322 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:13:06.343 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:13:06.344 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:13:06.344 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:13:06.344 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:13:06.345 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:13:06.379 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:13:06.380 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:13:06.392 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":["4",null]}
2019-02-13 21:13:06.408 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:13:06.409 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:13:06.465 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:13:06.466 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' AND B.dm = ? ORDER BY A.updatetime DESC 
2019-02-13 21:13:06.466 DEBUG c.c.m.A.findArticle - ==> Parameters: 4(String)
2019-02-13 21:13:06.558 DEBUG c.c.s.i.ArticleServiceImpl - 未查到任何文章信息
2019-02-13 21:13:07.370 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:13:07.433 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:13:07.434 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:13:07.434 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:13:07.510 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:13:07.511 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:13:07.511 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:13:07.511 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:13:07.511 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:13:07.512 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:13:07.512 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:13:07.586 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-13 21:13:07.649 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:13:07.649 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-13 21:13:07.649 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-13 21:13:07.726 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:13:07.727 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:13:07.727 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:13:07.727 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:13:07.727 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:13:07.728 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:13:07.821 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:13:07.823 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:13:07.824 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],"5"]}
2019-02-13 21:13:07.900 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:13:07.900 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:13:07.900 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:13:07.900 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) AND dm = ? 
2019-02-13 21:13:07.900 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:13:07.901 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String), 5(String)
2019-02-13 21:13:07.904 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:13:07.904 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:13:07.904 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:13:07.961 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:13:07.962 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:13:07.965 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:13:07.966 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:13:07.966 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:13:07.966 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:13:07.966 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:13:07.969 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:13:07.970 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:13:07.970 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:13:07.970 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:13:07.971 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:13:08.034 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":["5",null]}
2019-02-13 21:13:08.051 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:13:08.052 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:13:08.056 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:13:08.057 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:13:08.100 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:13:08.101 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' AND B.dm = ? ORDER BY A.updatetime DESC 
2019-02-13 21:13:08.101 DEBUG c.c.m.A.findArticle - ==> Parameters: 5(String)
2019-02-13 21:13:08.170 DEBUG c.c.s.i.ArticleServiceImpl - 未查到任何文章信息
2019-02-13 21:14:25.318 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],"1"]}
2019-02-13 21:14:25.391 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:14:25.391 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) AND dm = ? 
2019-02-13 21:14:25.392 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String), 1(String)
2019-02-13 21:14:25.479 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:14:25.479 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:14:25.551 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":["1",null]}
2019-02-13 21:14:25.624 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:14:25.624 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' AND B.dm = ? ORDER BY A.updatetime DESC 
2019-02-13 21:14:25.625 DEBUG c.c.m.A.findArticle - ==> Parameters: 1(String)
2019-02-13 21:14:25.713 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:14:25.713 DEBUG c.c.m.A.findArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48.0, 0, null, 1, 后端技术
2019-02-13 21:14:25.714 DEBUG c.c.m.A.findArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47.0, 0, null, 1, 后端技术
2019-02-13 21:14:25.714 DEBUG c.c.m.A.findArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46.0, 0, null, 1, 后端技术
2019-02-13 21:14:25.714 DEBUG c.c.m.A.findArticle - <==        Row: 89, 测试5, ces 22233, 2019-02-06 19:48:44.0, 0, null, 1, 后端技术
2019-02-13 21:14:25.715 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:14:25.722 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],"2"]}
2019-02-13 21:14:25.788 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:14:25.788 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) AND dm = ? 
2019-02-13 21:14:25.789 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String), 2(String)
2019-02-13 21:14:25.900 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:14:25.900 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:14:25.981 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":["2",null]}
2019-02-13 21:14:26.074 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:14:26.074 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' AND B.dm = ? ORDER BY A.updatetime DESC 
2019-02-13 21:14:26.075 DEBUG c.c.m.A.findArticle - ==> Parameters: 2(String)
2019-02-13 21:14:26.129 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],"3"]}
2019-02-13 21:14:26.189 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:14:26.189 DEBUG c.c.m.A.findArticle - <==        Row: 88, 测试5, ces 22233, 2019-02-06 19:48:40.0, 0, null, 2, 网站前端
2019-02-13 21:14:26.190 DEBUG c.c.m.A.findArticle - <==        Row: 87, 测试5, ces 22233, 2019-02-06 19:48:38.0, 0, null, 2, 网站前端
2019-02-13 21:14:26.190 DEBUG c.c.m.A.findArticle - <==        Row: 86, 测试4, ces 22233, 2019-02-06 19:48:35.0, 0, null, 2, 网站前端
2019-02-13 21:14:26.190 DEBUG c.c.m.A.findArticle - <==        Row: 85, 测试4, ces 22233, 2019-02-06 19:48:34.0, 0, null, 2, 网站前端
2019-02-13 21:14:26.191 DEBUG c.c.m.A.findArticle - <==        Row: 84, 测试3, ces 22233, 2019-02-06 19:48:31.0, 0, null, 2, 网站前端
2019-02-13 21:14:26.191 DEBUG c.c.m.A.findArticle - <==        Row: 80, 过年了, 过年了，洗刷刷, 2019-02-06 18:46:31.0, 0, null, 2, 网站前端
2019-02-13 21:14:26.191 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:14:26.204 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:14:26.204 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) AND dm = ? 
2019-02-13 21:14:26.205 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String), 3(String)
2019-02-13 21:14:26.282 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:14:26.282 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:14:26.362 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":["3",null]}
2019-02-13 21:14:26.429 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:14:26.430 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' AND B.dm = ? ORDER BY A.updatetime DESC 
2019-02-13 21:14:26.431 DEBUG c.c.m.A.findArticle - ==> Parameters: 3(String)
2019-02-13 21:14:26.537 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:14:26.538 DEBUG c.c.m.A.findArticle - <==        Row: 83, 测试2, ces 222, 2019-02-06 19:48:25.0, 0, null, 3, 移动开发
2019-02-13 21:14:26.538 DEBUG c.c.m.A.findArticle - <==        Row: 82, 测试1, ces , 2019-02-06 19:48:21.0, 0, null, 3, 移动开发
2019-02-13 21:14:26.538 DEBUG c.c.m.A.findArticle - <==        Row: 81, 测试, 测试, 2019-02-06 18:53:32.0, 0, null, 3, 移动开发
2019-02-13 21:14:26.538 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2017-12-03 14:47:34.0, 17674, null, 3, 移动开发
2019-02-13 21:14:26.539 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2017-11-06 20:51:27.0, 19608, null, 3, 移动开发
2019-02-13 21:14:26.539 DEBUG c.c.m.A.findArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:14:26.539 DEBUG c.c.m.A.findArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:14:26.540 DEBUG c.c.m.A.findArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:14:28.262 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["92"]}
2019-02-13 21:14:28.334 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:14:28.335 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-02-13 21:14:28.335 DEBUG c.c.m.A.findDetailById - ==> Parameters: 92(String)
2019-02-13 21:14:28.407 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms, htmlContent, content
2019-02-13 21:14:28.408 DEBUG c.c.m.A.findDetailById - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48.0, 0, null, 1, 后端技术, , 
2019-02-13 21:14:28.534 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:14:28.609 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:14:28.609 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:14:28.609 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:14:28.696 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:14:28.697 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:14:28.697 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:14:28.697 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:14:28.698 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:14:28.698 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:14:28.698 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:14:28.800 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-13 21:14:28.865 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:14:28.865 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-13 21:14:28.866 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-13 21:14:28.935 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:14:28.936 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:14:28.936 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:14:28.937 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:14:28.937 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:14:28.937 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:14:29.031 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:14:29.033 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:14:29.095 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:14:29.095 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:14:29.096 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:14:29.118 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:14:29.118 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:14:29.119 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:14:29.181 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:14:29.181 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:14:29.182 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:14:29.182 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:14:29.182 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:14:29.189 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:14:29.189 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:14:29.189 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:14:29.190 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:14:29.190 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:14:29.270 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:14:29.271 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:14:29.273 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:14:29.274 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:14:45.566 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:14:46.592 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:14:46.592 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:14:46.593 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:14:46.759 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:14:46.760 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:14:46.760 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:14:46.760 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:14:46.760 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:14:46.760 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:14:46.761 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:14:46.846 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-13 21:14:46.925 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:14:46.925 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-13 21:14:46.926 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-13 21:14:47.075 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:14:47.076 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:14:47.076 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:14:47.076 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:14:47.076 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:14:47.076 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:14:47.172 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:14:47.175 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:14:47.177 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:14:47.179 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_LATEST_ARTICLE","params":[3]}
2019-02-13 21:14:47.295 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:14:47.295 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:14:47.295 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:14:47.308 DEBUG c.c.m.A.findLatestArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@399c9b8f]
2019-02-13 21:14:47.309 DEBUG c.c.m.A.findLatestArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC LIMIT ? 
2019-02-13 21:14:47.309 DEBUG c.c.m.A.findLatestArticle - ==> Parameters: 3(Integer)
2019-02-13 21:14:47.310 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:14:47.310 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:14:47.310 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:14:47.310 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:14:47.311 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:14:47.311 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:14:47.378 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:14:47.378 DEBUG c.c.m.A.findLatestArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:14:47.379 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:14:47.379 DEBUG c.c.m.A.findLatestArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48.0, 0, null, 1, 后端技术
2019-02-13 21:14:47.379 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:14:47.379 DEBUG c.c.m.A.findLatestArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47.0, 0, null, 1, 后端技术
2019-02-13 21:14:47.380 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:14:47.380 DEBUG c.c.m.A.findLatestArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46.0, 0, null, 1, 后端技术
2019-02-13 21:14:47.380 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:14:47.385 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:14:47.386 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:14:47.386 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:14:47.386 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:14:47.387 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:14:47.390 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:14:47.391 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:14:47.391 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:14:47.392 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:14:47.392 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:14:47.392 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:14:47.393 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:14:47.528 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:14:47.529 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:14:47.536 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:14:47.537 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:14:47.559 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:14:47.624 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:14:47.624 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:14:47.624 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:14:47.706 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:14:47.707 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:14:47.707 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:14:47.708 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:14:47.709 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:14:47.709 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:14:47.709 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:14:47.813 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null]}
2019-02-13 21:14:47.918 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:14:47.918 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-02-13 21:14:47.918 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-02-13 21:14:48.043 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:14:48.044 DEBUG c.c.m.A.findArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48.0, 0, null, 1, 后端技术
2019-02-13 21:14:48.044 DEBUG c.c.m.A.findArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47.0, 0, null, 1, 后端技术
2019-02-13 21:14:48.044 DEBUG c.c.m.A.findArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46.0, 0, null, 1, 后端技术
2019-02-13 21:14:48.044 DEBUG c.c.m.A.findArticle - <==        Row: 89, 测试5, ces 22233, 2019-02-06 19:48:44.0, 0, null, 1, 后端技术
2019-02-13 21:14:48.045 DEBUG c.c.m.A.findArticle - <==        Row: 88, 测试5, ces 22233, 2019-02-06 19:48:40.0, 0, null, 2, 网站前端
2019-02-13 21:14:48.045 DEBUG c.c.m.A.findArticle - <==        Row: 87, 测试5, ces 22233, 2019-02-06 19:48:38.0, 0, null, 2, 网站前端
2019-02-13 21:14:48.045 DEBUG c.c.m.A.findArticle - <==        Row: 86, 测试4, ces 22233, 2019-02-06 19:48:35.0, 0, null, 2, 网站前端
2019-02-13 21:14:48.045 DEBUG c.c.m.A.findArticle - <==        Row: 85, 测试4, ces 22233, 2019-02-06 19:48:34.0, 0, null, 2, 网站前端
2019-02-13 21:14:48.045 DEBUG c.c.m.A.findArticle - <==        Row: 84, 测试3, ces 22233, 2019-02-06 19:48:31.0, 0, null, 2, 网站前端
2019-02-13 21:14:48.046 DEBUG c.c.m.A.findArticle - <==        Row: 83, 测试2, ces 222, 2019-02-06 19:48:25.0, 0, null, 3, 移动开发
2019-02-13 21:14:48.046 DEBUG c.c.m.A.findArticle - <==        Row: 82, 测试1, ces , 2019-02-06 19:48:21.0, 0, null, 3, 移动开发
2019-02-13 21:14:48.046 DEBUG c.c.m.A.findArticle - <==        Row: 81, 测试, 测试, 2019-02-06 18:53:32.0, 0, null, 3, 移动开发
2019-02-13 21:14:48.046 DEBUG c.c.m.A.findArticle - <==        Row: 80, 过年了, 过年了，洗刷刷, 2019-02-06 18:46:31.0, 0, null, 2, 网站前端
2019-02-13 21:14:48.046 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:14:48.047 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2017-12-03 14:47:34.0, 17674, null, 3, 移动开发
2019-02-13 21:14:48.047 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2017-11-06 20:51:27.0, 19608, null, 3, 移动开发
2019-02-13 21:14:48.047 DEBUG c.c.m.A.findArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:14:48.047 DEBUG c.c.m.A.findArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:14:48.047 DEBUG c.c.m.A.findArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:14:48.048 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:14:49.393 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:14:49.469 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:14:49.470 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:14:49.470 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:14:49.542 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:14:49.543 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:14:49.544 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:14:49.544 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:14:49.544 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:14:49.544 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:14:49.545 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:14:49.679 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-13 21:14:49.751 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:14:49.751 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-13 21:14:49.752 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-13 21:14:49.829 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:14:49.829 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:14:49.830 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:14:49.830 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:14:49.831 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:14:49.831 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:14:49.921 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:14:49.922 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:14:49.927 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],"1"]}
2019-02-13 21:14:49.985 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:14:49.985 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:14:49.986 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:14:50.002 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:14:50.002 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:14:50.002 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:14:50.017 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:14:50.018 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) AND dm = ? 
2019-02-13 21:14:50.019 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String), 1(String)
2019-02-13 21:14:50.047 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:14:50.048 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:14:50.049 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:14:50.050 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:14:50.050 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:14:50.075 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:14:50.076 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:14:50.076 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:14:50.076 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:14:50.077 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:14:50.092 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:14:50.092 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:14:50.155 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:14:50.156 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:14:50.159 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:14:50.159 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:14:50.222 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":["1",null]}
2019-02-13 21:14:50.286 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:14:50.287 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' AND B.dm = ? ORDER BY A.updatetime DESC 
2019-02-13 21:14:50.287 DEBUG c.c.m.A.findArticle - ==> Parameters: 1(String)
2019-02-13 21:14:50.394 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:14:50.394 DEBUG c.c.m.A.findArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48.0, 0, null, 1, 后端技术
2019-02-13 21:14:50.395 DEBUG c.c.m.A.findArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47.0, 0, null, 1, 后端技术
2019-02-13 21:14:50.395 DEBUG c.c.m.A.findArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46.0, 0, null, 1, 后端技术
2019-02-13 21:14:50.395 DEBUG c.c.m.A.findArticle - <==        Row: 89, 测试5, ces 22233, 2019-02-06 19:48:44.0, 0, null, 1, 后端技术
2019-02-13 21:14:50.395 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:15:42.507 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:15:42.576 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:15:42.578 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:15:42.579 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:15:42.659 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:15:42.661 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:15:42.662 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:15:42.662 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:15:42.663 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:15:42.663 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:15:42.663 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:15:42.777 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-13 21:15:42.849 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:15:42.850 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-13 21:15:42.850 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-13 21:15:42.988 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:15:42.988 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:15:42.989 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:15:42.989 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:15:42.990 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:15:42.990 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:15:43.072 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:15:43.075 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:15:43.076 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],"1"]}
2019-02-13 21:15:43.147 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:15:43.147 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:15:43.148 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:15:43.157 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:15:43.157 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) AND dm = ? 
2019-02-13 21:15:43.158 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String), 1(String)
2019-02-13 21:15:43.181 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:15:43.181 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:15:43.182 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:15:43.276 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:15:43.277 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:15:43.277 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:15:43.278 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:15:43.278 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:15:43.283 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:15:43.283 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:15:43.292 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:15:43.292 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:15:43.293 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:15:43.293 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:15:43.293 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:15:43.356 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:15:43.358 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:15:43.369 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":["1",null]}
2019-02-13 21:15:43.386 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:15:43.386 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:15:43.448 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:15:43.448 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' AND B.dm = ? ORDER BY A.updatetime DESC 
2019-02-13 21:15:43.449 DEBUG c.c.m.A.findArticle - ==> Parameters: 1(String)
2019-02-13 21:15:43.536 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:15:43.536 DEBUG c.c.m.A.findArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48.0, 0, null, 1, 后端技术
2019-02-13 21:15:43.536 DEBUG c.c.m.A.findArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47.0, 0, null, 1, 后端技术
2019-02-13 21:15:43.537 DEBUG c.c.m.A.findArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46.0, 0, null, 1, 后端技术
2019-02-13 21:15:43.537 DEBUG c.c.m.A.findArticle - <==        Row: 89, 测试5, ces 22233, 2019-02-06 19:48:44.0, 0, null, 1, 后端技术
2019-02-13 21:15:43.538 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:16:14.232 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:16:14.309 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:16:14.310 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:16:14.310 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:16:14.406 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:16:14.407 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:16:14.408 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:16:14.410 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:16:14.412 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:16:14.413 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:16:14.415 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:16:14.504 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-13 21:16:14.568 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:16:14.568 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-13 21:16:14.568 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-13 21:16:14.657 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:16:14.657 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:16:14.658 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:16:14.660 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:16:14.661 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:16:14.662 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:16:15.637 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:16:15.638 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:16:15.642 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],"1"]}
2019-02-13 21:16:15.708 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:16:15.708 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) AND dm = ? 
2019-02-13 21:16:15.708 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String), 1(String)
2019-02-13 21:16:15.709 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:16:15.709 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:16:15.709 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:16:15.712 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:16:15.712 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:16:15.713 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:16:15.791 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:16:15.792 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:16:15.794 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:16:15.794 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:16:15.795 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:16:15.795 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:16:15.795 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:16:15.796 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:16:15.796 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:16:15.796 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:16:15.796 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:16:15.796 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:16:15.864 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":["1",null]}
2019-02-13 21:16:15.926 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:16:15.926 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' AND B.dm = ? ORDER BY A.updatetime DESC 
2019-02-13 21:16:15.926 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:16:15.926 DEBUG c.c.m.A.findArticle - ==> Parameters: 1(String)
2019-02-13 21:16:15.926 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:16:15.929 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:16:15.929 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:16:16.028 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:16:16.028 DEBUG c.c.m.A.findArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48.0, 0, null, 1, 后端技术
2019-02-13 21:16:16.029 DEBUG c.c.m.A.findArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47.0, 0, null, 1, 后端技术
2019-02-13 21:16:16.029 DEBUG c.c.m.A.findArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46.0, 0, null, 1, 后端技术
2019-02-13 21:16:16.030 DEBUG c.c.m.A.findArticle - <==        Row: 89, 测试5, ces 22233, 2019-02-06 19:48:44.0, 0, null, 1, 后端技术
2019-02-13 21:16:16.030 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:16:50.170 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:16:50.247 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:16:50.247 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:16:50.247 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:16:50.348 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:16:50.349 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:16:50.349 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:16:50.350 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:16:50.350 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:16:50.350 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:16:50.351 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:16:50.465 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-13 21:16:50.553 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:16:50.553 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-13 21:16:50.554 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-13 21:16:50.661 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:16:50.662 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:16:50.662 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:16:50.663 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:16:50.663 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:16:50.664 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:16:50.745 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:16:50.748 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:16:50.749 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],"1"]}
2019-02-13 21:16:50.826 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:16:50.826 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:16:50.826 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:16:50.826 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:16:50.826 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:16:50.826 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) AND dm = ? 
2019-02-13 21:16:50.827 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:16:50.827 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:16:50.827 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String), 1(String)
2019-02-13 21:16:50.908 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:16:50.909 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:16:50.910 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:16:50.910 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:16:50.911 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:16:50.911 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:16:50.912 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:16:50.913 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:16:50.913 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:16:50.914 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:16:50.921 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:16:50.922 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:16:51.010 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:16:51.010 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:16:51.067 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":["1",null]}
2019-02-13 21:16:51.074 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:16:51.075 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:16:51.165 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:16:51.165 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' AND B.dm = ? ORDER BY A.updatetime DESC 
2019-02-13 21:16:51.165 DEBUG c.c.m.A.findArticle - ==> Parameters: 1(String)
2019-02-13 21:16:51.240 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:16:51.240 DEBUG c.c.m.A.findArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48.0, 0, null, 1, 后端技术
2019-02-13 21:16:51.240 DEBUG c.c.m.A.findArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47.0, 0, null, 1, 后端技术
2019-02-13 21:16:51.240 DEBUG c.c.m.A.findArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46.0, 0, null, 1, 后端技术
2019-02-13 21:16:51.241 DEBUG c.c.m.A.findArticle - <==        Row: 89, 测试5, ces 22233, 2019-02-06 19:48:44.0, 0, null, 1, 后端技术
2019-02-13 21:16:51.241 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:16:52.332 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:16:52.404 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:16:52.404 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:16:52.404 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:16:52.520 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:16:52.520 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:16:52.521 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:16:52.522 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:16:52.522 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:16:52.523 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:16:52.523 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:16:52.604 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-13 21:16:52.701 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:16:52.701 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-13 21:16:52.701 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-13 21:16:52.802 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:16:52.803 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:16:52.803 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:16:52.803 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:16:52.804 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:16:52.804 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:16:52.886 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:16:52.888 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:16:52.889 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],"1"]}
2019-02-13 21:16:52.949 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:16:52.949 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:16:52.949 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) AND dm = ? 
2019-02-13 21:16:52.949 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:16:52.949 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String), 1(String)
2019-02-13 21:16:52.950 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:16:53.027 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:16:53.027 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:16:53.039 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:16:53.039 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:16:53.039 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:16:53.040 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:16:53.040 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:16:53.104 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:16:53.104 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:16:53.107 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":["1",null]}
2019-02-13 21:16:53.192 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:16:53.192 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' AND B.dm = ? ORDER BY A.updatetime DESC 
2019-02-13 21:16:53.192 DEBUG c.c.m.A.findArticle - ==> Parameters: 1(String)
2019-02-13 21:16:53.224 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:16:53.224 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:16:53.224 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:16:53.260 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:16:53.261 DEBUG c.c.m.A.findArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48.0, 0, null, 1, 后端技术
2019-02-13 21:16:53.263 DEBUG c.c.m.A.findArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47.0, 0, null, 1, 后端技术
2019-02-13 21:16:53.264 DEBUG c.c.m.A.findArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46.0, 0, null, 1, 后端技术
2019-02-13 21:16:53.264 DEBUG c.c.m.A.findArticle - <==        Row: 89, 测试5, ces 22233, 2019-02-06 19:48:44.0, 0, null, 1, 后端技术
2019-02-13 21:16:53.265 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:16:53.324 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:16:53.325 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:16:53.327 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:16:53.328 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:16:53.329 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:16:53.433 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:16:53.433 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:18:32.242 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:18:32.413 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:18:32.413 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:18:32.413 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:18:32.817 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:18:32.818 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:18:32.818 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:18:32.818 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:18:32.818 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:18:32.819 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:18:32.819 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:18:40.457 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-13 21:18:40.669 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:18:40.669 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-13 21:18:40.669 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-13 21:18:40.851 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:18:40.852 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:18:40.852 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:18:40.852 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:18:40.852 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:18:40.853 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:18:41.037 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],"1"]}
2019-02-13 21:18:41.279 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:18:41.279 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) AND dm = ? 
2019-02-13 21:18:41.280 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String), 1(String)
2019-02-13 21:18:41.978 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:18:42.156 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:18:42.157 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:18:42.157 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:18:42.157 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:18:42.157 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:18:42.327 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":["1",null]}
2019-02-13 21:18:42.334 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:18:42.334 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:18:42.335 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:18:42.335 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:18:42.336 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:18:42.531 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:18:42.531 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' AND B.dm = ? ORDER BY A.updatetime DESC 
2019-02-13 21:18:42.531 DEBUG c.c.m.A.findArticle - ==> Parameters: 1(String)
2019-02-13 21:18:42.535 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:18:42.536 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:18:42.683 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:18:42.684 DEBUG c.c.m.A.findArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48.0, 0, null, 1, 后端技术
2019-02-13 21:18:42.684 DEBUG c.c.m.A.findArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47.0, 0, null, 1, 后端技术
2019-02-13 21:18:42.684 DEBUG c.c.m.A.findArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46.0, 0, null, 1, 后端技术
2019-02-13 21:18:42.685 DEBUG c.c.m.A.findArticle - <==        Row: 89, 测试5, ces 22233, 2019-02-06 19:48:44.0, 0, null, 1, 后端技术
2019-02-13 21:18:42.685 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:18:43.051 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:18:43.349 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:18:43.349 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:18:43.349 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:18:43.534 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:18:43.535 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:18:43.536 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:18:43.537 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:18:43.538 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:18:43.696 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:18:43.696 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:19:01.835 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:19:02.211 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:19:02.211 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:19:02.212 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:19:02.729 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:19:02.729 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:19:02.730 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:19:02.730 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:19:02.730 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:19:02.730 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:19:02.730 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:19:03.051 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-13 21:19:03.226 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:19:03.226 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-13 21:19:03.226 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-13 21:19:03.426 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:19:03.427 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:19:03.427 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:19:03.427 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:19:03.427 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:19:03.428 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:19:03.757 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:19:03.763 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:19:03.766 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],"1"]}
2019-02-13 21:19:04.137 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:19:04.137 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:19:04.138 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:19:04.142 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:19:04.142 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:19:04.142 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) AND dm = ? 
2019-02-13 21:19:04.143 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:19:04.143 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String), 1(String)
2019-02-13 21:19:04.143 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:19:04.273 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:19:04.274 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:19:04.274 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:19:04.274 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:19:04.275 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:19:04.275 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:19:04.276 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:19:04.277 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:19:04.278 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:19:04.278 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:19:04.278 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:19:04.279 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:19:04.347 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":["1",null]}
2019-02-13 21:19:04.364 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:19:04.365 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:19:04.389 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:19:04.390 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:19:04.528 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:19:04.528 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' AND B.dm = ? ORDER BY A.updatetime DESC 
2019-02-13 21:19:04.528 DEBUG c.c.m.A.findArticle - ==> Parameters: 1(String)
2019-02-13 21:19:04.747 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:19:04.747 DEBUG c.c.m.A.findArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48.0, 0, null, 1, 后端技术
2019-02-13 21:19:04.748 DEBUG c.c.m.A.findArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47.0, 0, null, 1, 后端技术
2019-02-13 21:19:04.749 DEBUG c.c.m.A.findArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46.0, 0, null, 1, 后端技术
2019-02-13 21:19:04.750 DEBUG c.c.m.A.findArticle - <==        Row: 89, 测试5, ces 22233, 2019-02-06 19:48:44.0, 0, null, 1, 后端技术
2019-02-13 21:19:04.750 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:19:20.358 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:19:20.457 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:19:20.457 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:19:20.457 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:19:20.620 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:19:20.621 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:19:20.621 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:19:20.621 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:19:20.621 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:19:20.622 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:19:20.622 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:19:20.751 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-13 21:19:21.252 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:19:21.253 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-13 21:19:21.254 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-13 21:19:23.226 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:19:23.226 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:19:23.227 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:19:23.227 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:19:23.227 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:19:23.227 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:19:23.512 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:19:23.512 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],"2"]}
2019-02-13 21:19:23.513 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:19:23.906 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:19:23.907 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:19:23.907 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:19:23.941 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:19:23.941 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:19:23.941 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) AND dm = ? 
2019-02-13 21:19:23.942 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:19:23.943 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String), 2(String)
2019-02-13 21:19:23.943 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:19:24.205 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:19:24.205 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:19:24.205 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:19:24.205 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:19:24.205 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:19:24.206 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:19:24.206 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:19:24.206 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:19:24.207 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:19:24.207 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:19:24.209 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:19:24.209 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:19:24.283 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:19:24.283 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:19:24.314 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:19:24.315 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:19:24.339 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":["2",null]}
2019-02-13 21:19:24.447 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:19:24.447 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' AND B.dm = ? ORDER BY A.updatetime DESC 
2019-02-13 21:19:24.448 DEBUG c.c.m.A.findArticle - ==> Parameters: 2(String)
2019-02-13 21:19:24.676 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:19:24.676 DEBUG c.c.m.A.findArticle - <==        Row: 88, 测试5, ces 22233, 2019-02-06 19:48:40.0, 0, null, 2, 网站前端
2019-02-13 21:19:24.677 DEBUG c.c.m.A.findArticle - <==        Row: 87, 测试5, ces 22233, 2019-02-06 19:48:38.0, 0, null, 2, 网站前端
2019-02-13 21:19:24.677 DEBUG c.c.m.A.findArticle - <==        Row: 86, 测试4, ces 22233, 2019-02-06 19:48:35.0, 0, null, 2, 网站前端
2019-02-13 21:19:24.677 DEBUG c.c.m.A.findArticle - <==        Row: 85, 测试4, ces 22233, 2019-02-06 19:48:34.0, 0, null, 2, 网站前端
2019-02-13 21:19:24.678 DEBUG c.c.m.A.findArticle - <==        Row: 84, 测试3, ces 22233, 2019-02-06 19:48:31.0, 0, null, 2, 网站前端
2019-02-13 21:19:24.678 DEBUG c.c.m.A.findArticle - <==        Row: 80, 过年了, 过年了，洗刷刷, 2019-02-06 18:46:31.0, 0, null, 2, 网站前端
2019-02-13 21:19:24.678 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:19:57.688 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:19:58.380 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:19:58.380 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:19:58.380 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:19:59.179 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:19:59.179 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:19:59.180 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:19:59.180 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:19:59.180 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:19:59.180 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:19:59.181 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:20:00.360 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-13 21:20:00.725 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:20:00.726 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-13 21:20:00.726 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-13 21:20:01.179 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:20:01.180 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:20:01.180 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:20:01.180 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:20:01.181 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:20:01.181 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:20:01.845 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:20:01.847 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:20:01.852 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],"2"]}
2019-02-13 21:20:02.774 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:20:02.774 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) AND dm = ? 
2019-02-13 21:20:02.774 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String), 2(String)
2019-02-13 21:20:02.777 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:20:02.778 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:20:02.778 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:20:02.922 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:20:02.923 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:20:02.926 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:20:02.927 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:20:02.927 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:20:02.927 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:20:02.928 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:20:02.994 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":["2",null]}
2019-02-13 21:20:03.022 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:20:03.023 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:20:03.095 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:20:03.095 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' AND B.dm = ? ORDER BY A.updatetime DESC 
2019-02-13 21:20:03.095 DEBUG c.c.m.A.findArticle - ==> Parameters: 2(String)
2019-02-13 21:20:03.230 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:20:03.231 DEBUG c.c.m.A.findArticle - <==        Row: 88, 测试5, ces 22233, 2019-02-06 19:48:40.0, 0, null, 2, 网站前端
2019-02-13 21:20:03.231 DEBUG c.c.m.A.findArticle - <==        Row: 87, 测试5, ces 22233, 2019-02-06 19:48:38.0, 0, null, 2, 网站前端
2019-02-13 21:20:03.231 DEBUG c.c.m.A.findArticle - <==        Row: 86, 测试4, ces 22233, 2019-02-06 19:48:35.0, 0, null, 2, 网站前端
2019-02-13 21:20:03.232 DEBUG c.c.m.A.findArticle - <==        Row: 85, 测试4, ces 22233, 2019-02-06 19:48:34.0, 0, null, 2, 网站前端
2019-02-13 21:20:03.232 DEBUG c.c.m.A.findArticle - <==        Row: 84, 测试3, ces 22233, 2019-02-06 19:48:31.0, 0, null, 2, 网站前端
2019-02-13 21:20:03.232 DEBUG c.c.m.A.findArticle - <==        Row: 80, 过年了, 过年了，洗刷刷, 2019-02-06 18:46:31.0, 0, null, 2, 网站前端
2019-02-13 21:20:03.232 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:20:04.217 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:20:04.218 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:20:04.218 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:20:04.346 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:20:04.347 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:20:04.348 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:20:04.349 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:20:04.350 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:20:04.666 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:20:04.667 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:20:11.556 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:20:11.638 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:20:11.639 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:20:11.640 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:20:11.948 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:20:11.949 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:20:11.951 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:20:11.953 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:20:11.954 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:20:11.955 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:20:11.957 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:20:12.433 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-13 21:20:12.699 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:20:12.699 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-13 21:20:12.699 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-13 21:20:12.926 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:20:12.928 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:20:12.929 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:20:12.931 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:20:12.932 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:20:12.933 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:20:13.204 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:20:13.208 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:20:13.212 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],"2"]}
2019-02-13 21:20:13.565 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:20:13.565 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) AND dm = ? 
2019-02-13 21:20:13.566 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String), 2(String)
2019-02-13 21:20:13.579 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:20:13.579 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:20:13.580 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:20:13.586 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:20:13.587 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:20:13.587 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:20:13.772 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:20:13.773 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:20:13.774 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:20:13.775 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:20:13.775 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:20:13.775 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:20:13.775 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:20:13.780 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:20:13.781 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:20:13.781 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:20:13.781 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:20:13.781 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:20:13.883 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":["2",null]}
2019-02-13 21:20:14.017 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:20:14.017 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:20:14.027 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:20:14.027 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:20:14.197 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:20:14.197 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' AND B.dm = ? ORDER BY A.updatetime DESC 
2019-02-13 21:20:14.198 DEBUG c.c.m.A.findArticle - ==> Parameters: 2(String)
2019-02-13 21:20:14.356 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:20:14.357 DEBUG c.c.m.A.findArticle - <==        Row: 88, 测试5, ces 22233, 2019-02-06 19:48:40.0, 0, null, 2, 网站前端
2019-02-13 21:20:14.357 DEBUG c.c.m.A.findArticle - <==        Row: 87, 测试5, ces 22233, 2019-02-06 19:48:38.0, 0, null, 2, 网站前端
2019-02-13 21:20:14.358 DEBUG c.c.m.A.findArticle - <==        Row: 86, 测试4, ces 22233, 2019-02-06 19:48:35.0, 0, null, 2, 网站前端
2019-02-13 21:20:14.358 DEBUG c.c.m.A.findArticle - <==        Row: 85, 测试4, ces 22233, 2019-02-06 19:48:34.0, 0, null, 2, 网站前端
2019-02-13 21:20:14.358 DEBUG c.c.m.A.findArticle - <==        Row: 84, 测试3, ces 22233, 2019-02-06 19:48:31.0, 0, null, 2, 网站前端
2019-02-13 21:20:14.359 DEBUG c.c.m.A.findArticle - <==        Row: 80, 过年了, 过年了，洗刷刷, 2019-02-06 18:46:31.0, 0, null, 2, 网站前端
2019-02-13 21:20:14.359 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:20:56.031 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:20:56.320 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:20:56.321 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:20:56.321 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:20:56.901 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:20:56.902 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:20:56.904 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:20:56.905 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:20:56.906 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:20:56.907 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:20:56.908 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:20:57.423 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-13 21:20:57.495 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:20:57.495 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-13 21:20:57.495 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-13 21:20:57.657 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:20:57.657 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:20:57.657 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:20:57.658 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:20:57.658 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:20:57.658 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:20:58.592 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:20:58.597 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:20:58.599 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],"2"]}
2019-02-13 21:20:58.722 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:20:58.722 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@771e1c33]
2019-02-13 21:20:58.722 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) AND dm = ? 
2019-02-13 21:20:58.722 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:20:58.723 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String), 2(String)
2019-02-13 21:20:58.723 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:20:58.736 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:20:58.737 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:20:58.737 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:20:58.967 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:20:58.969 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:20:59.048 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:20:59.049 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:20:59.049 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:20:59.049 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:20:59.049 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:20:59.049 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:20:59.050 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:20:59.052 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:20:59.053 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:20:59.053 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5dda29d2]
2019-02-13 21:20:59.053 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:20:59.053 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:20:59.317 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":["2",null]}
2019-02-13 21:20:59.494 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:20:59.495 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:20:59.768 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@38e329bf]
2019-02-13 21:20:59.769 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' AND B.dm = ? ORDER BY A.updatetime DESC 
2019-02-13 21:20:59.770 DEBUG c.c.m.A.findArticle - ==> Parameters: 2(String)
2019-02-13 21:21:00.109 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:21:00.109 DEBUG c.c.m.A.findArticle - <==        Row: 88, 测试5, ces 22233, 2019-02-06 19:48:40.0, 0, null, 2, 网站前端
2019-02-13 21:21:00.110 DEBUG c.c.m.A.findArticle - <==        Row: 87, 测试5, ces 22233, 2019-02-06 19:48:38.0, 0, null, 2, 网站前端
2019-02-13 21:21:00.110 DEBUG c.c.m.A.findArticle - <==        Row: 86, 测试4, ces 22233, 2019-02-06 19:48:35.0, 0, null, 2, 网站前端
2019-02-13 21:21:00.110 DEBUG c.c.m.A.findArticle - <==        Row: 85, 测试4, ces 22233, 2019-02-06 19:48:34.0, 0, null, 2, 网站前端
2019-02-13 21:21:00.110 DEBUG c.c.m.A.findArticle - <==        Row: 84, 测试3, ces 22233, 2019-02-06 19:48:31.0, 0, null, 2, 网站前端
2019-02-13 21:21:00.111 DEBUG c.c.m.A.findArticle - <==        Row: 80, 过年了, 过年了，洗刷刷, 2019-02-06 18:46:31.0, 0, null, 2, 网站前端
2019-02-13 21:21:00.111 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:37:05.945 INFO  o.h.v.i.u.Version - HV000001: Hibernate Validator 5.2.4.Final
2019-02-13 21:37:06.037 INFO  c.c.ServerApp - Starting ServerApp on WINDOWS-GUOYD with PID 18804 (E:\personal_workspace\git_code\project\mine-server\mine-starter\target\classes started by guoyd in E:\personal_workspace\git_code\project\mine-server\mine-starter)
2019-02-13 21:37:06.037 DEBUG c.c.ServerApp - Running with Spring Boot v1.3.3.RELEASE, Spring v4.2.3.RELEASE
2019-02-13 21:37:06.037 INFO  c.c.ServerApp - No active profile set, falling back to default profiles: default
2019-02-13 21:37:07.503 ERROR c.a.d.p.DruidAbstractDataSource - maxIdle is deprecated
2019-02-13 21:37:07.787 ERROR c.a.d.p.DruidDataSource - init datasource error, url: jdbc:mysql://server.natappfree.cc:39930/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:628)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1014)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2286)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2085)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:677)
	at com.alibaba.druid.pool.DruidDataSourceFactory.config(DruidDataSourceFactory.java:361)
	at com.alibaba.druid.pool.DruidDataSourceFactory.createDataSource(DruidDataSourceFactory.java:143)
	at com.codinggyd.config.MyBatisConfig$DataSourceConfig.dbH2DataSource(MyBatisConfig.java:117)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1192)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:545)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1214)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:368)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1192)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:545)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1214)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(PostProcessorRegistrationDelegate.java:228)
	at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:686)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:522)
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:766)
	at org.springframework.boot.SpringApplication.createAndRefreshContext(SpringApplication.java:361)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:307)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1191)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1180)
	at com.codinggyd.ServerApp.main(ServerApp.java:24)
Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.
	at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:560)
	... 430 common frames omitted
2019-02-13 21:37:07.825 ERROR c.a.d.p.DruidDataSource - {dataSource-1} init error
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:628)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1014)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2286)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2085)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:677)
	at com.alibaba.druid.pool.DruidDataSourceFactory.config(DruidDataSourceFactory.java:361)
	at com.alibaba.druid.pool.DruidDataSourceFactory.createDataSource(DruidDataSourceFactory.java:143)
	at com.codinggyd.config.MyBatisConfig$DataSourceConfig.dbH2DataSource(MyBatisConfig.java:117)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1192)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:545)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1214)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:368)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1192)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:545)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1214)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(PostProcessorRegistrationDelegate.java:228)
	at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:686)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:522)
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:766)
	at org.springframework.boot.SpringApplication.createAndRefreshContext(SpringApplication.java:361)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:307)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1191)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1180)
	at com.codinggyd.ServerApp.main(ServerApp.java:24)
Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.
	at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:560)
	... 430 common frames omitted
2019-02-13 21:37:07.830 INFO  c.a.d.p.DruidDataSource - {dataSource-1} inited
2019-02-13 21:37:07.833 ERROR c.c.c.MyBatisConfig$DataSourceConfig - 数据库连接池初始化失败,{}
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:628)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1014)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2286)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2085)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:677)
	at com.alibaba.druid.pool.DruidDataSourceFactory.config(DruidDataSourceFactory.java:361)
	at com.alibaba.druid.pool.DruidDataSourceFactory.createDataSource(DruidDataSourceFactory.java:143)
	at com.codinggyd.config.MyBatisConfig$DataSourceConfig.dbH2DataSource(MyBatisConfig.java:117)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1192)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:545)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1214)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:368)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1192)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:545)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1214)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(PostProcessorRegistrationDelegate.java:228)
	at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:686)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:522)
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:766)
	at org.springframework.boot.SpringApplication.createAndRefreshContext(SpringApplication.java:361)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:307)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1191)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1180)
	at com.codinggyd.ServerApp.main(ServerApp.java:24)
Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.
	at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:560)
	... 430 common frames omitted
2019-02-13 21:37:07.858 DEBUG o.a.i.l.LogFactory - Logging initialized using 'org.apache.ibatis.logging.slf4j.Slf4jImpl' adapter.
2019-02-13 21:37:07.895 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://server.natappfree.cc:39930/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08S01
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:628)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1014)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2286)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2085)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.
	at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:560)
	... 16 common frames omitted
2019-02-13 21:37:07.962 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://server.natappfree.cc:39930/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08S01
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:628)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1014)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2286)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2085)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.
	at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:560)
	... 16 common frames omitted
2019-02-13 21:37:08.024 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://server.natappfree.cc:39930/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08S01
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:628)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1014)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2286)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2085)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.
	at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:560)
	... 16 common frames omitted
2019-02-13 21:37:08.086 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://server.natappfree.cc:39930/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08S01
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:628)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1014)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2286)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2085)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.
	at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:560)
	... 16 common frames omitted
2019-02-13 21:37:08.152 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://server.natappfree.cc:39930/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08S01
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:628)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1014)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2286)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2085)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.
	at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:560)
	... 16 common frames omitted
2019-02-13 21:37:08.215 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://server.natappfree.cc:39930/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08S01
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:628)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1014)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2286)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2085)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.
	at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:560)
	... 16 common frames omitted
2019-02-13 21:37:08.291 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://server.natappfree.cc:39930/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08S01
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:628)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1014)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2286)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2085)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.
	at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:560)
	... 16 common frames omitted
2019-02-13 21:37:08.349 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://server.natappfree.cc:39930/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08S01
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:628)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1014)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2286)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2085)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.
	at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:560)
	... 16 common frames omitted
2019-02-13 21:37:08.417 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://server.natappfree.cc:39930/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08S01
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:628)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1014)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2286)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2085)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.
	at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:560)
	... 16 common frames omitted
2019-02-13 21:37:08.480 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://server.natappfree.cc:39930/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08S01
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:628)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1014)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2286)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2085)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.
	at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:560)
	... 16 common frames omitted
2019-02-13 21:37:08.540 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://server.natappfree.cc:39930/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08S01
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:628)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1014)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2286)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2085)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.
	at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:560)
	... 16 common frames omitted
2019-02-13 21:37:08.608 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://server.natappfree.cc:39930/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08S01
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:628)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1014)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2286)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2085)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.
	at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:560)
	... 16 common frames omitted
2019-02-13 21:37:08.675 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://server.natappfree.cc:39930/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08S01
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:628)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1014)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2286)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2085)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.
	at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:560)
	... 16 common frames omitted
2019-02-13 21:37:08.730 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://server.natappfree.cc:39930/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08S01
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:628)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1014)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2286)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2085)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.
	at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:560)
	... 16 common frames omitted
2019-02-13 21:37:08.791 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://server.natappfree.cc:39930/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08S01
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:628)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1014)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2286)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2085)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.
	at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:560)
	... 16 common frames omitted
2019-02-13 21:37:08.849 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://server.natappfree.cc:39930/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08S01
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:628)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1014)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2286)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2085)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.
	at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:560)
	... 15 common frames omitted
2019-02-13 21:37:08.918 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://server.natappfree.cc:39930/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08S01
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:628)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1014)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2286)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2085)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.
	at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:560)
	... 15 common frames omitted
2019-02-13 21:37:08.993 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://server.natappfree.cc:39930/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08S01
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:628)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1014)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2286)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2085)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.
	at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:560)
	... 15 common frames omitted
2019-02-13 21:37:09.060 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://server.natappfree.cc:39930/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08S01
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:628)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1014)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2286)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2085)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.
	at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:560)
	... 15 common frames omitted
2019-02-13 21:37:09.127 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://server.natappfree.cc:39930/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08S01
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:628)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1014)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2286)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2085)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.
	at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:560)
	... 15 common frames omitted
2019-02-13 21:37:09.185 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://server.natappfree.cc:39930/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08S01
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:628)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1014)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2286)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2085)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.
	at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:560)
	... 15 common frames omitted
2019-02-13 21:37:09.245 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://server.natappfree.cc:39930/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08S01
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:628)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1014)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2286)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2085)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.
	at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:560)
	... 15 common frames omitted
2019-02-13 21:37:09.305 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://server.natappfree.cc:39930/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08S01
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:628)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1014)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2286)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2085)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.
	at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:560)
	... 15 common frames omitted
2019-02-13 21:37:09.367 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://server.natappfree.cc:39930/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08S01
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:628)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1014)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2286)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2085)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.
	at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:560)
	... 15 common frames omitted
2019-02-13 21:37:09.429 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://server.natappfree.cc:39930/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08S01
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:628)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1014)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2286)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2085)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.
	at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:560)
	... 15 common frames omitted
2019-02-13 21:37:09.495 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://server.natappfree.cc:39930/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08S01
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:628)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1014)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2286)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2085)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.
	at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:560)
	... 15 common frames omitted
2019-02-13 21:37:09.556 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://server.natappfree.cc:39930/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08S01
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:628)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1014)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2286)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2085)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.
	at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:560)
	... 15 common frames omitted
2019-02-13 21:37:09.619 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://server.natappfree.cc:39930/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08S01
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:628)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1014)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2286)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2085)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.
	at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:560)
	... 15 common frames omitted
2019-02-13 21:37:09.678 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://server.natappfree.cc:39930/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08S01
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:628)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1014)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2286)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2085)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.
	at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:560)
	... 15 common frames omitted
2019-02-13 21:37:09.738 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://server.natappfree.cc:39930/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08S01
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:628)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1014)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2286)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2085)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.
	at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:560)
	... 15 common frames omitted
2019-02-13 21:37:09.802 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://server.natappfree.cc:39930/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08S01
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:628)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1014)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2286)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2085)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.
	at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)
	at com.mysql.jdbc.MysqlIO.readPacket(MysqlIO.java:560)
	... 15 common frames omitted
2019-02-13 21:37:33.835 INFO  o.h.v.i.u.Version - HV000001: Hibernate Validator 5.2.4.Final
2019-02-13 21:37:33.906 INFO  c.c.ServerApp - Starting ServerApp on WINDOWS-GUOYD with PID 19120 (E:\personal_workspace\git_code\project\mine-server\mine-starter\target\classes started by guoyd in E:\personal_workspace\git_code\project\mine-server\mine-starter)
2019-02-13 21:37:33.907 DEBUG c.c.ServerApp - Running with Spring Boot v1.3.3.RELEASE, Spring v4.2.3.RELEASE
2019-02-13 21:37:33.907 INFO  c.c.ServerApp - No active profile set, falling back to default profiles: default
2019-02-13 21:37:35.223 ERROR c.a.d.p.DruidAbstractDataSource - maxIdle is deprecated
2019-02-13 21:37:43.707 INFO  c.a.d.p.DruidDataSource - {dataSource-1} inited
2019-02-13 21:37:43.753 DEBUG o.a.i.l.LogFactory - Logging initialized using 'org.apache.ibatis.logging.slf4j.Slf4jImpl' adapter.
2019-02-13 21:37:43.988 DEBUG c.g.m.m.p.OffsetLimitInterceptor - dialectClass: com.github.miemiedev.mybatis.paginator.dialect.MySQLDialect 
2019-02-13 21:37:43.990 DEBUG c.g.m.m.p.OffsetLimitInterceptor - asyncTotalCount: false 
2019-02-13 21:37:44.878 INFO  o.a.c.c.StandardService - Starting service Tomcat
2019-02-13 21:37:44.880 INFO  o.a.c.c.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.0.28
2019-02-13 21:37:45.054 INFO  o.a.c.c.C.[.[.[/] - Initializing Spring embedded WebApplicationContext
2019-02-13 21:37:45.716 DEBUG c.c.c.MineServiceHandler - 测试接口初始化
2019-02-13 21:37:45.775 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_USER_LOGIN
2019-02-13 21:37:45.775 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_ARTICLE_LIST_RANK_TOP
2019-02-13 21:37:45.775 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_ARTICLE_UPDATE_READ_COUNT
2019-02-13 21:37:45.776 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_ARTICLE_DETAIL
2019-02-13 21:37:45.776 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_ARTICLE_LIST
2019-02-13 21:37:45.776 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_RANDOM_ARTICLE
2019-02-13 21:37:45.776 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_LATEST_ARTICLE
2019-02-13 21:37:45.776 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_KEYWORDS
2019-02-13 21:37:45.776 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_DAILY_ESSAYS
2019-02-13 21:37:45.777 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_DATA_EXPORT
2019-02-13 21:37:45.777 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_CONST
2019-02-13 21:37:45.777 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_SITE_INFORMATION
2019-02-13 21:37:45.777 DEBUG c.c.c.MineServiceHandler - 测试接口初始化完毕
2019-02-13 21:37:45.798 ERROR c.c.c.MineServiceHandler - 解析结果集出错{}
java.lang.NoSuchMethodException: com.codinggyd.bean.Keywords.getDescs()
	at java.lang.Class.getMethod(Class.java:1786)
	at com.codinggyd.core.MineServiceHandler.preParserMineFuncData(MineServiceHandler.java:104)
	at com.codinggyd.core.MineServiceHandler.afterPropertiesSet(MineServiceHandler.java:44)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1637)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1574)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:838)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:537)
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:766)
	at org.springframework.boot.SpringApplication.createAndRefreshContext(SpringApplication.java:361)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:307)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1191)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1180)
	at com.codinggyd.ServerApp.main(ServerApp.java:24)
2019-02-13 21:37:46.822 INFO  o.a.c.h.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8181"]
2019-02-13 21:37:46.836 INFO  o.a.c.h.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8181"]
2019-02-13 21:37:46.851 INFO  o.a.t.u.n.NioSelectorPool - Using a shared selector for servlet write/read
2019-02-13 21:37:46.891 INFO  c.c.ServerApp - Started ServerApp in 13.567 seconds (JVM running for 14.254)
2019-02-13 21:37:53.408 INFO  o.a.c.c.C.[.[.[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-02-13 21:37:53.816 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-13 21:37:53.950 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@134f2feb]
2019-02-13 21:37:53.952 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-13 21:37:53.972 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-13 21:37:54.069 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:37:54.070 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:37:54.071 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:37:54.072 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:37:54.072 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:37:54.073 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:37:54.247 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:37:54.249 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-02-13 21:37:54.251 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_LATEST_ARTICLE","params":[3]}
2019-02-13 21:37:54.251 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:37:54.251 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:37:54.330 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@134f2feb]
2019-02-13 21:37:54.331 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:37:54.331 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:37:54.335 DEBUG c.c.m.A.findLatestArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@13542447]
2019-02-13 21:37:54.336 DEBUG c.c.m.A.findLatestArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC LIMIT ? 
2019-02-13 21:37:54.336 DEBUG c.c.m.A.findLatestArticle - ==> Parameters: 3(Integer)
2019-02-13 21:37:54.357 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2b8e5230]
2019-02-13 21:37:54.358 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-02-13 21:37:54.358 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-02-13 21:37:54.394 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5d881bc9]
2019-02-13 21:37:54.395 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:37:54.397 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@7808fc9f]
2019-02-13 21:37:54.398 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:37:54.412 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:37:54.412 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:37:54.412 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:37:54.413 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:37:54.415 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@134f2feb]
2019-02-13 21:37:54.416 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:37:54.417 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:37:54.446 DEBUG c.c.m.A.findLatestArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:37:54.446 DEBUG c.c.m.A.findLatestArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48.0, 0, null, 1, 后端技术
2019-02-13 21:37:54.447 DEBUG c.c.m.A.findLatestArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47.0, 0, null, 1, 后端技术
2019-02-13 21:37:54.448 DEBUG c.c.m.A.findLatestArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46.0, 0, null, 1, 后端技术
2019-02-13 21:37:54.451 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-02-13 21:37:54.451 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-02-13 21:37:54.452 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-02-13 21:37:54.453 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-02-13 21:37:54.454 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-02-13 21:37:54.454 DEBUG c.c.m.K.findAllKeywords - <==        Row: 6, php, 2017-11-05 14:32:15.0
2019-02-13 21:37:54.455 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-02-13 21:37:54.456 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-02-13 21:37:54.456 DEBUG c.c.m.K.findAllKeywords - <==        Row: 9, 文件服务器, 2017-11-06 20:40:29.0
2019-02-13 21:37:54.457 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-02-13 21:37:54.458 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2017-12-02 16:48:49.0
2019-02-13 21:37:54.458 DEBUG c.c.m.K.findAllKeywords - <==        Row: 12, 数据导入导出, 2017-12-02 16:48:59.0
2019-02-13 21:37:54.514 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:37:54.515 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:37:54.522 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:37:54.523 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:37:54.523 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:37:54.524 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:37:54.524 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:37:54.525 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:37:54.525 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:37:54.622 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:37:54.623 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:37:54.624 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:37:54.626 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:37:54.628 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:37:54.629 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:37:54.630 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:37:54.649 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:37:54.813 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2b8e5230]
2019-02-13 21:37:54.814 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:37:54.814 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:37:54.974 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:37:54.975 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:37:54.975 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:37:54.976 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:37:54.977 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:37:54.978 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:37:54.979 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:37:55.118 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null]}
2019-02-13 21:37:55.218 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2b8e5230]
2019-02-13 21:37:55.218 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-02-13 21:37:55.219 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-02-13 21:37:55.424 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:37:55.424 DEBUG c.c.m.A.findArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48.0, 0, null, 1, 后端技术
2019-02-13 21:37:55.425 DEBUG c.c.m.A.findArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47.0, 0, null, 1, 后端技术
2019-02-13 21:37:55.425 DEBUG c.c.m.A.findArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46.0, 0, null, 1, 后端技术
2019-02-13 21:37:55.426 DEBUG c.c.m.A.findArticle - <==        Row: 89, 测试5, ces 22233, 2019-02-06 19:48:44.0, 0, null, 1, 后端技术
2019-02-13 21:37:55.426 DEBUG c.c.m.A.findArticle - <==        Row: 88, 测试5, ces 22233, 2019-02-06 19:48:40.0, 0, null, 2, 网站前端
2019-02-13 21:37:55.426 DEBUG c.c.m.A.findArticle - <==        Row: 87, 测试5, ces 22233, 2019-02-06 19:48:38.0, 0, null, 2, 网站前端
2019-02-13 21:37:55.427 DEBUG c.c.m.A.findArticle - <==        Row: 86, 测试4, ces 22233, 2019-02-06 19:48:35.0, 0, null, 2, 网站前端
2019-02-13 21:37:55.427 DEBUG c.c.m.A.findArticle - <==        Row: 85, 测试4, ces 22233, 2019-02-06 19:48:34.0, 0, null, 2, 网站前端
2019-02-13 21:37:55.429 DEBUG c.c.m.A.findArticle - <==        Row: 84, 测试3, ces 22233, 2019-02-06 19:48:31.0, 0, null, 2, 网站前端
2019-02-13 21:37:55.429 DEBUG c.c.m.A.findArticle - <==        Row: 83, 测试2, ces 222, 2019-02-06 19:48:25.0, 0, null, 3, 移动开发
2019-02-13 21:37:55.430 DEBUG c.c.m.A.findArticle - <==        Row: 82, 测试1, ces , 2019-02-06 19:48:21.0, 0, null, 3, 移动开发
2019-02-13 21:37:55.430 DEBUG c.c.m.A.findArticle - <==        Row: 81, 测试, 测试, 2019-02-06 18:53:32.0, 0, null, 3, 移动开发
2019-02-13 21:37:55.431 DEBUG c.c.m.A.findArticle - <==        Row: 80, 过年了, 过年了，洗刷刷, 2019-02-06 18:46:31.0, 0, null, 2, 网站前端
2019-02-13 21:37:55.431 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:37:55.432 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2017-12-03 14:47:34.0, 17674, null, 3, 移动开发
2019-02-13 21:37:55.432 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2017-11-06 20:51:27.0, 19608, null, 3, 移动开发
2019-02-13 21:37:55.433 DEBUG c.c.m.A.findArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:37:55.435 DEBUG c.c.m.A.findArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:37:55.436 DEBUG c.c.m.A.findArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:37:55.436 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:37:55.696 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:37:55.804 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2b8e5230]
2019-02-13 21:37:55.805 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:37:55.807 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:37:55.883 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:37:55.885 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:37:55.889 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:37:55.891 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:37:55.893 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:37:55.894 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:37:55.896 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:37:56.047 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-13 21:37:56.152 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2b8e5230]
2019-02-13 21:37:56.153 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-13 21:37:56.153 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-13 21:37:56.237 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:37:56.238 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:37:56.238 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:37:56.239 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:37:56.239 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:37:56.239 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:37:56.339 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:37:56.341 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:37:56.343 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-02-13 21:37:56.343 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_LATEST_ARTICLE","params":[3]}
2019-02-13 21:37:56.343 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:37:56.422 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@7808fc9f]
2019-02-13 21:37:56.423 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:37:56.423 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:37:56.434 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2b8e5230]
2019-02-13 21:37:56.435 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:37:56.435 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:37:56.460 DEBUG c.c.m.A.findLatestArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@134f2feb]
2019-02-13 21:37:56.460 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5d881bc9]
2019-02-13 21:37:56.461 DEBUG c.c.m.A.findLatestArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC LIMIT ? 
2019-02-13 21:37:56.461 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:37:56.461 DEBUG c.c.m.A.findLatestArticle - ==> Parameters: 3(Integer)
2019-02-13 21:37:56.462 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:37:56.462 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@13542447]
2019-02-13 21:37:56.463 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-02-13 21:37:56.464 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-02-13 21:37:56.542 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:37:56.543 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:37:56.543 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:37:56.543 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:37:56.544 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:37:56.544 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:37:56.544 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:37:56.547 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:37:56.548 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:37:56.548 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:37:56.548 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:37:56.549 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:37:56.549 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:37:56.550 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:37:56.571 DEBUG c.c.m.A.findLatestArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:37:56.572 DEBUG c.c.m.A.findLatestArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48.0, 0, null, 1, 后端技术
2019-02-13 21:37:56.572 DEBUG c.c.m.A.findLatestArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47.0, 0, null, 1, 后端技术
2019-02-13 21:37:56.573 DEBUG c.c.m.A.findLatestArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46.0, 0, null, 1, 后端技术
2019-02-13 21:37:56.585 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:37:56.586 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-02-13 21:37:56.586 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:37:56.587 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-02-13 21:37:56.587 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5d881bc9]
2019-02-13 21:37:56.588 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-02-13 21:37:56.588 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:37:56.588 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-02-13 21:37:56.589 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:37:56.589 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-02-13 21:37:56.590 DEBUG c.c.m.K.findAllKeywords - <==        Row: 6, php, 2017-11-05 14:32:15.0
2019-02-13 21:37:56.591 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-02-13 21:37:56.591 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-02-13 21:37:56.592 DEBUG c.c.m.K.findAllKeywords - <==        Row: 9, 文件服务器, 2017-11-06 20:40:29.0
2019-02-13 21:37:56.592 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-02-13 21:37:56.593 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2017-12-02 16:48:49.0
2019-02-13 21:37:56.593 DEBUG c.c.m.K.findAllKeywords - <==        Row: 12, 数据导入导出, 2017-12-02 16:48:59.0
2019-02-13 21:37:56.663 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:37:56.676 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:37:56.677 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:37:56.745 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2b8e5230]
2019-02-13 21:37:56.746 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:37:56.746 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:37:56.872 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:37:56.873 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:37:56.873 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:37:56.874 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:37:56.874 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:37:56.875 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:37:56.875 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:37:56.978 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null]}
2019-02-13 21:37:57.105 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2b8e5230]
2019-02-13 21:37:57.106 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-02-13 21:37:57.107 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-02-13 21:37:57.328 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:37:57.329 DEBUG c.c.m.A.findArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48.0, 0, null, 1, 后端技术
2019-02-13 21:37:57.330 DEBUG c.c.m.A.findArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47.0, 0, null, 1, 后端技术
2019-02-13 21:37:57.331 DEBUG c.c.m.A.findArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46.0, 0, null, 1, 后端技术
2019-02-13 21:37:57.332 DEBUG c.c.m.A.findArticle - <==        Row: 89, 测试5, ces 22233, 2019-02-06 19:48:44.0, 0, null, 1, 后端技术
2019-02-13 21:37:57.333 DEBUG c.c.m.A.findArticle - <==        Row: 88, 测试5, ces 22233, 2019-02-06 19:48:40.0, 0, null, 2, 网站前端
2019-02-13 21:37:57.334 DEBUG c.c.m.A.findArticle - <==        Row: 87, 测试5, ces 22233, 2019-02-06 19:48:38.0, 0, null, 2, 网站前端
2019-02-13 21:37:57.335 DEBUG c.c.m.A.findArticle - <==        Row: 86, 测试4, ces 22233, 2019-02-06 19:48:35.0, 0, null, 2, 网站前端
2019-02-13 21:37:57.336 DEBUG c.c.m.A.findArticle - <==        Row: 85, 测试4, ces 22233, 2019-02-06 19:48:34.0, 0, null, 2, 网站前端
2019-02-13 21:37:57.336 DEBUG c.c.m.A.findArticle - <==        Row: 84, 测试3, ces 22233, 2019-02-06 19:48:31.0, 0, null, 2, 网站前端
2019-02-13 21:37:57.337 DEBUG c.c.m.A.findArticle - <==        Row: 83, 测试2, ces 222, 2019-02-06 19:48:25.0, 0, null, 3, 移动开发
2019-02-13 21:37:57.338 DEBUG c.c.m.A.findArticle - <==        Row: 82, 测试1, ces , 2019-02-06 19:48:21.0, 0, null, 3, 移动开发
2019-02-13 21:37:57.339 DEBUG c.c.m.A.findArticle - <==        Row: 81, 测试, 测试, 2019-02-06 18:53:32.0, 0, null, 3, 移动开发
2019-02-13 21:37:57.340 DEBUG c.c.m.A.findArticle - <==        Row: 80, 过年了, 过年了，洗刷刷, 2019-02-06 18:46:31.0, 0, null, 2, 网站前端
2019-02-13 21:37:57.341 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:37:57.342 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2017-12-03 14:47:34.0, 17674, null, 3, 移动开发
2019-02-13 21:37:57.343 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2017-11-06 20:51:27.0, 19608, null, 3, 移动开发
2019-02-13 21:37:57.343 DEBUG c.c.m.A.findArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:37:57.344 DEBUG c.c.m.A.findArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:37:57.345 DEBUG c.c.m.A.findArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:37:57.345 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:38:00.581 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:38:00.662 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2b8e5230]
2019-02-13 21:38:00.662 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:38:00.663 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:38:00.770 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:38:00.770 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:38:00.771 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:38:00.772 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:38:00.773 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:38:00.773 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:38:00.774 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:38:00.898 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-13 21:38:00.965 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2b8e5230]
2019-02-13 21:38:00.965 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-13 21:38:00.965 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-13 21:38:01.064 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:38:01.065 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:38:01.066 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:38:01.066 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:38:01.068 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:38:01.069 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:38:01.250 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:38:01.251 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:38:01.253 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-02-13 21:38:01.258 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],"2"]}
2019-02-13 21:38:01.386 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@134f2feb]
2019-02-13 21:38:01.386 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) AND dm = ? 
2019-02-13 21:38:01.387 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String), 2(String)
2019-02-13 21:38:01.435 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2b8e5230]
2019-02-13 21:38:01.435 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:38:01.435 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:38:01.461 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@13542447]
2019-02-13 21:38:01.462 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-02-13 21:38:01.462 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-02-13 21:38:01.470 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5d881bc9]
2019-02-13 21:38:01.470 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:38:01.470 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:38:01.470 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:38:01.471 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:38:01.548 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:38:01.549 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:38:01.549 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:38:01.551 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:38:01.551 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-02-13 21:38:01.551 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:38:01.551 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:38:01.551 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-02-13 21:38:01.551 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:38:01.552 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2b8e5230]
2019-02-13 21:38:01.552 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-02-13 21:38:01.552 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:38:01.552 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:38:01.552 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-02-13 21:38:01.553 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:38:01.553 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:38:01.553 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-02-13 21:38:01.554 DEBUG c.c.m.K.findAllKeywords - <==        Row: 6, php, 2017-11-05 14:32:15.0
2019-02-13 21:38:01.554 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-02-13 21:38:01.554 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-02-13 21:38:01.555 DEBUG c.c.m.K.findAllKeywords - <==        Row: 9, 文件服务器, 2017-11-06 20:40:29.0
2019-02-13 21:38:01.555 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-02-13 21:38:01.555 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2017-12-02 16:48:49.0
2019-02-13 21:38:01.555 DEBUG c.c.m.K.findAllKeywords - <==        Row: 12, 数据导入导出, 2017-12-02 16:48:59.0
2019-02-13 21:38:01.571 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":["2",null]}
2019-02-13 21:38:01.665 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:38:01.666 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:38:01.676 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@134f2feb]
2019-02-13 21:38:01.676 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' AND B.dm = ? ORDER BY A.updatetime DESC 
2019-02-13 21:38:01.676 DEBUG c.c.m.A.findArticle - ==> Parameters: 2(String)
2019-02-13 21:38:01.760 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:38:01.760 DEBUG c.c.m.A.findArticle - <==        Row: 88, 测试5, ces 22233, 2019-02-06 19:48:40.0, 0, null, 2, 网站前端
2019-02-13 21:38:01.760 DEBUG c.c.m.A.findArticle - <==        Row: 87, 测试5, ces 22233, 2019-02-06 19:48:38.0, 0, null, 2, 网站前端
2019-02-13 21:38:01.761 DEBUG c.c.m.A.findArticle - <==        Row: 86, 测试4, ces 22233, 2019-02-06 19:48:35.0, 0, null, 2, 网站前端
2019-02-13 21:38:01.761 DEBUG c.c.m.A.findArticle - <==        Row: 85, 测试4, ces 22233, 2019-02-06 19:48:34.0, 0, null, 2, 网站前端
2019-02-13 21:38:01.761 DEBUG c.c.m.A.findArticle - <==        Row: 84, 测试3, ces 22233, 2019-02-06 19:48:31.0, 0, null, 2, 网站前端
2019-02-13 21:38:01.762 DEBUG c.c.m.A.findArticle - <==        Row: 80, 过年了, 过年了，洗刷刷, 2019-02-06 18:46:31.0, 0, null, 2, 网站前端
2019-02-13 21:38:01.762 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:38:10.326 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:38:10.432 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@134f2feb]
2019-02-13 21:38:10.432 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:38:10.433 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:38:10.520 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:38:10.520 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:38:10.521 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:38:10.521 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:38:10.521 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:38:10.522 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:38:10.522 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:38:10.596 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-13 21:38:10.692 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@134f2feb]
2019-02-13 21:38:10.693 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-13 21:38:10.693 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-13 21:38:10.813 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:38:10.813 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:38:10.814 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:38:10.814 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:38:10.815 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:38:10.815 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:38:10.908 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:38:10.910 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:38:10.912 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-02-13 21:38:10.914 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:38:10.989 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@134f2feb]
2019-02-13 21:38:10.990 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:38:10.990 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:38:11.128 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2b8e5230]
2019-02-13 21:38:11.128 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:38:11.128 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:38:11.135 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5d881bc9]
2019-02-13 21:38:11.135 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:38:11.136 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:38:11.137 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@13542447]
2019-02-13 21:38:11.137 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-02-13 21:38:11.138 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-02-13 21:38:11.177 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:38:11.177 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:38:11.178 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:38:11.178 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:38:11.178 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:38:11.178 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:38:11.179 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:38:11.308 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:38:11.308 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:38:11.309 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2b8e5230]
2019-02-13 21:38:11.310 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:38:11.310 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:38:11.393 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-02-13 21:38:11.393 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:38:11.393 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-02-13 21:38:11.394 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:38:11.394 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-02-13 21:38:11.394 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:38:11.394 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-02-13 21:38:11.395 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:38:11.395 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-02-13 21:38:11.395 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:38:11.395 DEBUG c.c.m.K.findAllKeywords - <==        Row: 6, php, 2017-11-05 14:32:15.0
2019-02-13 21:38:11.396 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:38:11.396 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-02-13 21:38:11.396 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:38:11.396 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-02-13 21:38:11.397 DEBUG c.c.m.K.findAllKeywords - <==        Row: 9, 文件服务器, 2017-11-06 20:40:29.0
2019-02-13 21:38:11.398 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-02-13 21:38:11.398 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2017-12-02 16:48:49.0
2019-02-13 21:38:11.399 DEBUG c.c.m.K.findAllKeywords - <==        Row: 12, 数据导入导出, 2017-12-02 16:48:59.0
2019-02-13 21:38:11.423 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:38:11.424 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:38:11.590 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null]}
2019-02-13 21:38:11.672 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5d881bc9]
2019-02-13 21:38:11.672 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-02-13 21:38:11.673 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-02-13 21:38:11.829 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:38:11.829 DEBUG c.c.m.A.findArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48.0, 0, null, 1, 后端技术
2019-02-13 21:38:11.830 DEBUG c.c.m.A.findArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47.0, 0, null, 1, 后端技术
2019-02-13 21:38:11.830 DEBUG c.c.m.A.findArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46.0, 0, null, 1, 后端技术
2019-02-13 21:38:11.830 DEBUG c.c.m.A.findArticle - <==        Row: 89, 测试5, ces 22233, 2019-02-06 19:48:44.0, 0, null, 1, 后端技术
2019-02-13 21:38:11.830 DEBUG c.c.m.A.findArticle - <==        Row: 88, 测试5, ces 22233, 2019-02-06 19:48:40.0, 0, null, 2, 网站前端
2019-02-13 21:38:11.831 DEBUG c.c.m.A.findArticle - <==        Row: 87, 测试5, ces 22233, 2019-02-06 19:48:38.0, 0, null, 2, 网站前端
2019-02-13 21:38:11.831 DEBUG c.c.m.A.findArticle - <==        Row: 86, 测试4, ces 22233, 2019-02-06 19:48:35.0, 0, null, 2, 网站前端
2019-02-13 21:38:11.831 DEBUG c.c.m.A.findArticle - <==        Row: 85, 测试4, ces 22233, 2019-02-06 19:48:34.0, 0, null, 2, 网站前端
2019-02-13 21:38:11.831 DEBUG c.c.m.A.findArticle - <==        Row: 84, 测试3, ces 22233, 2019-02-06 19:48:31.0, 0, null, 2, 网站前端
2019-02-13 21:38:11.832 DEBUG c.c.m.A.findArticle - <==        Row: 83, 测试2, ces 222, 2019-02-06 19:48:25.0, 0, null, 3, 移动开发
2019-02-13 21:38:11.832 DEBUG c.c.m.A.findArticle - <==        Row: 82, 测试1, ces , 2019-02-06 19:48:21.0, 0, null, 3, 移动开发
2019-02-13 21:38:11.832 DEBUG c.c.m.A.findArticle - <==        Row: 81, 测试, 测试, 2019-02-06 18:53:32.0, 0, null, 3, 移动开发
2019-02-13 21:38:11.833 DEBUG c.c.m.A.findArticle - <==        Row: 80, 过年了, 过年了，洗刷刷, 2019-02-06 18:46:31.0, 0, null, 2, 网站前端
2019-02-13 21:38:11.834 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:38:11.834 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2017-12-03 14:47:34.0, 17674, null, 3, 移动开发
2019-02-13 21:38:11.834 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2017-11-06 20:51:27.0, 19608, null, 3, 移动开发
2019-02-13 21:38:11.835 DEBUG c.c.m.A.findArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:38:11.835 DEBUG c.c.m.A.findArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:38:11.835 DEBUG c.c.m.A.findArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:38:11.836 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:38:14.945 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:38:15.023 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5d881bc9]
2019-02-13 21:38:15.023 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:38:15.024 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:38:15.090 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:38:15.091 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:38:15.091 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:38:15.091 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:38:15.091 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:38:15.092 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:38:15.092 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:38:15.222 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-13 21:38:15.291 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5d881bc9]
2019-02-13 21:38:15.291 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-13 21:38:15.291 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-13 21:38:15.500 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:38:15.501 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:38:15.501 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:38:15.501 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:38:15.502 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:38:15.502 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:38:15.645 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:38:15.645 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:38:15.647 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-02-13 21:38:15.647 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:38:15.718 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5d881bc9]
2019-02-13 21:38:15.718 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:38:15.719 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:38:15.803 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@134f2feb]
2019-02-13 21:38:15.803 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@13542447]
2019-02-13 21:38:15.803 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:38:15.803 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-02-13 21:38:15.804 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:38:15.804 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-02-13 21:38:15.807 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2b8e5230]
2019-02-13 21:38:15.807 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:38:15.807 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:38:15.824 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:38:15.824 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:38:15.825 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:38:15.825 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:38:15.825 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:38:15.825 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:38:15.826 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:38:15.884 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:38:15.884 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:38:15.885 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:38:15.886 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:38:15.886 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:38:15.886 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:38:15.886 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:38:15.890 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-02-13 21:38:15.890 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-02-13 21:38:15.890 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-02-13 21:38:15.891 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-02-13 21:38:15.891 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-02-13 21:38:15.891 DEBUG c.c.m.K.findAllKeywords - <==        Row: 6, php, 2017-11-05 14:32:15.0
2019-02-13 21:38:15.891 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-02-13 21:38:15.891 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-02-13 21:38:15.892 DEBUG c.c.m.K.findAllKeywords - <==        Row: 9, 文件服务器, 2017-11-06 20:40:29.0
2019-02-13 21:38:15.892 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-02-13 21:38:15.892 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2017-12-02 16:48:49.0
2019-02-13 21:38:15.892 DEBUG c.c.m.K.findAllKeywords - <==        Row: 12, 数据导入导出, 2017-12-02 16:48:59.0
2019-02-13 21:38:15.909 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:38:15.909 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:38:15.910 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2b8e5230]
2019-02-13 21:38:15.910 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:38:15.910 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:38:16.017 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null]}
2019-02-13 21:38:16.023 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:38:16.024 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:38:16.129 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@13542447]
2019-02-13 21:38:16.129 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-02-13 21:38:16.129 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-02-13 21:38:16.302 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:38:16.302 DEBUG c.c.m.A.findArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48.0, 0, null, 1, 后端技术
2019-02-13 21:38:16.303 DEBUG c.c.m.A.findArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47.0, 0, null, 1, 后端技术
2019-02-13 21:38:16.303 DEBUG c.c.m.A.findArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46.0, 0, null, 1, 后端技术
2019-02-13 21:38:16.303 DEBUG c.c.m.A.findArticle - <==        Row: 89, 测试5, ces 22233, 2019-02-06 19:48:44.0, 0, null, 1, 后端技术
2019-02-13 21:38:16.303 DEBUG c.c.m.A.findArticle - <==        Row: 88, 测试5, ces 22233, 2019-02-06 19:48:40.0, 0, null, 2, 网站前端
2019-02-13 21:38:16.304 DEBUG c.c.m.A.findArticle - <==        Row: 87, 测试5, ces 22233, 2019-02-06 19:48:38.0, 0, null, 2, 网站前端
2019-02-13 21:38:16.304 DEBUG c.c.m.A.findArticle - <==        Row: 86, 测试4, ces 22233, 2019-02-06 19:48:35.0, 0, null, 2, 网站前端
2019-02-13 21:38:16.304 DEBUG c.c.m.A.findArticle - <==        Row: 85, 测试4, ces 22233, 2019-02-06 19:48:34.0, 0, null, 2, 网站前端
2019-02-13 21:38:16.304 DEBUG c.c.m.A.findArticle - <==        Row: 84, 测试3, ces 22233, 2019-02-06 19:48:31.0, 0, null, 2, 网站前端
2019-02-13 21:38:16.305 DEBUG c.c.m.A.findArticle - <==        Row: 83, 测试2, ces 222, 2019-02-06 19:48:25.0, 0, null, 3, 移动开发
2019-02-13 21:38:16.305 DEBUG c.c.m.A.findArticle - <==        Row: 82, 测试1, ces , 2019-02-06 19:48:21.0, 0, null, 3, 移动开发
2019-02-13 21:38:16.305 DEBUG c.c.m.A.findArticle - <==        Row: 81, 测试, 测试, 2019-02-06 18:53:32.0, 0, null, 3, 移动开发
2019-02-13 21:38:16.305 DEBUG c.c.m.A.findArticle - <==        Row: 80, 过年了, 过年了，洗刷刷, 2019-02-06 18:46:31.0, 0, null, 2, 网站前端
2019-02-13 21:38:16.305 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:38:16.306 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2017-12-03 14:47:34.0, 17674, null, 3, 移动开发
2019-02-13 21:38:16.306 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2017-11-06 20:51:27.0, 19608, null, 3, 移动开发
2019-02-13 21:38:16.306 DEBUG c.c.m.A.findArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:38:16.306 DEBUG c.c.m.A.findArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:38:16.307 DEBUG c.c.m.A.findArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:38:16.307 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:38:17.050 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:38:17.286 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@13542447]
2019-02-13 21:38:17.287 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:38:17.289 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:38:17.527 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:38:17.528 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:38:17.528 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:38:17.530 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:38:17.530 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:38:17.531 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:38:17.531 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:38:17.704 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-13 21:38:17.848 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@13542447]
2019-02-13 21:38:17.849 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-13 21:38:17.851 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-13 21:38:18.003 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:38:18.004 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
2019-02-13 21:38:18.005 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:38:18.006 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:38:18.006 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:38:18.007 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:38:18.150 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:38:18.151 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_SITE_INFORMATION","params":[]}
2019-02-13 21:38:18.153 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_KEYWORDS","params":[]}
2019-02-13 21:38:18.154 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-13 21:38:18.330 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@13542447]
2019-02-13 21:38:18.330 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:38:18.330 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:38:18.334 DEBUG c.c.m.K.findAllKeywords - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@134f2feb]
2019-02-13 21:38:18.335 DEBUG c.c.m.K.findAllKeywords - ==>  Preparing: SELECT id,name,updatetime FROM mine_keywords 
2019-02-13 21:38:18.335 DEBUG c.c.m.K.findAllKeywords - ==> Parameters: 
2019-02-13 21:38:18.339 DEBUG c.c.m.S.getSiteInformation - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2b8e5230]
2019-02-13 21:38:18.340 DEBUG c.c.m.S.getSiteInformation - ==>  Preparing: SELECT site_create_time timeOfSiteCreate,remarks FROM mine_siteinformation 
2019-02-13 21:38:18.340 DEBUG c.c.m.S.getSiteInformation - ==> Parameters: 
2019-02-13 21:38:18.424 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5d881bc9]
2019-02-13 21:38:18.424 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-13 21:38:18.424 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-13 21:38:18.541 DEBUG c.c.m.K.findAllKeywords - <==    Columns: id, name, updatetime
2019-02-13 21:38:18.542 DEBUG c.c.m.K.findAllKeywords - <==        Row: 1, fastdfs, 2017-11-05 12:26:41.0
2019-02-13 21:38:18.542 DEBUG c.c.m.K.findAllKeywords - <==        Row: 3, redis, 2017-11-05 13:56:12.0
2019-02-13 21:38:18.542 DEBUG c.c.m.K.findAllKeywords - <==        Row: 4, springboot, 2017-11-05 13:56:25.0
2019-02-13 21:38:18.543 DEBUG c.c.m.K.findAllKeywords - <==        Row: 5, java, 2017-11-05 14:32:06.0
2019-02-13 21:38:18.543 DEBUG c.c.m.K.findAllKeywords - <==        Row: 6, php, 2017-11-05 14:32:15.0
2019-02-13 21:38:18.543 DEBUG c.c.m.S.getSiteInformation - <==    Columns: site_create_time, remarks
2019-02-13 21:38:18.544 DEBUG c.c.m.K.findAllKeywords - <==        Row: 7, android, 2017-11-05 14:32:20.0
2019-02-13 21:38:18.544 DEBUG c.c.m.S.getSiteInformation - <==        Row: 2019-02-12 20:50:22.0, 网站介绍
2019-02-13 21:38:18.544 DEBUG c.c.m.K.findAllKeywords - <==        Row: 8, 分布式文件系统, 2017-11-06 20:40:23.0
2019-02-13 21:38:18.544 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:38:18.545 DEBUG c.c.m.K.findAllKeywords - <==        Row: 9, 文件服务器, 2017-11-06 20:40:29.0
2019-02-13 21:38:18.545 DEBUG c.c.m.S.getNumsOfArticles - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@2b8e5230]
2019-02-13 21:38:18.545 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:38:18.545 DEBUG c.c.m.K.findAllKeywords - <==        Row: 10, excel, 2017-12-02 16:48:44.0
2019-02-13 21:38:18.545 DEBUG c.c.m.S.getNumsOfArticles - ==>  Preparing: SELECT COUNT(1) FROM mine_articles 
2019-02-13 21:38:18.545 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:38:18.545 DEBUG c.c.m.K.findAllKeywords - <==        Row: 11, poi, 2017-12-02 16:48:49.0
2019-02-13 21:38:18.546 DEBUG c.c.m.S.getNumsOfArticles - ==> Parameters: 
2019-02-13 21:38:18.546 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:38:18.546 DEBUG c.c.m.K.findAllKeywords - <==        Row: 12, 数据导入导出, 2017-12-02 16:48:59.0
2019-02-13 21:38:18.547 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:38:18.547 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:38:18.547 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:38:18.584 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-13 21:38:18.584 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20.0, 记录笔者平常用到的一些学习资料网站
2019-02-13 21:38:18.584 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20.0, 记录笔者的生活
2019-02-13 21:38:18.585 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20.0, 记录笔者平常技术学习用到的东东
2019-02-13 21:38:18.585 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41.0, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-13 21:38:18.585 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24.0, 记录数据库开发时遇到的各种知识点
2019-02-13 21:38:18.585 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48.0, 记录各种常用算法
2019-02-13 21:38:18.797 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null]}
2019-02-13 21:38:18.819 DEBUG c.c.m.S.getNumsOfArticles - <==    Columns: COUNT(1)
2019-02-13 21:38:18.820 DEBUG c.c.m.S.getNumsOfArticles - <==        Row: 22
2019-02-13 21:38:18.957 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.jdbc.JDBC4Connection@5d881bc9]
2019-02-13 21:38:18.957 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-02-13 21:38:18.958 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-02-13 21:38:19.217 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-13 21:38:19.217 DEBUG c.c.m.A.findArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48.0, 0, null, 1, 后端技术
2019-02-13 21:38:19.218 DEBUG c.c.m.A.findArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47.0, 0, null, 1, 后端技术
2019-02-13 21:38:19.219 DEBUG c.c.m.A.findArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46.0, 0, null, 1, 后端技术
2019-02-13 21:38:19.220 DEBUG c.c.m.A.findArticle - <==        Row: 89, 测试5, ces 22233, 2019-02-06 19:48:44.0, 0, null, 1, 后端技术
2019-02-13 21:38:19.220 DEBUG c.c.m.A.findArticle - <==        Row: 88, 测试5, ces 22233, 2019-02-06 19:48:40.0, 0, null, 2, 网站前端
2019-02-13 21:38:19.220 DEBUG c.c.m.A.findArticle - <==        Row: 87, 测试5, ces 22233, 2019-02-06 19:48:38.0, 0, null, 2, 网站前端
2019-02-13 21:38:19.220 DEBUG c.c.m.A.findArticle - <==        Row: 86, 测试4, ces 22233, 2019-02-06 19:48:35.0, 0, null, 2, 网站前端
2019-02-13 21:38:19.221 DEBUG c.c.m.A.findArticle - <==        Row: 85, 测试4, ces 22233, 2019-02-06 19:48:34.0, 0, null, 2, 网站前端
2019-02-13 21:38:19.221 DEBUG c.c.m.A.findArticle - <==        Row: 84, 测试3, ces 22233, 2019-02-06 19:48:31.0, 0, null, 2, 网站前端
2019-02-13 21:38:19.221 DEBUG c.c.m.A.findArticle - <==        Row: 83, 测试2, ces 222, 2019-02-06 19:48:25.0, 0, null, 3, 移动开发
2019-02-13 21:38:19.221 DEBUG c.c.m.A.findArticle - <==        Row: 82, 测试1, ces , 2019-02-06 19:48:21.0, 0, null, 3, 移动开发
2019-02-13 21:38:19.222 DEBUG c.c.m.A.findArticle - <==        Row: 81, 测试, 测试, 2019-02-06 18:53:32.0, 0, null, 3, 移动开发
2019-02-13 21:38:19.222 DEBUG c.c.m.A.findArticle - <==        Row: 80, 过年了, 过年了，洗刷刷, 2019-02-06 18:46:31.0, 0, null, 2, 网站前端
2019-02-13 21:38:19.222 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35.0, 21128, null, 1, 后端技术
2019-02-13 21:38:19.222 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2017-12-03 14:47:34.0, 17674, null, 3, 移动开发
2019-02-13 21:38:19.222 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2017-11-06 20:51:27.0, 19608, null, 3, 移动开发
2019-02-13 21:38:19.223 DEBUG c.c.m.A.findArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53.0, 21219, null, 3, 移动开发
2019-02-13 21:38:19.223 DEBUG c.c.m.A.findArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50.0, 21175, null, 3, 移动开发
2019-02-13 21:38:19.223 DEBUG c.c.m.A.findArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58.0, 21282, null, 3, 移动开发
2019-02-13 21:38:19.223 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16.0, 21333, null, 2, 网站前端
