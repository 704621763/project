2019-02-10 23:32:53.091 INFO  o.h.v.i.u.Version - HV000001: Hibernate Validator 5.2.4.Final
2019-02-10 23:32:53.263 INFO  c.c.ServerApp - Starting ServerApp on WINDOWS-GUOYD with PID 1376 (E:\personal_workspace\git_code\project\mine-server\mine-starter\target\classes started by guoyd in E:\personal_workspace\git_code\project\mine-server\mine-starter)
2019-02-10 23:32:53.264 DEBUG c.c.ServerApp - Running with Spring Boot v1.3.3.RELEASE, Spring v4.2.3.RELEASE
2019-02-10 23:32:53.264 INFO  c.c.ServerApp - No active profile set, falling back to default profiles: default
2019-02-10 23:32:55.761 ERROR c.a.d.p.DruidAbstractDataSource - maxIdle is deprecated
2019-02-10 23:32:57.274 INFO  c.a.d.p.DruidDataSource - {dataSource-1} inited
2019-02-10 23:32:57.312 DEBUG o.a.i.l.LogFactory - Logging initialized using 'org.apache.ibatis.logging.slf4j.Slf4jImpl' adapter.
2019-02-10 23:32:57.577 DEBUG c.g.m.m.p.OffsetLimitInterceptor - dialectClass: com.github.miemiedev.mybatis.paginator.dialect.MySQLDialect 
2019-02-10 23:32:57.579 DEBUG c.g.m.m.p.OffsetLimitInterceptor - asyncTotalCount: false 
2019-02-10 23:32:58.406 INFO  o.a.c.c.StandardService - Starting service Tomcat
2019-02-10 23:32:58.408 INFO  o.a.c.c.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.0.28
2019-02-10 23:32:58.631 INFO  o.a.c.c.C.[.[.[/] - Initializing Spring embedded WebApplicationContext
2019-02-10 23:32:59.330 DEBUG c.c.c.MineServiceHandler - 测试接口初始化
2019-02-10 23:32:59.418 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_USER_LOGIN
2019-02-10 23:32:59.419 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_ARTICLE_LIST
2019-02-10 23:32:59.419 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_ARTICLE_UPDATE_READ_COUNT
2019-02-10 23:32:59.419 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_ARTICLE_LIST_RANK_TOP
2019-02-10 23:32:59.420 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_ARTICLE_DETAIL
2019-02-10 23:32:59.420 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_RANDOM_ARTICLE
2019-02-10 23:32:59.420 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_LATEST_ARTICLE
2019-02-10 23:32:59.420 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_DAILY_ESSAYS
2019-02-10 23:32:59.420 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_DATA_EXPORT
2019-02-10 23:32:59.421 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_CONST
2019-02-10 23:32:59.421 DEBUG c.c.c.MineServiceHandler - 测试接口初始化完毕
2019-02-10 23:33:00.863 INFO  o.a.c.h.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8181"]
2019-02-10 23:33:00.881 INFO  o.a.c.h.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8181"]
2019-02-10 23:33:00.909 INFO  o.a.t.u.n.NioSelectorPool - Using a shared selector for servlet write/read
2019-02-10 23:33:00.972 INFO  c.c.ServerApp - Started ServerApp in 8.882 seconds (JVM running for 10.381)
2019-02-10 23:34:05.205 INFO  o.a.c.c.C.[.[.[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-02-10 23:34:05.392 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:34:05.663 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:34:05.668 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:34:05.720 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:34:05.757 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:34:05.758 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:34:05.762 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:34:05.764 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:34:05.768 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:34:05.770 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:34:05.772 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:34:06.327 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-10 23:34:06.339 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:34:06.341 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-10 23:34:06.343 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-10 23:34:06.355 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:34:06.358 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16, 21333, null, 2, 网站前端
2019-02-10 23:34:06.362 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58, 21282, null, 3, 移动开发
2019-02-10 23:34:06.366 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53, 21219, null, 3, 移动开发
2019-02-10 23:34:06.371 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50, 21175, null, 3, 移动开发
2019-02-10 23:34:06.375 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35, 21128, null, 1, 后端技术
2019-02-10 23:34:06.702 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:34:06.706 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:34:06.707 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:34:06.708 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:34:06.709 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:34:06.710 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:34:06.711 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:34:06.711 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:34:06.712 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:34:06.713 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:34:06.713 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:34:07.035 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_LATEST_ARTICLE","params":[3]}
2019-02-10 23:34:07.045 DEBUG c.c.m.A.findLatestArticle - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:34:07.047 DEBUG c.c.m.A.findLatestArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC LIMIT ? 
2019-02-10 23:34:07.049 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:34:07.051 DEBUG c.c.m.A.findLatestArticle - ==> Parameters: 3(Integer)
2019-02-10 23:34:07.057 DEBUG c.c.m.A.findLatestArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:34:07.059 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@4c52f0bf]
2019-02-10 23:34:07.060 DEBUG c.c.m.A.findLatestArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48, 0, null, 1, 后端技术
2019-02-10 23:34:07.061 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:34:07.062 DEBUG c.c.m.A.findLatestArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47, 0, null, 1, 后端技术
2019-02-10 23:34:07.063 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:34:07.067 DEBUG c.c.m.A.findLatestArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46, 0, null, 1, 后端技术
2019-02-10 23:34:07.070 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:34:07.072 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:34:07.075 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:34:07.081 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:34:07.086 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:34:07.094 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:34:07.100 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:34:07.361 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:34:07.364 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@4c52f0bf]
2019-02-10 23:34:07.365 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:34:07.366 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:34:07.369 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:34:07.370 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:34:07.371 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:34:07.372 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:34:07.372 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:34:07.373 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:34:07.374 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:34:07.409 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null]}
2019-02-10 23:34:07.414 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@4c52f0bf]
2019-02-10 23:34:07.416 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-02-10 23:34:07.417 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-02-10 23:34:07.420 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:34:07.421 DEBUG c.c.m.A.findArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48, 0, null, 1, 后端技术
2019-02-10 23:34:07.422 DEBUG c.c.m.A.findArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47, 0, null, 1, 后端技术
2019-02-10 23:34:07.424 DEBUG c.c.m.A.findArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46, 0, null, 1, 后端技术
2019-02-10 23:34:07.425 DEBUG c.c.m.A.findArticle - <==        Row: 89, 测试5, ces 22233, 2019-02-06 19:48:44, 0, null, 1, 后端技术
2019-02-10 23:34:07.426 DEBUG c.c.m.A.findArticle - <==        Row: 88, 测试5, ces 22233, 2019-02-06 19:48:40, 0, null, 2, 网站前端
2019-02-10 23:34:07.427 DEBUG c.c.m.A.findArticle - <==        Row: 87, 测试5, ces 22233, 2019-02-06 19:48:38, 0, null, 2, 网站前端
2019-02-10 23:34:07.427 DEBUG c.c.m.A.findArticle - <==        Row: 86, 测试4, ces 22233, 2019-02-06 19:48:35, 0, null, 2, 网站前端
2019-02-10 23:34:07.428 DEBUG c.c.m.A.findArticle - <==        Row: 85, 测试4, ces 22233, 2019-02-06 19:48:34, 0, null, 2, 网站前端
2019-02-10 23:34:07.430 DEBUG c.c.m.A.findArticle - <==        Row: 84, 测试3, ces 22233, 2019-02-06 19:48:31, 0, null, 2, 网站前端
2019-02-10 23:34:07.431 DEBUG c.c.m.A.findArticle - <==        Row: 83, 测试2, ces 222, 2019-02-06 19:48:25, 0, null, 3, 移动开发
2019-02-10 23:34:07.432 DEBUG c.c.m.A.findArticle - <==        Row: 82, 测试1, ces , 2019-02-06 19:48:21, 0, null, 3, 移动开发
2019-02-10 23:34:07.433 DEBUG c.c.m.A.findArticle - <==        Row: 81, 测试, 测试, 2019-02-06 18:53:32, 0, null, 3, 移动开发
2019-02-10 23:34:07.434 DEBUG c.c.m.A.findArticle - <==        Row: 80, 过年了, 过年了，洗刷刷, 2019-02-06 18:46:31, 0, null, 2, 网站前端
2019-02-10 23:34:07.434 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35, 21128, null, 1, 后端技术
2019-02-10 23:34:07.435 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2017-12-03 14:47:34, 17674, null, 3, 移动开发
2019-02-10 23:34:07.436 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2017-11-06 20:51:27, 19608, null, 3, 移动开发
2019-02-10 23:34:07.437 DEBUG c.c.m.A.findArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53, 21219, null, 3, 移动开发
2019-02-10 23:34:07.437 DEBUG c.c.m.A.findArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50, 21175, null, 3, 移动开发
2019-02-10 23:34:07.438 DEBUG c.c.m.A.findArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58, 21282, null, 3, 移动开发
2019-02-10 23:34:07.439 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16, 21333, null, 2, 网站前端
2019-02-10 23:34:20.996 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:34:21.000 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@4c52f0bf]
2019-02-10 23:34:21.000 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:34:21.001 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:34:21.002 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:34:21.003 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:34:21.004 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:34:21.005 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:34:21.006 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:34:21.007 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:34:21.008 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:34:21.227 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-10 23:34:21.230 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@4c52f0bf]
2019-02-10 23:34:21.231 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-10 23:34:21.232 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-10 23:34:21.235 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:34:21.236 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16, 21333, null, 2, 网站前端
2019-02-10 23:34:21.238 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58, 21282, null, 3, 移动开发
2019-02-10 23:34:21.239 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53, 21219, null, 3, 移动开发
2019-02-10 23:34:21.240 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50, 21175, null, 3, 移动开发
2019-02-10 23:34:21.241 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35, 21128, null, 1, 后端技术
2019-02-10 23:34:21.451 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:34:21.453 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@4c52f0bf]
2019-02-10 23:34:21.453 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:34:21.453 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:34:21.454 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:34:21.455 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:34:21.455 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:34:21.456 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:34:21.456 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:34:21.456 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:34:21.457 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:34:23.458 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:34:23.460 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@4c52f0bf]
2019-02-10 23:34:23.460 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:34:23.461 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:34:23.462 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:34:23.463 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:34:23.464 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:34:23.465 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:34:23.466 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:34:23.466 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:34:23.467 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:34:23.782 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-10 23:34:23.785 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@4c52f0bf]
2019-02-10 23:34:23.786 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-10 23:34:23.787 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-10 23:34:23.789 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:34:23.791 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16, 21333, null, 2, 网站前端
2019-02-10 23:34:23.792 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58, 21282, null, 3, 移动开发
2019-02-10 23:34:23.793 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53, 21219, null, 3, 移动开发
2019-02-10 23:34:23.794 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50, 21175, null, 3, 移动开发
2019-02-10 23:34:23.795 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35, 21128, null, 1, 后端技术
2019-02-10 23:34:24.067 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:34:24.070 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@4c52f0bf]
2019-02-10 23:34:24.071 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:34:24.072 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:34:24.074 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:34:24.075 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:34:24.076 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:34:24.077 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:34:24.078 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:34:24.078 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:34:24.079 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:34:25.766 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:34:25.769 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@4c52f0bf]
2019-02-10 23:34:25.770 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:34:25.771 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:34:25.773 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:34:25.774 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:34:25.775 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:34:25.775 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:34:25.776 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:34:25.777 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:34:25.778 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:34:25.984 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-10 23:34:25.986 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@4c52f0bf]
2019-02-10 23:34:25.986 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-10 23:34:25.986 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-10 23:34:25.988 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:34:25.988 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16, 21333, null, 2, 网站前端
2019-02-10 23:34:25.989 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58, 21282, null, 3, 移动开发
2019-02-10 23:34:25.989 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53, 21219, null, 3, 移动开发
2019-02-10 23:34:25.989 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50, 21175, null, 3, 移动开发
2019-02-10 23:34:25.990 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35, 21128, null, 1, 后端技术
2019-02-10 23:34:26.228 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:34:26.232 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@4c52f0bf]
2019-02-10 23:34:26.234 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:34:26.236 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:34:26.239 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:34:26.240 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:34:26.241 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:34:26.242 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:34:26.242 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:34:26.243 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:34:26.244 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:34:26.609 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:34:26.612 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@4c52f0bf]
2019-02-10 23:34:26.613 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:34:26.613 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_LATEST_ARTICLE","params":[3]}
2019-02-10 23:34:26.614 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:34:26.616 DEBUG c.c.m.A.findLatestArticle - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:34:26.616 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:34:26.617 DEBUG c.c.m.A.findLatestArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC LIMIT ? 
2019-02-10 23:34:26.618 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:34:26.619 DEBUG c.c.m.A.findLatestArticle - ==> Parameters: 3(Integer)
2019-02-10 23:34:26.619 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:34:26.620 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:34:26.621 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:34:26.621 DEBUG c.c.m.A.findLatestArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:34:26.622 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:34:26.622 DEBUG c.c.m.A.findLatestArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48, 0, null, 1, 后端技术
2019-02-10 23:34:26.623 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:34:26.623 DEBUG c.c.m.A.findLatestArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47, 0, null, 1, 后端技术
2019-02-10 23:34:26.624 DEBUG c.c.m.A.findLatestArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46, 0, null, 1, 后端技术
2019-02-10 23:34:26.862 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:34:26.868 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:34:26.869 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:34:26.871 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:34:26.875 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:34:26.876 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:34:26.878 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:34:26.880 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:34:26.881 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:34:26.883 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:34:26.885 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:34:26.907 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null]}
2019-02-10 23:34:26.912 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:34:26.913 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-02-10 23:34:26.916 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-02-10 23:34:26.922 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:34:26.923 DEBUG c.c.m.A.findArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48, 0, null, 1, 后端技术
2019-02-10 23:34:26.925 DEBUG c.c.m.A.findArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47, 0, null, 1, 后端技术
2019-02-10 23:34:26.926 DEBUG c.c.m.A.findArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46, 0, null, 1, 后端技术
2019-02-10 23:34:26.928 DEBUG c.c.m.A.findArticle - <==        Row: 89, 测试5, ces 22233, 2019-02-06 19:48:44, 0, null, 1, 后端技术
2019-02-10 23:34:26.929 DEBUG c.c.m.A.findArticle - <==        Row: 88, 测试5, ces 22233, 2019-02-06 19:48:40, 0, null, 2, 网站前端
2019-02-10 23:34:26.931 DEBUG c.c.m.A.findArticle - <==        Row: 87, 测试5, ces 22233, 2019-02-06 19:48:38, 0, null, 2, 网站前端
2019-02-10 23:34:26.934 DEBUG c.c.m.A.findArticle - <==        Row: 86, 测试4, ces 22233, 2019-02-06 19:48:35, 0, null, 2, 网站前端
2019-02-10 23:34:26.936 DEBUG c.c.m.A.findArticle - <==        Row: 85, 测试4, ces 22233, 2019-02-06 19:48:34, 0, null, 2, 网站前端
2019-02-10 23:34:26.938 DEBUG c.c.m.A.findArticle - <==        Row: 84, 测试3, ces 22233, 2019-02-06 19:48:31, 0, null, 2, 网站前端
2019-02-10 23:34:26.941 DEBUG c.c.m.A.findArticle - <==        Row: 83, 测试2, ces 222, 2019-02-06 19:48:25, 0, null, 3, 移动开发
2019-02-10 23:34:26.942 DEBUG c.c.m.A.findArticle - <==        Row: 82, 测试1, ces , 2019-02-06 19:48:21, 0, null, 3, 移动开发
2019-02-10 23:34:26.944 DEBUG c.c.m.A.findArticle - <==        Row: 81, 测试, 测试, 2019-02-06 18:53:32, 0, null, 3, 移动开发
2019-02-10 23:34:26.947 DEBUG c.c.m.A.findArticle - <==        Row: 80, 过年了, 过年了，洗刷刷, 2019-02-06 18:46:31, 0, null, 2, 网站前端
2019-02-10 23:34:26.949 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35, 21128, null, 1, 后端技术
2019-02-10 23:34:26.950 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2017-12-03 14:47:34, 17674, null, 3, 移动开发
2019-02-10 23:34:26.952 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2017-11-06 20:51:27, 19608, null, 3, 移动开发
2019-02-10 23:34:26.953 DEBUG c.c.m.A.findArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53, 21219, null, 3, 移动开发
2019-02-10 23:34:26.955 DEBUG c.c.m.A.findArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50, 21175, null, 3, 移动开发
2019-02-10 23:34:26.956 DEBUG c.c.m.A.findArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58, 21282, null, 3, 移动开发
2019-02-10 23:34:26.957 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16, 21333, null, 2, 网站前端
2019-02-10 23:34:31.230 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:34:31.237 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:34:31.238 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:34:31.239 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:34:31.243 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:34:31.245 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:34:31.247 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:34:31.248 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:34:31.251 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:34:31.253 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:34:31.255 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:34:31.494 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-10 23:34:31.502 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:34:31.503 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-10 23:34:31.505 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-10 23:34:31.512 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:34:31.514 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16, 21333, null, 2, 网站前端
2019-02-10 23:34:31.518 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58, 21282, null, 3, 移动开发
2019-02-10 23:34:31.521 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53, 21219, null, 3, 移动开发
2019-02-10 23:34:31.523 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50, 21175, null, 3, 移动开发
2019-02-10 23:34:31.529 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35, 21128, null, 1, 后端技术
2019-02-10 23:34:31.756 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:34:31.762 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:34:31.763 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:34:31.764 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:34:31.769 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:34:31.771 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:34:31.772 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:34:31.774 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:34:31.775 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:34:31.776 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:34:31.778 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:34:32.014 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:34:32.020 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:34:32.022 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:34:32.023 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:34:32.027 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:34:32.028 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:34:32.030 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:34:32.032 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:34:32.034 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:34:32.036 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:34:32.037 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:34:32.054 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null]}
2019-02-10 23:34:32.059 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:34:32.060 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-02-10 23:34:32.061 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-02-10 23:34:32.067 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:34:32.069 DEBUG c.c.m.A.findArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48, 0, null, 1, 后端技术
2019-02-10 23:34:32.071 DEBUG c.c.m.A.findArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47, 0, null, 1, 后端技术
2019-02-10 23:34:32.072 DEBUG c.c.m.A.findArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46, 0, null, 1, 后端技术
2019-02-10 23:34:32.074 DEBUG c.c.m.A.findArticle - <==        Row: 89, 测试5, ces 22233, 2019-02-06 19:48:44, 0, null, 1, 后端技术
2019-02-10 23:34:32.076 DEBUG c.c.m.A.findArticle - <==        Row: 88, 测试5, ces 22233, 2019-02-06 19:48:40, 0, null, 2, 网站前端
2019-02-10 23:34:32.078 DEBUG c.c.m.A.findArticle - <==        Row: 87, 测试5, ces 22233, 2019-02-06 19:48:38, 0, null, 2, 网站前端
2019-02-10 23:34:32.080 DEBUG c.c.m.A.findArticle - <==        Row: 86, 测试4, ces 22233, 2019-02-06 19:48:35, 0, null, 2, 网站前端
2019-02-10 23:34:32.082 DEBUG c.c.m.A.findArticle - <==        Row: 85, 测试4, ces 22233, 2019-02-06 19:48:34, 0, null, 2, 网站前端
2019-02-10 23:34:32.084 DEBUG c.c.m.A.findArticle - <==        Row: 84, 测试3, ces 22233, 2019-02-06 19:48:31, 0, null, 2, 网站前端
2019-02-10 23:34:32.086 DEBUG c.c.m.A.findArticle - <==        Row: 83, 测试2, ces 222, 2019-02-06 19:48:25, 0, null, 3, 移动开发
2019-02-10 23:34:32.087 DEBUG c.c.m.A.findArticle - <==        Row: 82, 测试1, ces , 2019-02-06 19:48:21, 0, null, 3, 移动开发
2019-02-10 23:34:32.089 DEBUG c.c.m.A.findArticle - <==        Row: 81, 测试, 测试, 2019-02-06 18:53:32, 0, null, 3, 移动开发
2019-02-10 23:34:32.090 DEBUG c.c.m.A.findArticle - <==        Row: 80, 过年了, 过年了，洗刷刷, 2019-02-06 18:46:31, 0, null, 2, 网站前端
2019-02-10 23:34:32.091 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35, 21128, null, 1, 后端技术
2019-02-10 23:34:32.093 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2017-12-03 14:47:34, 17674, null, 3, 移动开发
2019-02-10 23:34:32.095 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2017-11-06 20:51:27, 19608, null, 3, 移动开发
2019-02-10 23:34:32.096 DEBUG c.c.m.A.findArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53, 21219, null, 3, 移动开发
2019-02-10 23:34:32.099 DEBUG c.c.m.A.findArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50, 21175, null, 3, 移动开发
2019-02-10 23:34:32.101 DEBUG c.c.m.A.findArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58, 21282, null, 3, 移动开发
2019-02-10 23:34:32.103 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16, 21333, null, 2, 网站前端
2019-02-10 23:35:42.485 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:35:42.490 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:35:42.491 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:35:42.493 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:35:42.496 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:35:42.498 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:35:42.499 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:35:42.500 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:35:42.502 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:35:42.503 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:35:42.504 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:35:42.894 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-10 23:35:42.900 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:35:42.902 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-10 23:35:42.904 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-10 23:35:42.909 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:35:42.911 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16, 21333, null, 2, 网站前端
2019-02-10 23:35:42.912 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58, 21282, null, 3, 移动开发
2019-02-10 23:35:42.914 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53, 21219, null, 3, 移动开发
2019-02-10 23:35:42.915 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50, 21175, null, 3, 移动开发
2019-02-10 23:35:42.917 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35, 21128, null, 1, 后端技术
2019-02-10 23:35:43.300 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:35:43.302 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:35:43.303 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:35:43.303 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:35:43.305 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:35:43.306 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:35:43.307 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:35:43.307 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:35:43.308 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:35:43.309 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:35:43.309 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:35:43.781 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:35:43.784 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_LATEST_ARTICLE","params":[3]}
2019-02-10 23:35:43.785 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:35:43.785 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:35:43.787 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:35:43.787 DEBUG c.c.m.A.findLatestArticle - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@4c52f0bf]
2019-02-10 23:35:43.787 DEBUG c.c.m.A.findLatestArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC LIMIT ? 
2019-02-10 23:35:43.788 DEBUG c.c.m.A.findLatestArticle - ==> Parameters: 3(Integer)
2019-02-10 23:35:43.788 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:35:43.790 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:35:43.791 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:35:43.791 DEBUG c.c.m.A.findLatestArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:35:43.792 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:35:43.792 DEBUG c.c.m.A.findLatestArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48, 0, null, 1, 后端技术
2019-02-10 23:35:43.793 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:35:43.793 DEBUG c.c.m.A.findLatestArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47, 0, null, 1, 后端技术
2019-02-10 23:35:43.794 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:35:43.794 DEBUG c.c.m.A.findLatestArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46, 0, null, 1, 后端技术
2019-02-10 23:35:43.795 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:35:44.208 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:35:44.211 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:35:44.212 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:35:44.212 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:35:44.215 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:35:44.215 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:35:44.216 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:35:44.217 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:35:44.218 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:35:44.218 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:35:44.219 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:35:44.226 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null]}
2019-02-10 23:35:44.228 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:35:44.229 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-02-10 23:35:44.229 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-02-10 23:35:44.231 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:35:44.232 DEBUG c.c.m.A.findArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48, 0, null, 1, 后端技术
2019-02-10 23:35:44.232 DEBUG c.c.m.A.findArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47, 0, null, 1, 后端技术
2019-02-10 23:35:44.233 DEBUG c.c.m.A.findArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46, 0, null, 1, 后端技术
2019-02-10 23:35:44.234 DEBUG c.c.m.A.findArticle - <==        Row: 89, 测试5, ces 22233, 2019-02-06 19:48:44, 0, null, 1, 后端技术
2019-02-10 23:35:44.234 DEBUG c.c.m.A.findArticle - <==        Row: 88, 测试5, ces 22233, 2019-02-06 19:48:40, 0, null, 2, 网站前端
2019-02-10 23:35:44.235 DEBUG c.c.m.A.findArticle - <==        Row: 87, 测试5, ces 22233, 2019-02-06 19:48:38, 0, null, 2, 网站前端
2019-02-10 23:35:44.235 DEBUG c.c.m.A.findArticle - <==        Row: 86, 测试4, ces 22233, 2019-02-06 19:48:35, 0, null, 2, 网站前端
2019-02-10 23:35:44.236 DEBUG c.c.m.A.findArticle - <==        Row: 85, 测试4, ces 22233, 2019-02-06 19:48:34, 0, null, 2, 网站前端
2019-02-10 23:35:44.237 DEBUG c.c.m.A.findArticle - <==        Row: 84, 测试3, ces 22233, 2019-02-06 19:48:31, 0, null, 2, 网站前端
2019-02-10 23:35:44.238 DEBUG c.c.m.A.findArticle - <==        Row: 83, 测试2, ces 222, 2019-02-06 19:48:25, 0, null, 3, 移动开发
2019-02-10 23:35:44.238 DEBUG c.c.m.A.findArticle - <==        Row: 82, 测试1, ces , 2019-02-06 19:48:21, 0, null, 3, 移动开发
2019-02-10 23:35:44.239 DEBUG c.c.m.A.findArticle - <==        Row: 81, 测试, 测试, 2019-02-06 18:53:32, 0, null, 3, 移动开发
2019-02-10 23:35:44.240 DEBUG c.c.m.A.findArticle - <==        Row: 80, 过年了, 过年了，洗刷刷, 2019-02-06 18:46:31, 0, null, 2, 网站前端
2019-02-10 23:35:44.240 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35, 21128, null, 1, 后端技术
2019-02-10 23:35:44.241 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2017-12-03 14:47:34, 17674, null, 3, 移动开发
2019-02-10 23:35:44.242 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2017-11-06 20:51:27, 19608, null, 3, 移动开发
2019-02-10 23:35:44.242 DEBUG c.c.m.A.findArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53, 21219, null, 3, 移动开发
2019-02-10 23:35:44.243 DEBUG c.c.m.A.findArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50, 21175, null, 3, 移动开发
2019-02-10 23:35:44.244 DEBUG c.c.m.A.findArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58, 21282, null, 3, 移动开发
2019-02-10 23:35:44.245 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16, 21333, null, 2, 网站前端
2019-02-10 23:36:05.400 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:36:05.404 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:36:05.405 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:36:05.406 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:36:05.409 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:36:05.410 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:36:05.411 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:36:05.412 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:36:05.413 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:36:05.415 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:36:05.416 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:36:05.669 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-10 23:36:05.671 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:36:05.672 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-10 23:36:05.673 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-10 23:36:05.675 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:36:05.675 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16, 21333, null, 2, 网站前端
2019-02-10 23:36:05.676 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58, 21282, null, 3, 移动开发
2019-02-10 23:36:05.677 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53, 21219, null, 3, 移动开发
2019-02-10 23:36:05.677 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50, 21175, null, 3, 移动开发
2019-02-10 23:36:05.678 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35, 21128, null, 1, 后端技术
2019-02-10 23:36:05.996 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:36:06.001 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:36:06.002 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:36:06.003 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:36:06.005 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:36:06.007 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:36:06.008 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:36:06.009 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:36:06.010 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:36:06.011 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:36:06.012 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:36:08.667 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:36:08.671 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:36:08.672 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:36:08.673 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:36:08.675 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:36:08.676 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:36:08.678 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:36:08.679 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:36:08.680 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:36:08.681 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:36:08.682 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:36:08.958 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-10 23:36:08.961 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:36:08.961 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-10 23:36:08.962 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-10 23:36:08.964 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:36:08.965 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16, 21333, null, 2, 网站前端
2019-02-10 23:36:08.966 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58, 21282, null, 3, 移动开发
2019-02-10 23:36:08.967 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53, 21219, null, 3, 移动开发
2019-02-10 23:36:08.968 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50, 21175, null, 3, 移动开发
2019-02-10 23:36:08.968 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35, 21128, null, 1, 后端技术
2019-02-10 23:36:09.206 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:36:09.209 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:36:09.209 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:36:09.210 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:36:09.212 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:36:09.212 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:36:09.213 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:36:09.214 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:36:09.214 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:36:09.215 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:36:09.216 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:36:09.792 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:36:09.797 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:36:09.798 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:36:09.799 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:36:09.802 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:36:09.803 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:36:09.804 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:36:09.805 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:36:09.806 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:36:09.807 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:36:09.808 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:36:09.819 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_LATEST_ARTICLE","params":[3]}
2019-02-10 23:36:09.821 DEBUG c.c.m.A.findLatestArticle - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:36:09.821 DEBUG c.c.m.A.findLatestArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC LIMIT ? 
2019-02-10 23:36:09.822 DEBUG c.c.m.A.findLatestArticle - ==> Parameters: 3(Integer)
2019-02-10 23:36:09.824 DEBUG c.c.m.A.findLatestArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:36:09.824 DEBUG c.c.m.A.findLatestArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48, 0, null, 1, 后端技术
2019-02-10 23:36:09.825 DEBUG c.c.m.A.findLatestArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47, 0, null, 1, 后端技术
2019-02-10 23:36:09.825 DEBUG c.c.m.A.findLatestArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46, 0, null, 1, 后端技术
2019-02-10 23:36:10.091 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:36:10.095 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:36:10.095 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:36:10.096 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:36:10.098 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:36:10.099 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:36:10.101 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:36:10.101 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:36:10.102 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:36:10.103 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:36:10.103 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:36:10.113 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null]}
2019-02-10 23:36:10.116 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:36:10.116 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-02-10 23:36:10.117 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-02-10 23:36:10.120 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:36:10.120 DEBUG c.c.m.A.findArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48, 0, null, 1, 后端技术
2019-02-10 23:36:10.121 DEBUG c.c.m.A.findArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47, 0, null, 1, 后端技术
2019-02-10 23:36:10.123 DEBUG c.c.m.A.findArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46, 0, null, 1, 后端技术
2019-02-10 23:36:10.124 DEBUG c.c.m.A.findArticle - <==        Row: 89, 测试5, ces 22233, 2019-02-06 19:48:44, 0, null, 1, 后端技术
2019-02-10 23:36:10.124 DEBUG c.c.m.A.findArticle - <==        Row: 88, 测试5, ces 22233, 2019-02-06 19:48:40, 0, null, 2, 网站前端
2019-02-10 23:36:10.125 DEBUG c.c.m.A.findArticle - <==        Row: 87, 测试5, ces 22233, 2019-02-06 19:48:38, 0, null, 2, 网站前端
2019-02-10 23:36:10.125 DEBUG c.c.m.A.findArticle - <==        Row: 86, 测试4, ces 22233, 2019-02-06 19:48:35, 0, null, 2, 网站前端
2019-02-10 23:36:10.126 DEBUG c.c.m.A.findArticle - <==        Row: 85, 测试4, ces 22233, 2019-02-06 19:48:34, 0, null, 2, 网站前端
2019-02-10 23:36:10.128 DEBUG c.c.m.A.findArticle - <==        Row: 84, 测试3, ces 22233, 2019-02-06 19:48:31, 0, null, 2, 网站前端
2019-02-10 23:36:10.128 DEBUG c.c.m.A.findArticle - <==        Row: 83, 测试2, ces 222, 2019-02-06 19:48:25, 0, null, 3, 移动开发
2019-02-10 23:36:10.130 DEBUG c.c.m.A.findArticle - <==        Row: 82, 测试1, ces , 2019-02-06 19:48:21, 0, null, 3, 移动开发
2019-02-10 23:36:10.131 DEBUG c.c.m.A.findArticle - <==        Row: 81, 测试, 测试, 2019-02-06 18:53:32, 0, null, 3, 移动开发
2019-02-10 23:36:10.131 DEBUG c.c.m.A.findArticle - <==        Row: 80, 过年了, 过年了，洗刷刷, 2019-02-06 18:46:31, 0, null, 2, 网站前端
2019-02-10 23:36:10.132 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35, 21128, null, 1, 后端技术
2019-02-10 23:36:10.133 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2017-12-03 14:47:34, 17674, null, 3, 移动开发
2019-02-10 23:36:10.133 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2017-11-06 20:51:27, 19608, null, 3, 移动开发
2019-02-10 23:36:10.134 DEBUG c.c.m.A.findArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53, 21219, null, 3, 移动开发
2019-02-10 23:36:10.135 DEBUG c.c.m.A.findArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50, 21175, null, 3, 移动开发
2019-02-10 23:36:10.136 DEBUG c.c.m.A.findArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58, 21282, null, 3, 移动开发
2019-02-10 23:36:10.136 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16, 21333, null, 2, 网站前端
2019-02-10 23:36:13.782 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:36:13.787 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:36:13.788 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:36:13.789 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:36:13.792 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:36:13.793 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:36:13.794 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:36:13.795 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:36:13.796 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:36:13.797 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:36:13.798 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:36:14.055 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-10 23:36:14.060 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:36:14.062 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-10 23:36:14.062 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-10 23:36:14.066 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:36:14.068 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16, 21333, null, 2, 网站前端
2019-02-10 23:36:14.069 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58, 21282, null, 3, 移动开发
2019-02-10 23:36:14.071 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53, 21219, null, 3, 移动开发
2019-02-10 23:36:14.073 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50, 21175, null, 3, 移动开发
2019-02-10 23:36:14.074 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35, 21128, null, 1, 后端技术
2019-02-10 23:36:14.310 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:36:14.314 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:36:14.315 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:36:14.315 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:36:14.318 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:36:14.319 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:36:14.320 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:36:14.320 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:36:14.321 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:36:14.322 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:36:14.322 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:36:14.591 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],"1"]}
2019-02-10 23:36:14.594 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:36:14.595 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) AND dm = ? 
2019-02-10 23:36:14.596 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String), 1(String)
2019-02-10 23:36:14.597 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:36:14.598 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:36:14.604 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":["1",null]}
2019-02-10 23:36:14.606 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:36:14.606 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' AND B.dm = ? ORDER BY A.updatetime DESC 
2019-02-10 23:36:14.607 DEBUG c.c.m.A.findArticle - ==> Parameters: 1(String)
2019-02-10 23:36:14.608 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:36:14.609 DEBUG c.c.m.A.findArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48, 0, null, 1, 后端技术
2019-02-10 23:36:14.609 DEBUG c.c.m.A.findArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47, 0, null, 1, 后端技术
2019-02-10 23:36:14.609 DEBUG c.c.m.A.findArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46, 0, null, 1, 后端技术
2019-02-10 23:36:14.610 DEBUG c.c.m.A.findArticle - <==        Row: 89, 测试5, ces 22233, 2019-02-06 19:48:44, 0, null, 1, 后端技术
2019-02-10 23:36:14.610 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35, 21128, null, 1, 后端技术
2019-02-10 23:36:18.309 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_DETAIL","params":["92"]}
2019-02-10 23:36:18.314 DEBUG c.c.m.A.findDetailById - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:36:18.315 DEBUG c.c.m.A.findDetailById - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName,htmlContent,content FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' WHERE A.id = ? 
2019-02-10 23:36:18.316 DEBUG c.c.m.A.findDetailById - ==> Parameters: 92(String)
2019-02-10 23:36:18.319 DEBUG c.c.m.A.findDetailById - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms, htmlContent, content
2019-02-10 23:36:18.320 DEBUG c.c.m.A.findDetailById - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48, 0, null, 1, 后端技术, , 
2019-02-10 23:36:18.901 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:36:18.904 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:36:18.904 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:36:18.905 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:36:18.907 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:36:18.907 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:36:18.908 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:36:18.908 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:36:18.909 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:36:18.909 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:36:18.910 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:36:19.204 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-10 23:36:19.207 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:36:19.208 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-10 23:36:19.209 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-10 23:36:19.212 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:36:19.213 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16, 21333, null, 2, 网站前端
2019-02-10 23:36:19.214 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58, 21282, null, 3, 移动开发
2019-02-10 23:36:19.215 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53, 21219, null, 3, 移动开发
2019-02-10 23:36:19.217 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50, 21175, null, 3, 移动开发
2019-02-10 23:36:19.219 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35, 21128, null, 1, 后端技术
2019-02-10 23:36:19.514 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:36:19.518 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:36:19.519 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:36:19.520 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:36:19.523 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:36:19.524 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:36:19.525 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:36:19.526 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:36:19.527 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:36:19.528 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:36:19.529 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:36:23.399 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:36:23.401 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:36:23.402 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:36:23.402 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:36:23.403 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:36:23.404 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:36:23.404 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:36:23.405 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:36:23.406 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:36:23.406 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:36:23.407 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:36:23.661 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-10 23:36:23.663 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:36:23.664 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-10 23:36:23.664 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-10 23:36:23.666 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:36:23.667 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16, 21333, null, 2, 网站前端
2019-02-10 23:36:23.668 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58, 21282, null, 3, 移动开发
2019-02-10 23:36:23.668 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53, 21219, null, 3, 移动开发
2019-02-10 23:36:23.669 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50, 21175, null, 3, 移动开发
2019-02-10 23:36:23.670 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35, 21128, null, 1, 后端技术
2019-02-10 23:36:24.018 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:36:24.022 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:36:24.023 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:36:24.024 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:36:24.027 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:36:24.027 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:36:24.028 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:36:24.030 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:36:24.030 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:36:24.031 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:36:24.033 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:36:24.431 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],"4"]}
2019-02-10 23:36:24.436 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:36:24.436 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) AND dm = ? 
2019-02-10 23:36:24.437 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String), 4(String)
2019-02-10 23:36:24.440 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:36:24.441 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:36:24.454 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":["4",null]}
2019-02-10 23:36:24.458 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:36:24.458 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' AND B.dm = ? ORDER BY A.updatetime DESC 
2019-02-10 23:36:24.459 DEBUG c.c.m.A.findArticle - ==> Parameters: 4(String)
2019-02-10 23:36:24.463 DEBUG c.c.s.i.ArticleServiceImpl - 未查到任何文章信息
2019-02-10 23:44:10.201 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:44:10.208 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:44:10.210 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:44:10.211 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:44:10.217 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:44:10.218 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:44:10.220 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:44:10.221 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:44:10.222 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:44:10.223 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:44:10.224 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:44:10.465 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-10 23:44:10.467 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:44:10.467 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-10 23:44:10.468 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-10 23:44:10.469 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:44:10.469 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16, 21333, null, 2, 网站前端
2019-02-10 23:44:10.470 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58, 21282, null, 3, 移动开发
2019-02-10 23:44:10.470 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53, 21219, null, 3, 移动开发
2019-02-10 23:44:10.470 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50, 21175, null, 3, 移动开发
2019-02-10 23:44:10.470 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35, 21128, null, 1, 后端技术
2019-02-10 23:44:10.688 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:44:10.691 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:44:10.691 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:44:10.692 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:44:10.694 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:44:10.694 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:44:10.695 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:44:10.696 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:44:10.696 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:44:10.697 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:44:10.697 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:44:12.798 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:44:12.803 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:44:12.804 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:44:12.805 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:44:12.808 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:44:12.809 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:44:12.811 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:44:12.813 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:44:12.814 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:44:12.816 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:44:12.817 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:44:13.044 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-10 23:44:13.046 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:44:13.047 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-10 23:44:13.047 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-10 23:44:13.049 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:44:13.049 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16, 21333, null, 2, 网站前端
2019-02-10 23:44:13.050 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58, 21282, null, 3, 移动开发
2019-02-10 23:44:13.050 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53, 21219, null, 3, 移动开发
2019-02-10 23:44:13.051 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50, 21175, null, 3, 移动开发
2019-02-10 23:44:13.051 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35, 21128, null, 1, 后端技术
2019-02-10 23:44:13.261 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:44:13.263 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:44:13.264 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:44:13.265 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:44:13.267 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:44:13.267 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:44:13.268 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:44:13.268 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:44:13.268 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:44:13.269 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:44:13.269 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:44:15.865 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:44:15.870 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:44:15.871 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:44:15.872 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:44:15.875 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:44:15.876 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:44:15.878 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:44:15.879 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:44:15.881 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:44:15.882 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:44:15.883 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:44:16.101 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-10 23:44:16.103 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:44:16.104 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-10 23:44:16.105 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-10 23:44:16.107 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:44:16.108 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16, 21333, null, 2, 网站前端
2019-02-10 23:44:16.108 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58, 21282, null, 3, 移动开发
2019-02-10 23:44:16.109 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53, 21219, null, 3, 移动开发
2019-02-10 23:44:16.110 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50, 21175, null, 3, 移动开发
2019-02-10 23:44:16.110 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35, 21128, null, 1, 后端技术
2019-02-10 23:44:16.321 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:44:16.324 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:44:16.324 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:44:16.325 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:44:16.326 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:44:16.326 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:44:16.327 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:44:16.327 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:44:16.328 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:44:16.328 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:44:16.328 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:44:18.733 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:44:18.738 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:44:18.739 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:44:18.740 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:44:18.743 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:44:18.744 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:44:18.746 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:44:18.747 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:44:18.748 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:44:18.749 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:44:18.750 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:44:18.976 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-10 23:44:18.978 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:44:18.978 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-10 23:44:18.978 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-10 23:44:18.979 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:44:18.980 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16, 21333, null, 2, 网站前端
2019-02-10 23:44:18.980 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58, 21282, null, 3, 移动开发
2019-02-10 23:44:18.981 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53, 21219, null, 3, 移动开发
2019-02-10 23:44:18.981 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50, 21175, null, 3, 移动开发
2019-02-10 23:44:18.982 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35, 21128, null, 1, 后端技术
2019-02-10 23:44:19.201 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:44:19.205 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:44:19.206 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:44:19.207 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:44:19.210 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:44:19.212 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:44:19.213 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:44:19.214 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:44:19.216 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:44:19.217 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:44:19.218 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:44:19.431 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],"2"]}
2019-02-10 23:44:19.436 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:44:19.437 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) AND dm = ? 
2019-02-10 23:44:19.439 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String), 2(String)
2019-02-10 23:44:19.443 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:44:19.444 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:44:19.464 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":["2",null]}
2019-02-10 23:44:19.469 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:44:19.470 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' AND B.dm = ? ORDER BY A.updatetime DESC 
2019-02-10 23:44:19.472 DEBUG c.c.m.A.findArticle - ==> Parameters: 2(String)
2019-02-10 23:44:19.476 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:44:19.477 DEBUG c.c.m.A.findArticle - <==        Row: 88, 测试5, ces 22233, 2019-02-06 19:48:40, 0, null, 2, 网站前端
2019-02-10 23:44:19.479 DEBUG c.c.m.A.findArticle - <==        Row: 87, 测试5, ces 22233, 2019-02-06 19:48:38, 0, null, 2, 网站前端
2019-02-10 23:44:19.480 DEBUG c.c.m.A.findArticle - <==        Row: 86, 测试4, ces 22233, 2019-02-06 19:48:35, 0, null, 2, 网站前端
2019-02-10 23:44:19.481 DEBUG c.c.m.A.findArticle - <==        Row: 85, 测试4, ces 22233, 2019-02-06 19:48:34, 0, null, 2, 网站前端
2019-02-10 23:44:19.482 DEBUG c.c.m.A.findArticle - <==        Row: 84, 测试3, ces 22233, 2019-02-06 19:48:31, 0, null, 2, 网站前端
2019-02-10 23:44:19.484 DEBUG c.c.m.A.findArticle - <==        Row: 80, 过年了, 过年了，洗刷刷, 2019-02-06 18:46:31, 0, null, 2, 网站前端
2019-02-10 23:44:19.485 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16, 21333, null, 2, 网站前端
2019-02-10 23:44:22.564 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:44:22.569 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:44:22.570 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:44:22.571 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:44:22.574 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:44:22.575 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:44:22.576 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:44:22.577 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:44:22.579 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:44:22.579 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:44:22.580 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:44:22.809 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-10 23:44:22.810 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:44:22.811 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-10 23:44:22.811 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-10 23:44:22.812 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:44:22.812 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16, 21333, null, 2, 网站前端
2019-02-10 23:44:22.813 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58, 21282, null, 3, 移动开发
2019-02-10 23:44:22.813 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53, 21219, null, 3, 移动开发
2019-02-10 23:44:22.813 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50, 21175, null, 3, 移动开发
2019-02-10 23:44:22.813 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35, 21128, null, 1, 后端技术
2019-02-10 23:44:23.027 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:44:23.029 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:44:23.030 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:44:23.030 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:44:23.032 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:44:23.033 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:44:23.033 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:44:23.034 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:44:23.034 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:44:23.035 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:44:23.035 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:44:23.265 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],"3"]}
2019-02-10 23:44:23.271 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:44:23.272 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) AND dm = ? 
2019-02-10 23:44:23.274 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String), 3(String)
2019-02-10 23:44:23.276 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:44:23.278 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:44:23.289 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":["3",null]}
2019-02-10 23:44:23.292 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:44:23.292 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' AND B.dm = ? ORDER BY A.updatetime DESC 
2019-02-10 23:44:23.293 DEBUG c.c.m.A.findArticle - ==> Parameters: 3(String)
2019-02-10 23:44:23.295 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:44:23.296 DEBUG c.c.m.A.findArticle - <==        Row: 83, 测试2, ces 222, 2019-02-06 19:48:25, 0, null, 3, 移动开发
2019-02-10 23:44:23.297 DEBUG c.c.m.A.findArticle - <==        Row: 82, 测试1, ces , 2019-02-06 19:48:21, 0, null, 3, 移动开发
2019-02-10 23:44:23.297 DEBUG c.c.m.A.findArticle - <==        Row: 81, 测试, 测试, 2019-02-06 18:53:32, 0, null, 3, 移动开发
2019-02-10 23:44:23.298 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2017-12-03 14:47:34, 17674, null, 3, 移动开发
2019-02-10 23:44:23.299 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2017-11-06 20:51:27, 19608, null, 3, 移动开发
2019-02-10 23:44:23.299 DEBUG c.c.m.A.findArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53, 21219, null, 3, 移动开发
2019-02-10 23:44:23.300 DEBUG c.c.m.A.findArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50, 21175, null, 3, 移动开发
2019-02-10 23:44:23.300 DEBUG c.c.m.A.findArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58, 21282, null, 3, 移动开发
2019-02-10 23:44:26.948 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:44:26.952 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:44:26.953 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:44:26.954 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:44:26.958 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:44:26.959 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:44:26.961 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:44:26.962 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:44:26.963 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:44:26.964 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:44:26.966 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:44:27.188 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-10 23:44:27.191 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:44:27.191 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-10 23:44:27.192 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-10 23:44:27.194 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:44:27.195 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16, 21333, null, 2, 网站前端
2019-02-10 23:44:27.195 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58, 21282, null, 3, 移动开发
2019-02-10 23:44:27.195 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53, 21219, null, 3, 移动开发
2019-02-10 23:44:27.196 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50, 21175, null, 3, 移动开发
2019-02-10 23:44:27.196 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35, 21128, null, 1, 后端技术
2019-02-10 23:44:27.419 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:44:27.423 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:44:27.424 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:44:27.424 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:44:27.427 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:44:27.428 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:44:27.429 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:44:27.430 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:44:27.431 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:44:27.432 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:44:27.433 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:44:27.651 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],"2"]}
2019-02-10 23:44:27.654 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:44:27.655 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) AND dm = ? 
2019-02-10 23:44:27.656 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String), 2(String)
2019-02-10 23:44:27.657 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:44:27.658 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:44:27.667 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":["2",null]}
2019-02-10 23:44:27.670 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:44:27.670 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' AND B.dm = ? ORDER BY A.updatetime DESC 
2019-02-10 23:44:27.670 DEBUG c.c.m.A.findArticle - ==> Parameters: 2(String)
2019-02-10 23:44:27.672 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:44:27.673 DEBUG c.c.m.A.findArticle - <==        Row: 88, 测试5, ces 22233, 2019-02-06 19:48:40, 0, null, 2, 网站前端
2019-02-10 23:44:27.673 DEBUG c.c.m.A.findArticle - <==        Row: 87, 测试5, ces 22233, 2019-02-06 19:48:38, 0, null, 2, 网站前端
2019-02-10 23:44:27.674 DEBUG c.c.m.A.findArticle - <==        Row: 86, 测试4, ces 22233, 2019-02-06 19:48:35, 0, null, 2, 网站前端
2019-02-10 23:44:27.674 DEBUG c.c.m.A.findArticle - <==        Row: 85, 测试4, ces 22233, 2019-02-06 19:48:34, 0, null, 2, 网站前端
2019-02-10 23:44:27.675 DEBUG c.c.m.A.findArticle - <==        Row: 84, 测试3, ces 22233, 2019-02-06 19:48:31, 0, null, 2, 网站前端
2019-02-10 23:44:27.676 DEBUG c.c.m.A.findArticle - <==        Row: 80, 过年了, 过年了，洗刷刷, 2019-02-06 18:46:31, 0, null, 2, 网站前端
2019-02-10 23:44:27.677 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16, 21333, null, 2, 网站前端
2019-02-10 23:44:34.214 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:44:34.218 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:44:34.219 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:44:34.220 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:44:34.223 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:44:34.225 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:44:34.225 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:44:34.225 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:44:34.225 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:44:34.226 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:44:34.228 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:44:34.455 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-10 23:44:34.456 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:44:34.457 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-10 23:44:34.457 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-10 23:44:34.458 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:44:34.458 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16, 21333, null, 2, 网站前端
2019-02-10 23:44:34.459 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58, 21282, null, 3, 移动开发
2019-02-10 23:44:34.459 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53, 21219, null, 3, 移动开发
2019-02-10 23:44:34.459 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50, 21175, null, 3, 移动开发
2019-02-10 23:44:34.459 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35, 21128, null, 1, 后端技术
2019-02-10 23:44:34.679 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:44:34.686 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:44:34.686 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:44:34.688 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:44:34.690 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:44:34.690 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:44:34.691 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:44:34.692 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:44:34.693 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:44:34.693 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:44:34.694 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:44:34.941 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:44:34.945 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@5aefd65c]
2019-02-10 23:44:34.946 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:44:34.946 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:44:34.947 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_LATEST_ARTICLE","params":[3]}
2019-02-10 23:44:34.948 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:44:34.949 DEBUG c.c.m.A.findLatestArticle - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@4c52f0bf]
2019-02-10 23:44:34.949 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:44:34.950 DEBUG c.c.m.A.findLatestArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC LIMIT ? 
2019-02-10 23:44:34.950 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:44:34.951 DEBUG c.c.m.A.findLatestArticle - ==> Parameters: 3(Integer)
2019-02-10 23:44:34.951 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:44:34.952 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:44:34.952 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:44:34.952 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:44:34.953 DEBUG c.c.m.A.findLatestArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:44:34.953 DEBUG c.c.m.A.findLatestArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48, 0, null, 1, 后端技术
2019-02-10 23:44:34.954 DEBUG c.c.m.A.findLatestArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47, 0, null, 1, 后端技术
2019-02-10 23:44:34.954 DEBUG c.c.m.A.findLatestArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46, 0, null, 1, 后端技术
2019-02-10 23:44:35.186 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:44:35.191 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@4c52f0bf]
2019-02-10 23:44:35.191 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:44:35.192 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:44:35.195 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:44:35.196 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:44:35.197 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:44:35.199 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:44:35.200 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:44:35.201 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:44:35.202 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:44:35.218 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null]}
2019-02-10 23:44:35.222 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@4c52f0bf]
2019-02-10 23:44:35.223 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-02-10 23:44:35.224 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-02-10 23:44:35.228 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:44:35.229 DEBUG c.c.m.A.findArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48, 0, null, 1, 后端技术
2019-02-10 23:44:35.232 DEBUG c.c.m.A.findArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47, 0, null, 1, 后端技术
2019-02-10 23:44:35.233 DEBUG c.c.m.A.findArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46, 0, null, 1, 后端技术
2019-02-10 23:44:35.235 DEBUG c.c.m.A.findArticle - <==        Row: 89, 测试5, ces 22233, 2019-02-06 19:48:44, 0, null, 1, 后端技术
2019-02-10 23:44:35.235 DEBUG c.c.m.A.findArticle - <==        Row: 88, 测试5, ces 22233, 2019-02-06 19:48:40, 0, null, 2, 网站前端
2019-02-10 23:44:35.236 DEBUG c.c.m.A.findArticle - <==        Row: 87, 测试5, ces 22233, 2019-02-06 19:48:38, 0, null, 2, 网站前端
2019-02-10 23:44:35.238 DEBUG c.c.m.A.findArticle - <==        Row: 86, 测试4, ces 22233, 2019-02-06 19:48:35, 0, null, 2, 网站前端
2019-02-10 23:44:35.238 DEBUG c.c.m.A.findArticle - <==        Row: 85, 测试4, ces 22233, 2019-02-06 19:48:34, 0, null, 2, 网站前端
2019-02-10 23:44:35.239 DEBUG c.c.m.A.findArticle - <==        Row: 84, 测试3, ces 22233, 2019-02-06 19:48:31, 0, null, 2, 网站前端
2019-02-10 23:44:35.240 DEBUG c.c.m.A.findArticle - <==        Row: 83, 测试2, ces 222, 2019-02-06 19:48:25, 0, null, 3, 移动开发
2019-02-10 23:44:35.241 DEBUG c.c.m.A.findArticle - <==        Row: 82, 测试1, ces , 2019-02-06 19:48:21, 0, null, 3, 移动开发
2019-02-10 23:44:35.242 DEBUG c.c.m.A.findArticle - <==        Row: 81, 测试, 测试, 2019-02-06 18:53:32, 0, null, 3, 移动开发
2019-02-10 23:44:35.243 DEBUG c.c.m.A.findArticle - <==        Row: 80, 过年了, 过年了，洗刷刷, 2019-02-06 18:46:31, 0, null, 2, 网站前端
2019-02-10 23:44:35.243 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35, 21128, null, 1, 后端技术
2019-02-10 23:44:35.244 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2017-12-03 14:47:34, 17674, null, 3, 移动开发
2019-02-10 23:44:35.244 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2017-11-06 20:51:27, 19608, null, 3, 移动开发
2019-02-10 23:44:35.245 DEBUG c.c.m.A.findArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53, 21219, null, 3, 移动开发
2019-02-10 23:44:35.245 DEBUG c.c.m.A.findArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50, 21175, null, 3, 移动开发
2019-02-10 23:44:35.246 DEBUG c.c.m.A.findArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58, 21282, null, 3, 移动开发
2019-02-10 23:44:35.246 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16, 21333, null, 2, 网站前端
2019-02-10 23:52:09.033 INFO  o.h.v.i.u.Version - HV000001: Hibernate Validator 5.2.4.Final
2019-02-10 23:52:09.089 INFO  c.c.ServerApp - Starting ServerApp on WINDOWS-GUOYD with PID 92 (E:\personal_workspace\git_code\project\mine-server\mine-starter\target\classes started by guoyd in E:\personal_workspace\git_code\project\mine-server\mine-starter)
2019-02-10 23:52:09.089 DEBUG c.c.ServerApp - Running with Spring Boot v1.3.3.RELEASE, Spring v4.2.3.RELEASE
2019-02-10 23:52:09.089 INFO  c.c.ServerApp - No active profile set, falling back to default profiles: default
2019-02-10 23:52:10.259 ERROR c.a.d.p.DruidAbstractDataSource - maxIdle is deprecated
2019-02-10 23:52:10.430 ERROR c.a.d.p.DruidDataSource - init datasource error, url: jdbc:mysql://tcp://server.natappfree.cc:37970/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:677)
	at com.alibaba.druid.pool.DruidDataSourceFactory.config(DruidDataSourceFactory.java:361)
	at com.alibaba.druid.pool.DruidDataSourceFactory.createDataSource(DruidDataSourceFactory.java:143)
	at com.codinggyd.config.MyBatisConfig$DataSourceConfig.dbH2DataSource(MyBatisConfig.java:117)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1192)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:545)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1214)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:368)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1192)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:545)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1214)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(PostProcessorRegistrationDelegate.java:228)
	at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:686)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:522)
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:766)
	at org.springframework.boot.SpringApplication.createAndRefreshContext(SpringApplication.java:361)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:307)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1191)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1180)
	at com.codinggyd.ServerApp.main(ServerApp.java:24)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 354 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 353 common frames omitted
2019-02-10 23:52:10.460 ERROR c.a.d.p.DruidDataSource - {dataSource-1} init error
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:677)
	at com.alibaba.druid.pool.DruidDataSourceFactory.config(DruidDataSourceFactory.java:361)
	at com.alibaba.druid.pool.DruidDataSourceFactory.createDataSource(DruidDataSourceFactory.java:143)
	at com.codinggyd.config.MyBatisConfig$DataSourceConfig.dbH2DataSource(MyBatisConfig.java:117)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1192)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:545)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1214)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:368)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1192)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:545)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1214)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(PostProcessorRegistrationDelegate.java:228)
	at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:686)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:522)
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:766)
	at org.springframework.boot.SpringApplication.createAndRefreshContext(SpringApplication.java:361)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:307)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1191)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1180)
	at com.codinggyd.ServerApp.main(ServerApp.java:24)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 354 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 353 common frames omitted
2019-02-10 23:52:10.464 INFO  c.a.d.p.DruidDataSource - {dataSource-1} inited
2019-02-10 23:52:10.466 ERROR c.c.c.MyBatisConfig$DataSourceConfig - 数据库连接池初始化失败,{}
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:677)
	at com.alibaba.druid.pool.DruidDataSourceFactory.config(DruidDataSourceFactory.java:361)
	at com.alibaba.druid.pool.DruidDataSourceFactory.createDataSource(DruidDataSourceFactory.java:143)
	at com.codinggyd.config.MyBatisConfig$DataSourceConfig.dbH2DataSource(MyBatisConfig.java:117)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1192)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:545)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1214)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:368)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1192)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1292)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1199)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:808)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:544)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:447)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:415)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:220)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1116)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:545)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1214)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(PostProcessorRegistrationDelegate.java:228)
	at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:686)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:522)
	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:766)
	at org.springframework.boot.SpringApplication.createAndRefreshContext(SpringApplication.java:361)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:307)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1191)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1180)
	at com.codinggyd.ServerApp.main(ServerApp.java:24)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 354 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 353 common frames omitted
2019-02-10 23:52:10.468 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://tcp://server.natappfree.cc:37970/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08001
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 4 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 3 common frames omitted
2019-02-10 23:52:10.480 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://tcp://server.natappfree.cc:37970/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08001
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 4 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 3 common frames omitted
2019-02-10 23:52:10.482 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://tcp://server.natappfree.cc:37970/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08001
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 4 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 3 common frames omitted
2019-02-10 23:52:10.496 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://tcp://server.natappfree.cc:37970/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08001
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 4 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 3 common frames omitted
2019-02-10 23:52:10.499 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://tcp://server.natappfree.cc:37970/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08001
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 4 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 3 common frames omitted
2019-02-10 23:52:10.501 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://tcp://server.natappfree.cc:37970/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08001
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 4 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 3 common frames omitted
2019-02-10 23:52:10.503 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://tcp://server.natappfree.cc:37970/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08001
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 4 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 3 common frames omitted
2019-02-10 23:52:10.505 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://tcp://server.natappfree.cc:37970/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08001
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 4 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 3 common frames omitted
2019-02-10 23:52:10.507 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://tcp://server.natappfree.cc:37970/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08001
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 4 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 3 common frames omitted
2019-02-10 23:52:10.508 DEBUG o.a.i.l.LogFactory - Logging initialized using 'org.apache.ibatis.logging.slf4j.Slf4jImpl' adapter.
2019-02-10 23:52:10.508 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://tcp://server.natappfree.cc:37970/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08001
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 4 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 3 common frames omitted
2019-02-10 23:52:10.510 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://tcp://server.natappfree.cc:37970/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08001
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 4 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 3 common frames omitted
2019-02-10 23:52:10.512 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://tcp://server.natappfree.cc:37970/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08001
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 4 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 3 common frames omitted
2019-02-10 23:52:10.514 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://tcp://server.natappfree.cc:37970/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08001
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 4 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 3 common frames omitted
2019-02-10 23:52:10.515 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://tcp://server.natappfree.cc:37970/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08001
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 4 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 3 common frames omitted
2019-02-10 23:52:10.518 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://tcp://server.natappfree.cc:37970/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08001
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 4 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 3 common frames omitted
2019-02-10 23:52:10.520 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://tcp://server.natappfree.cc:37970/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08001
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 4 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor16.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 3 common frames omitted
2019-02-10 23:52:10.521 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://tcp://server.natappfree.cc:37970/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08001
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 4 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor16.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 3 common frames omitted
2019-02-10 23:52:10.523 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://tcp://server.natappfree.cc:37970/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08001
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 4 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor16.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 3 common frames omitted
2019-02-10 23:52:10.524 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://tcp://server.natappfree.cc:37970/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08001
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 4 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor16.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 3 common frames omitted
2019-02-10 23:52:10.532 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://tcp://server.natappfree.cc:37970/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08001
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 4 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor16.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 3 common frames omitted
2019-02-10 23:52:10.534 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://tcp://server.natappfree.cc:37970/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08001
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 4 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor16.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 3 common frames omitted
2019-02-10 23:52:10.535 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://tcp://server.natappfree.cc:37970/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08001
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 4 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor16.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 3 common frames omitted
2019-02-10 23:52:10.537 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://tcp://server.natappfree.cc:37970/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08001
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 4 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor16.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 3 common frames omitted
2019-02-10 23:52:10.542 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://tcp://server.natappfree.cc:37970/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08001
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 4 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor16.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 3 common frames omitted
2019-02-10 23:52:10.543 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://tcp://server.natappfree.cc:37970/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08001
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 4 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor16.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 3 common frames omitted
2019-02-10 23:52:10.550 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://tcp://server.natappfree.cc:37970/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08001
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 4 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor16.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 3 common frames omitted
2019-02-10 23:52:10.551 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://tcp://server.natappfree.cc:37970/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08001
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 4 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor16.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 3 common frames omitted
2019-02-10 23:52:10.552 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://tcp://server.natappfree.cc:37970/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08001
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 4 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor16.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 3 common frames omitted
2019-02-10 23:52:10.553 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://tcp://server.natappfree.cc:37970/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08001
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 4 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor16.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 3 common frames omitted
2019-02-10 23:52:10.554 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://tcp://server.natappfree.cc:37970/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08001
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 4 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor16.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 3 common frames omitted
2019-02-10 23:52:10.555 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://tcp://server.natappfree.cc:37970/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08001
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 4 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor16.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 3 common frames omitted
2019-02-10 23:52:40.557 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://tcp://server.natappfree.cc:37970/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08001
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 4 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor16.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 3 common frames omitted
2019-02-10 23:52:45.909 INFO  c.c.ServerApp - Starting ServerApp on WINDOWS-GUOYD with PID 1804 (E:\personal_workspace\git_code\project\mine-server\mine-starter\target\classes started by guoyd in E:\personal_workspace\git_code\project\mine-server\mine-starter)
2019-02-10 23:52:45.921 DEBUG c.c.ServerApp - Running with Spring Boot v1.3.3.RELEASE, Spring v4.2.3.RELEASE
2019-02-10 23:52:45.922 INFO  c.c.ServerApp - No active profile set, falling back to default profiles: default
2019-02-10 23:52:47.926 ERROR c.a.d.p.DruidAbstractDataSource - maxIdle is deprecated
2019-02-10 23:53:10.558 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://tcp://server.natappfree.cc:37970/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08001
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 4 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor16.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 3 common frames omitted
2019-02-10 23:53:10.801 INFO  c.a.d.p.DruidDataSource - {dataSource-1} inited
2019-02-10 23:53:10.888 DEBUG o.a.i.l.LogFactory - Logging initialized using 'org.apache.ibatis.logging.slf4j.Slf4jImpl' adapter.
2019-02-10 23:53:11.376 DEBUG c.g.m.m.p.OffsetLimitInterceptor - dialectClass: com.github.miemiedev.mybatis.paginator.dialect.MySQLDialect 
2019-02-10 23:53:11.381 DEBUG c.g.m.m.p.OffsetLimitInterceptor - asyncTotalCount: false 
2019-02-10 23:53:12.540 INFO  o.a.c.c.StandardService - Starting service Tomcat
2019-02-10 23:53:12.543 INFO  o.a.c.c.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.0.28
2019-02-10 23:53:12.964 INFO  o.a.c.c.C.[.[.[/] - Initializing Spring embedded WebApplicationContext
2019-02-10 23:53:14.021 DEBUG c.c.c.MineServiceHandler - 测试接口初始化
2019-02-10 23:53:14.113 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_USER_LOGIN
2019-02-10 23:53:14.114 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_ARTICLE_LIST_RANK_TOP
2019-02-10 23:53:14.115 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_ARTICLE_LIST
2019-02-10 23:53:14.115 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_ARTICLE_UPDATE_READ_COUNT
2019-02-10 23:53:14.115 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_ARTICLE_DETAIL
2019-02-10 23:53:14.116 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_RANDOM_ARTICLE
2019-02-10 23:53:14.116 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_LATEST_ARTICLE
2019-02-10 23:53:14.116 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_DAILY_ESSAYS
2019-02-10 23:53:14.117 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_DATA_EXPORT
2019-02-10 23:53:14.117 DEBUG c.c.c.MineServiceHandler - 初始化接口地址=MINE_CONST
2019-02-10 23:53:14.117 DEBUG c.c.c.MineServiceHandler - 测试接口初始化完毕
2019-02-10 23:53:15.905 INFO  o.a.c.h.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8181"]
2019-02-10 23:53:15.927 INFO  o.a.c.h.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8181"]
2019-02-10 23:53:15.966 INFO  o.a.t.u.n.NioSelectorPool - Using a shared selector for servlet write/read
2019-02-10 23:53:16.047 INFO  c.c.ServerApp - Started ServerApp in 31.324 seconds (JVM running for 32.336)
2019-02-10 23:53:22.678 INFO  o.a.c.c.C.[.[.[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-02-10 23:53:22.951 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:53:23.384 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@1a89eb9]
2019-02-10 23:53:23.388 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:53:23.427 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:53:23.652 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:53:23.654 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:53:23.659 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:53:23.661 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:53:23.662 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:53:23.664 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:53:23.667 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:53:24.139 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-10 23:53:24.330 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@1a89eb9]
2019-02-10 23:53:24.331 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-10 23:53:24.332 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-10 23:53:24.531 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:53:24.533 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16, 21333, null, 2, 网站前端
2019-02-10 23:53:24.535 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58, 21282, null, 3, 移动开发
2019-02-10 23:53:24.536 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53, 21219, null, 3, 移动开发
2019-02-10 23:53:24.538 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50, 21175, null, 3, 移动开发
2019-02-10 23:53:24.540 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35, 21128, null, 1, 后端技术
2019-02-10 23:53:24.946 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:53:25.137 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@1a89eb9]
2019-02-10 23:53:25.138 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:53:25.139 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:53:25.331 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:53:25.331 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:53:25.332 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:53:25.334 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:53:25.335 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:53:25.336 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:53:25.337 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:53:25.725 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:53:25.729 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_LATEST_ARTICLE","params":[3]}
2019-02-10 23:53:25.916 DEBUG c.c.m.A.findLatestArticle - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@24b09f]
2019-02-10 23:53:25.916 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@1a89eb9]
2019-02-10 23:53:25.917 DEBUG c.c.m.A.findLatestArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC LIMIT ? 
2019-02-10 23:53:25.917 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:53:25.918 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:53:25.918 DEBUG c.c.m.A.findLatestArticle - ==> Parameters: 3(Integer)
2019-02-10 23:53:26.115 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:53:26.116 DEBUG c.c.m.A.findLatestArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:53:26.116 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:53:26.117 DEBUG c.c.m.A.findLatestArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48, 0, null, 1, 后端技术
2019-02-10 23:53:26.118 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:53:26.119 DEBUG c.c.m.A.findLatestArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47, 0, null, 1, 后端技术
2019-02-10 23:53:26.119 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:53:26.121 DEBUG c.c.m.A.findLatestArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46, 0, null, 1, 后端技术
2019-02-10 23:53:26.121 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:53:26.125 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:53:26.127 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:53:26.528 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:53:26.716 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@24b09f]
2019-02-10 23:53:26.717 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:53:26.718 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:53:26.913 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:53:26.914 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:53:26.918 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:53:26.919 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:53:26.920 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:53:26.921 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:53:26.922 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:53:27.115 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":[null,null]}
2019-02-10 23:53:27.303 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@24b09f]
2019-02-10 23:53:27.304 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.updatetime DESC 
2019-02-10 23:53:27.305 DEBUG c.c.m.A.findArticle - ==> Parameters: 
2019-02-10 23:53:27.597 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:53:27.598 DEBUG c.c.m.A.findArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48, 0, null, 1, 后端技术
2019-02-10 23:53:27.599 DEBUG c.c.m.A.findArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47, 0, null, 1, 后端技术
2019-02-10 23:53:27.600 DEBUG c.c.m.A.findArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46, 0, null, 1, 后端技术
2019-02-10 23:53:27.601 DEBUG c.c.m.A.findArticle - <==        Row: 89, 测试5, ces 22233, 2019-02-06 19:48:44, 0, null, 1, 后端技术
2019-02-10 23:53:27.602 DEBUG c.c.m.A.findArticle - <==        Row: 88, 测试5, ces 22233, 2019-02-06 19:48:40, 0, null, 2, 网站前端
2019-02-10 23:53:27.602 DEBUG c.c.m.A.findArticle - <==        Row: 87, 测试5, ces 22233, 2019-02-06 19:48:38, 0, null, 2, 网站前端
2019-02-10 23:53:27.603 DEBUG c.c.m.A.findArticle - <==        Row: 86, 测试4, ces 22233, 2019-02-06 19:48:35, 0, null, 2, 网站前端
2019-02-10 23:53:27.605 DEBUG c.c.m.A.findArticle - <==        Row: 85, 测试4, ces 22233, 2019-02-06 19:48:34, 0, null, 2, 网站前端
2019-02-10 23:53:27.607 DEBUG c.c.m.A.findArticle - <==        Row: 84, 测试3, ces 22233, 2019-02-06 19:48:31, 0, null, 2, 网站前端
2019-02-10 23:53:27.609 DEBUG c.c.m.A.findArticle - <==        Row: 83, 测试2, ces 222, 2019-02-06 19:48:25, 0, null, 3, 移动开发
2019-02-10 23:53:27.610 DEBUG c.c.m.A.findArticle - <==        Row: 82, 测试1, ces , 2019-02-06 19:48:21, 0, null, 3, 移动开发
2019-02-10 23:53:27.611 DEBUG c.c.m.A.findArticle - <==        Row: 81, 测试, 测试, 2019-02-06 18:53:32, 0, null, 3, 移动开发
2019-02-10 23:53:27.612 DEBUG c.c.m.A.findArticle - <==        Row: 80, 过年了, 过年了，洗刷刷, 2019-02-06 18:46:31, 0, null, 2, 网站前端
2019-02-10 23:53:27.614 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35, 21128, null, 1, 后端技术
2019-02-10 23:53:27.615 DEBUG c.c.m.A.findArticle - <==        Row: 79, JAVA服务端通用数据导入导出组件V1.0, 工作中经常会遇到excel文件导入导出这类业务需求, 这些需求其实从根本上看都是对excel的解析处理,因此本人特地花了两天时间用JAVA写了一套通用的导入导出工具组件，为以后实现这类需求提高效率。组件源码地址：https://github.com/CodingGyd/project/tree/master/excel-utils, 2017-12-03 14:47:34, 17674, null, 3, 移动开发
2019-02-10 23:53:27.616 DEBUG c.c.m.A.findArticle - <==        Row: 78, 分布式文件系统FastDFS《一》, 博客文章需要用到图片文件，图片资源是保存在单独的文件服务器上。本博客的文件服务器是由FastDFS搭建的。FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。, 2017-11-06 20:51:27, 19608, null, 3, 移动开发
2019-02-10 23:53:27.617 DEBUG c.c.m.A.findArticle - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53, 21219, null, 3, 移动开发
2019-02-10 23:53:27.618 DEBUG c.c.m.A.findArticle - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50, 21175, null, 3, 移动开发
2019-02-10 23:53:27.618 DEBUG c.c.m.A.findArticle - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58, 21282, null, 3, 移动开发
2019-02-10 23:53:27.619 DEBUG c.c.m.A.findArticle - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16, 21333, null, 2, 网站前端
2019-02-10 23:53:33.814 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],"5"]}
2019-02-10 23:53:33.993 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@24b09f]
2019-02-10 23:53:33.994 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) AND dm = ? 
2019-02-10 23:53:33.995 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String), 5(String)
2019-02-10 23:53:34.192 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:53:34.193 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:53:34.388 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":["5",null]}
2019-02-10 23:53:34.567 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@24b09f]
2019-02-10 23:53:34.568 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' AND B.dm = ? ORDER BY A.updatetime DESC 
2019-02-10 23:53:34.569 DEBUG c.c.m.A.findArticle - ==> Parameters: 5(String)
2019-02-10 23:53:34.767 DEBUG c.c.s.i.ArticleServiceImpl - 未查到任何文章信息
2019-02-10 23:53:40.560 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://tcp://server.natappfree.cc:37970/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08001
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 4 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor16.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 3 common frames omitted
2019-02-10 23:54:02.026 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],"1"]}
2019-02-10 23:54:02.228 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@24b09f]
2019-02-10 23:54:02.229 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) AND dm = ? 
2019-02-10 23:54:02.230 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String), 1(String)
2019-02-10 23:54:02.446 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:54:02.447 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:54:02.658 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":["1",null]}
2019-02-10 23:54:02.846 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@24b09f]
2019-02-10 23:54:02.846 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' AND B.dm = ? ORDER BY A.updatetime DESC 
2019-02-10 23:54:02.847 DEBUG c.c.m.A.findArticle - ==> Parameters: 1(String)
2019-02-10 23:54:03.046 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:54:03.047 DEBUG c.c.m.A.findArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48, 0, null, 1, 后端技术
2019-02-10 23:54:03.048 DEBUG c.c.m.A.findArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47, 0, null, 1, 后端技术
2019-02-10 23:54:03.050 DEBUG c.c.m.A.findArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46, 0, null, 1, 后端技术
2019-02-10 23:54:03.051 DEBUG c.c.m.A.findArticle - <==        Row: 89, 测试5, ces 22233, 2019-02-06 19:48:44, 0, null, 1, 后端技术
2019-02-10 23:54:03.053 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35, 21128, null, 1, 后端技术
2019-02-10 23:54:05.764 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:54:05.943 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@24b09f]
2019-02-10 23:54:05.944 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:54:05.945 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:54:06.142 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:54:06.143 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:54:06.145 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:54:06.147 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:54:06.149 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:54:06.151 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:54:06.152 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:54:06.546 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST_RANK_TOP","params":[10]}
2019-02-10 23:54:06.723 DEBUG c.c.m.A.findArticleOrderByClickCount - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@24b09f]
2019-02-10 23:54:06.724 DEBUG c.c.m.A.findArticleOrderByClickCount - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' ORDER BY A.readingcount DESC LIMIT 5 
2019-02-10 23:54:06.725 DEBUG c.c.m.A.findArticleOrderByClickCount - ==> Parameters: 
2019-02-10 23:54:06.912 DEBUG c.c.m.A.findArticleOrderByClickCount - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:54:06.913 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 28, 立正向前走, 立正向前走, 2017-11-01 20:15:16, 21333, null, 2, 网站前端
2019-02-10 23:54:06.914 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 35, 个人博客版本更新记录(持续更新中...), 这里记录博主开发本博客的版本更新记录, 2017-11-01 22:40:58, 21282, null, 3, 移动开发
2019-02-10 23:54:06.916 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 36, 个人博客网站开发-域名备案流程, 简单记录一下本网站从域名申请到可以直接通过域名访问所需要完成的一些操作, 2017-11-01 22:55:53, 21219, null, 3, 移动开发
2019-02-10 23:54:06.917 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 27, sqlserver数据库数据类型与java数据类型对应表, sqlserver数据库数据类型与java数据类型对应表, 2017-11-01 22:43:50, 21175, null, 3, 移动开发
2019-02-10 23:54:06.918 DEBUG c.c.m.A.findArticleOrderByClickCount - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35, 21128, null, 1, 后端技术
2019-02-10 23:54:07.312 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],null]}
2019-02-10 23:54:07.497 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@24b09f]
2019-02-10 23:54:07.498 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) 
2019-02-10 23:54:07.499 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String)
2019-02-10 23:54:07.697 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:54:07.698 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:54:07.699 DEBUG c.c.m.S.listConst - <==        Row: 2, 100, 文章分类, 2, 网站前端, 2017-09-22 23:48:20, 记录笔者的生活
2019-02-10 23:54:07.700 DEBUG c.c.m.S.listConst - <==        Row: 3, 100, 文章分类, 3, 移动开发, 2017-09-22 23:48:20, 记录笔者平常技术学习用到的东东
2019-02-10 23:54:07.701 DEBUG c.c.m.S.listConst - <==        Row: 4, 100, 文章分类, null, 文章汇总, 2019-02-06 20:28:41, 记录笔者的技术文章、生活日记以及一些其它感悟
2019-02-10 23:54:07.703 DEBUG c.c.m.S.listConst - <==        Row: 5, 100, 文章分类, 4, 数据库, 2019-02-07 12:47:24, 记录数据库开发时遇到的各种知识点
2019-02-10 23:54:07.704 DEBUG c.c.m.S.listConst - <==        Row: 6, 100, 文章分类, 5, 算法, 2019-02-07 12:47:48, 记录各种常用算法
2019-02-10 23:54:08.103 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_CONST","params":[["100"],"1"]}
2019-02-10 23:54:08.288 DEBUG c.c.m.S.listConst - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@24b09f]
2019-02-10 23:54:08.289 DEBUG c.c.m.S.listConst - ==>  Preparing: SELECT id,lb,lbmc,dm,ms,updatetime,remarks FROM mine_sysconst WHERE 1=1 AND lb IN ( ? ) AND dm = ? 
2019-02-10 23:54:08.290 DEBUG c.c.m.S.listConst - ==> Parameters: 100(String), 1(String)
2019-02-10 23:54:08.484 DEBUG c.c.m.S.listConst - <==    Columns: id, lb, lbmc, dm, ms, updatetime, remarks
2019-02-10 23:54:08.485 DEBUG c.c.m.S.listConst - <==        Row: 1, 100, 文章分类, 1, 后端技术, 2017-09-22 23:48:20, 记录笔者平常用到的一些学习资料网站
2019-02-10 23:54:08.666 INFO  c.c.c.MineController - POST 参数:{"serviceId":"MINE_ARTICLE_LIST","params":["1",null]}
2019-02-10 23:54:08.853 DEBUG c.c.m.A.findArticle - ooo Using Connection [com.mysql.cj.jdbc.ConnectionImpl@24b09f]
2019-02-10 23:54:08.854 DEBUG c.c.m.A.findArticle - ==>  Preparing: SELECT A.id,title,descs,A.updatetime,readingcount,url,type,B.ms typeName FROM mine_articles A INNER JOIN mine_sysconst B ON A.type = B.dm AND B.lb = '100' AND B.dm = ? ORDER BY A.updatetime DESC 
2019-02-10 23:54:08.855 DEBUG c.c.m.A.findArticle - ==> Parameters: 1(String)
2019-02-10 23:54:09.055 DEBUG c.c.m.A.findArticle - <==    Columns: id, title, descs, updatetime, readingcount, url, type, ms
2019-02-10 23:54:09.056 DEBUG c.c.m.A.findArticle - <==        Row: 92, 测试5, ces 22233, 2019-02-06 19:48:48, 0, null, 1, 后端技术
2019-02-10 23:54:09.057 DEBUG c.c.m.A.findArticle - <==        Row: 91, 测试5, ces 22233, 2019-02-06 19:48:47, 0, null, 1, 后端技术
2019-02-10 23:54:09.059 DEBUG c.c.m.A.findArticle - <==        Row: 90, 测试5, ces 22233, 2019-02-06 19:48:46, 0, null, 1, 后端技术
2019-02-10 23:54:09.059 DEBUG c.c.m.A.findArticle - <==        Row: 89, 测试5, ces 22233, 2019-02-06 19:48:44, 0, null, 1, 后端技术
2019-02-10 23:54:09.060 DEBUG c.c.m.A.findArticle - <==        Row: 33, 资料网站合集(持续更新中...), 这里记录博主平常学习时会逛的IT资讯、工具网站地址, 2018-03-23 09:00:35, 21128, null, 1, 后端技术
2019-02-10 23:54:10.563 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://tcp://server.natappfree.cc:37970/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08001
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 4 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor16.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 3 common frames omitted
2019-02-10 23:54:40.564 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://tcp://server.natappfree.cc:37970/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08001
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 4 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor16.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 3 common frames omitted
2019-02-10 23:55:10.565 ERROR c.a.d.p.DruidDataSource - create connection error, url: jdbc:mysql://tcp://server.natappfree.cc:37970/rookiepalmspacedb?characterEncoding=utf-8&serverTimezone=GMT%2B8, errorCode 0, state 08001
java.sql.SQLNonTransientConnectionException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:110)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:89)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:63)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:73)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:79)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:131)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:219)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1421)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: com.mysql.cj.exceptions.UnableToConnectException: Cannot load connection class because of underlying exception: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor17.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	... 4 common frames omitted
Caused by: com.mysql.cj.exceptions.WrongArgumentException: Malformed database URL, failed to parse the main URL sections.
	at sun.reflect.GeneratedConstructorAccessor16.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:162)
	at com.mysql.cj.conf.ConnectionUrlParser.<init>(ConnectionUrlParser.java:136)
	at com.mysql.cj.conf.ConnectionUrlParser.parseConnectionString(ConnectionUrlParser.java:118)
	at com.mysql.cj.conf.ConnectionUrl.getConnectionUrlInstance(ConnectionUrl.java:197)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:196)
	... 3 common frames omitted
